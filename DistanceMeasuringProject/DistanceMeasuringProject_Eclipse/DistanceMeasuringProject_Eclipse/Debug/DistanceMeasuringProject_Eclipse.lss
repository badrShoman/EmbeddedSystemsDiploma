
DistanceMeasuringProject_Eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00003132  000031c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080017a  0080017a  000032e0  2**0
                  ALLOC
  3 .stab         00002b98  00000000  00000000  000032e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e10  00000000  00000000  00005e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000801a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c984  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_6>
      1c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_7>
      20:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_8>
      24:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <main>
      8a:	0c 94 97 18 	jmp	0x312e	; 0x312e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <GPIO_setupPinDirection+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_setupPinDirection+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02
     e40:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	88 30       	cpi	r24, 0x08	; 8
     e46:	08 f0       	brcs	.+2      	; 0xe4a <GPIO_setupPinDirection+0x1c>
     e48:	d5 c0       	rjmp	.+426    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <GPIO_setupPinDirection+0x24>
     e50:	d1 c0       	rjmp	.+418    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3d 83       	std	Y+5, r19	; 0x05
     e5a:	2c 83       	std	Y+4, r18	; 0x04
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <GPIO_setupPinDirection+0x3a>
     e66:	43 c0       	rjmp	.+134    	; 0xeee <GPIO_setupPinDirection+0xc0>
     e68:	2c 81       	ldd	r18, Y+4	; 0x04
     e6a:	3d 81       	ldd	r19, Y+5	; 0x05
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	2c f4       	brge	.+10     	; 0xe7c <GPIO_setupPinDirection+0x4e>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	71 f0       	breq	.+28     	; 0xe96 <GPIO_setupPinDirection+0x68>
     e7a:	bc c0       	rjmp	.+376    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <GPIO_setupPinDirection+0x5a>
     e86:	5f c0       	rjmp	.+190    	; 0xf46 <GPIO_setupPinDirection+0x118>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <GPIO_setupPinDirection+0x66>
     e92:	85 c0       	rjmp	.+266    	; 0xf9e <GPIO_setupPinDirection+0x170>
     e94:	af c0       	rjmp	.+350    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
     e9c:	aa e3       	ldi	r26, 0x3A	; 58
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e3       	ldi	r30, 0x3A	; 58
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <GPIO_setupPinDirection+0x8c>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <GPIO_setupPinDirection+0x88>
     ebe:	84 2b       	or	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	98 c0       	rjmp	.+304    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
     ec4:	aa e3       	ldi	r26, 0x3A	; 58
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e3       	ldi	r30, 0x3A	; 58
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <GPIO_setupPinDirection+0xb4>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <GPIO_setupPinDirection+0xb0>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	83 c0       	rjmp	.+262    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	a1 f4       	brne	.+40     	; 0xf1c <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
     ef4:	a7 e3       	ldi	r26, 0x37	; 55
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e3       	ldi	r30, 0x37	; 55
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_setupPinDirection+0xe4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_setupPinDirection+0xe0>
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	6c c0       	rjmp	.+216    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
     f1c:	a7 e3       	ldi	r26, 0x37	; 55
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e3       	ldi	r30, 0x37	; 55
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <GPIO_setupPinDirection+0x10c>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <GPIO_setupPinDirection+0x108>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	57 c0       	rjmp	.+174    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
     f4c:	a4 e3       	ldi	r26, 0x34	; 52
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e4 e3       	ldi	r30, 0x34	; 52
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <GPIO_setupPinDirection+0x13c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <GPIO_setupPinDirection+0x138>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	40 c0       	rjmp	.+128    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
     f74:	a4 e3       	ldi	r26, 0x34	; 52
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <GPIO_setupPinDirection+0x164>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <GPIO_setupPinDirection+0x160>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	2b c0       	rjmp	.+86     	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
     fa4:	a1 e3       	ldi	r26, 0x31	; 49
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e3       	ldi	r30, 0x31	; 49
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_setupPinDirection+0x194>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_setupPinDirection+0x190>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
     fcc:	a1 e3       	ldi	r26, 0x31	; 49
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e1 e3       	ldi	r30, 0x31	; 49
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_setupPinDirection+0x1bc>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_setupPinDirection+0x1b8>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_writePin+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <GPIO_writePin+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
    1016:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 30       	cpi	r24, 0x08	; 8
    101c:	08 f0       	brcs	.+2      	; 0x1020 <GPIO_writePin+0x1c>
    101e:	d5 c0       	rjmp	.+426    	; 0x11ca <GPIO_writePin+0x1c6>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	08 f0       	brcs	.+2      	; 0x1028 <GPIO_writePin+0x24>
    1026:	d1 c0       	rjmp	.+418    	; 0x11ca <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <GPIO_writePin+0x3a>
    103c:	43 c0       	rjmp	.+134    	; 0x10c4 <GPIO_writePin+0xc0>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <GPIO_writePin+0x4e>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	71 f0       	breq	.+28     	; 0x106c <GPIO_writePin+0x68>
    1050:	bc c0       	rjmp	.+376    	; 0x11ca <GPIO_writePin+0x1c6>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <GPIO_writePin+0x5a>
    105c:	5f c0       	rjmp	.+190    	; 0x111c <GPIO_writePin+0x118>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <GPIO_writePin+0x66>
    1068:	85 c0       	rjmp	.+266    	; 0x1174 <GPIO_writePin+0x170>
    106a:	af c0       	rjmp	.+350    	; 0x11ca <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_writePin+0x8c>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_writePin+0x88>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	98 c0       	rjmp	.+304    	; 0x11ca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_writePin+0xb4>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_writePin+0xb0>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	83 c0       	rjmp	.+262    	; 0x11ca <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
    10ca:	a8 e3       	ldi	r26, 0x38	; 56
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e3       	ldi	r30, 0x38	; 56
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_writePin+0xe4>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_writePin+0xe0>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	6c c0       	rjmp	.+216    	; 0x11ca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
    10f2:	a8 e3       	ldi	r26, 0x38	; 56
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e8 e3       	ldi	r30, 0x38	; 56
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_writePin+0x10c>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_writePin+0x108>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	57 c0       	rjmp	.+174    	; 0x11ca <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_writePin+0x13c>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_writePin+0x138>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	40 c0       	rjmp	.+128    	; 0x11ca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
    114a:	a5 e3       	ldi	r26, 0x35	; 53
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_writePin+0x164>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_writePin+0x160>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	2b c0       	rjmp	.+86     	; 0x11ca <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
    117a:	a2 e3       	ldi	r26, 0x32	; 50
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e3       	ldi	r30, 0x32	; 50
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_writePin+0x194>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_writePin+0x190>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_writePin+0x1bc>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_writePin+0x1b8>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_readPin+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_readPin+0x8>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <GPIO_readPin+0xa>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <GPIO_readPin+0x1a>
    11f2:	85 c0       	rjmp	.+266    	; 0x12fe <GPIO_readPin+0x124>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <GPIO_readPin+0x22>
    11fa:	81 c0       	rjmp	.+258    	; 0x12fe <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3d 83       	std	Y+5, r19	; 0x05
    1204:	2c 83       	std	Y+4, r18	; 0x04
    1206:	4c 81       	ldd	r20, Y+4	; 0x04
    1208:	5d 81       	ldd	r21, Y+5	; 0x05
    120a:	41 30       	cpi	r20, 0x01	; 1
    120c:	51 05       	cpc	r21, r1
    120e:	79 f1       	breq	.+94     	; 0x126e <GPIO_readPin+0x94>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	91 05       	cpc	r25, r1
    1218:	34 f4       	brge	.+12     	; 0x1226 <GPIO_readPin+0x4c>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	21 15       	cp	r18, r1
    1220:	31 05       	cpc	r19, r1
    1222:	69 f0       	breq	.+26     	; 0x123e <GPIO_readPin+0x64>
    1224:	6c c0       	rjmp	.+216    	; 0x12fe <GPIO_readPin+0x124>
    1226:	4c 81       	ldd	r20, Y+4	; 0x04
    1228:	5d 81       	ldd	r21, Y+5	; 0x05
    122a:	42 30       	cpi	r20, 0x02	; 2
    122c:	51 05       	cpc	r21, r1
    122e:	b9 f1       	breq	.+110    	; 0x129e <GPIO_readPin+0xc4>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_readPin+0x62>
    123a:	49 c0       	rjmp	.+146    	; 0x12ce <GPIO_readPin+0xf4>
    123c:	60 c0       	rjmp	.+192    	; 0x12fe <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
    123e:	e9 e3       	ldi	r30, 0x39	; 57
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_readPin+0x7c>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_readPin+0x78>
    125a:	ca 01       	movw	r24, r20
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f0       	breq	.+6      	; 0x126a <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    1264:	51 e0       	ldi	r21, 0x01	; 1
    1266:	5b 83       	std	Y+3, r21	; 0x03
    1268:	4b c0       	rjmp	.+150    	; 0x1300 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    126a:	1b 82       	std	Y+3, r1	; 0x03
    126c:	49 c0       	rjmp	.+146    	; 0x1300 <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
    126e:	e6 e3       	ldi	r30, 0x36	; 54
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_readPin+0xac>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_readPin+0xa8>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	88 23       	and	r24, r24
    1292:	19 f0       	breq	.+6      	; 0x129a <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    1294:	51 e0       	ldi	r21, 0x01	; 1
    1296:	5b 83       	std	Y+3, r21	; 0x03
    1298:	33 c0       	rjmp	.+102    	; 0x1300 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    129a:	1b 82       	std	Y+3, r1	; 0x03
    129c:	31 c0       	rjmp	.+98     	; 0x1300 <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
    129e:	e3 e3       	ldi	r30, 0x33	; 51
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a9 01       	movw	r20, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <GPIO_readPin+0xdc>
    12b2:	55 95       	asr	r21
    12b4:	47 95       	ror	r20
    12b6:	8a 95       	dec	r24
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <GPIO_readPin+0xd8>
    12ba:	ca 01       	movw	r24, r20
    12bc:	81 70       	andi	r24, 0x01	; 1
    12be:	90 70       	andi	r25, 0x00	; 0
    12c0:	88 23       	and	r24, r24
    12c2:	19 f0       	breq	.+6      	; 0x12ca <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    12c4:	51 e0       	ldi	r21, 0x01	; 1
    12c6:	5b 83       	std	Y+3, r21	; 0x03
    12c8:	1b c0       	rjmp	.+54     	; 0x1300 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    12ca:	1b 82       	std	Y+3, r1	; 0x03
    12cc:	19 c0       	rjmp	.+50     	; 0x1300 <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
    12ce:	e0 e3       	ldi	r30, 0x30	; 48
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_readPin+0x10c>
    12e2:	55 95       	asr	r21
    12e4:	47 95       	ror	r20
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_readPin+0x108>
    12ea:	ca 01       	movw	r24, r20
    12ec:	81 70       	andi	r24, 0x01	; 1
    12ee:	90 70       	andi	r25, 0x00	; 0
    12f0:	88 23       	and	r24, r24
    12f2:	19 f0       	breq	.+6      	; 0x12fa <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    12f4:	51 e0       	ldi	r21, 0x01	; 1
    12f6:	5b 83       	std	Y+3, r21	; 0x03
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    12fa:	1b 82       	std	Y+3, r1	; 0x03
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <GPIO_readPin+0x126>
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_readPin+0x12a>
				}
		}
	}
}
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	8e 83       	std	Y+6, r24	; 0x06
    1304:	8e 81       	ldd	r24, Y+6	; 0x06
    1306:	26 96       	adiw	r28, 0x06	; 6
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <GPIO_setupPortDirection+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_setupPortDirection+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	90 f5       	brcc	.+100    	; 0x1392 <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3c 83       	std	Y+4, r19	; 0x04
    1336:	2b 83       	std	Y+3, r18	; 0x03
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	d1 f0       	breq	.+52     	; 0x1376 <GPIO_setupPortDirection+0x5e>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <GPIO_setupPortDirection+0x3e>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	61 f0       	breq	.+24     	; 0x136c <GPIO_setupPortDirection+0x54>
    1354:	1e c0       	rjmp	.+60     	; 0x1392 <GPIO_setupPortDirection+0x7a>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	81 f0       	breq	.+32     	; 0x1380 <GPIO_setupPortDirection+0x68>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	81 f0       	breq	.+32     	; 0x138a <GPIO_setupPortDirection+0x72>
    136a:	13 c0       	rjmp	.+38     	; 0x1392 <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    136c:	ea e3       	ldi	r30, 0x3A	; 58
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	80 83       	st	Z, r24
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    1376:	e7 e3       	ldi	r30, 0x37	; 55
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	80 83       	st	Z, r24
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    1380:	e4 e3       	ldi	r30, 0x34	; 52
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	80 83       	st	Z, r24
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    138a:	e1 e3       	ldi	r30, 0x31	; 49
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 83       	st	Z, r24
			break;
		}
	}
}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_writePort+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <GPIO_writePort+0x8>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	90 f5       	brcc	.+100    	; 0x141a <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3c 83       	std	Y+4, r19	; 0x04
    13be:	2b 83       	std	Y+3, r18	; 0x03
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 05       	cpc	r25, r1
    13c8:	d1 f0       	breq	.+52     	; 0x13fe <GPIO_writePort+0x5e>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	2c f4       	brge	.+10     	; 0x13de <GPIO_writePort+0x3e>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	61 f0       	breq	.+24     	; 0x13f4 <GPIO_writePort+0x54>
    13dc:	1e c0       	rjmp	.+60     	; 0x141a <GPIO_writePort+0x7a>
    13de:	2b 81       	ldd	r18, Y+3	; 0x03
    13e0:	3c 81       	ldd	r19, Y+4	; 0x04
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	81 f0       	breq	.+32     	; 0x1408 <GPIO_writePort+0x68>
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	81 f0       	breq	.+32     	; 0x1412 <GPIO_writePort+0x72>
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	80 83       	st	Z, r24
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    13fe:	e8 e3       	ldi	r30, 0x38	; 56
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	80 83       	st	Z, r24
    1406:	09 c0       	rjmp	.+18     	; 0x141a <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    1408:	e5 e3       	ldi	r30, 0x35	; 53
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	80 83       	st	Z, r24
    1410:	04 c0       	rjmp	.+8      	; 0x141a <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	80 83       	st	Z, r24
			break;
		}
	}
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <GPIO_readPort+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <GPIO_readPort+0x8>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	98 f5       	brcc	.+102    	; 0x14a4 <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3c 83       	std	Y+4, r19	; 0x04
    1446:	2b 83       	std	Y+3, r18	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	d1 f0       	breq	.+52     	; 0x1486 <GPIO_readPort+0x5e>
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <GPIO_readPort+0x3e>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 f0       	breq	.+24     	; 0x147c <GPIO_readPort+0x54>
    1464:	1f c0       	rjmp	.+62     	; 0x14a4 <GPIO_readPort+0x7c>
    1466:	2b 81       	ldd	r18, Y+3	; 0x03
    1468:	3c 81       	ldd	r19, Y+4	; 0x04
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	81 f0       	breq	.+32     	; 0x1490 <GPIO_readPort+0x68>
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	81 f0       	breq	.+32     	; 0x149a <GPIO_readPort+0x72>
    147a:	14 c0       	rjmp	.+40     	; 0x14a4 <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    147c:	e9 e3       	ldi	r30, 0x39	; 57
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	90 81       	ld	r25, Z
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	10 c0       	rjmp	.+32     	; 0x14a6 <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    1486:	e6 e3       	ldi	r30, 0x36	; 54
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	20 81       	ld	r18, Z
    148c:	2a 83       	std	Y+2, r18	; 0x02
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    1490:	e3 e3       	ldi	r30, 0x33	; 51
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	30 81       	ld	r19, Z
    1496:	3a 83       	std	Y+2, r19	; 0x02
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    149a:	e0 e3       	ldi	r30, 0x30	; 48
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8a 83       	std	Y+2, r24	; 0x02
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <GPIO_readPort+0x7e>
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_readPort+0x82>
		}
	}
}
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	9d 83       	std	Y+5, r25	; 0x05
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <__vector_6>:
 * [Interrupt Vector]	: TIMER1_CAPT_vect
 * [Description]		:
 * 		An interrupt that acts upon detecting an edge.
 */
ISR(TIMER1_CAPT_vect)
{
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	if (g_interruptCallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    14e6:	80 91 7a 01 	lds	r24, 0x017A
    14ea:	90 91 7b 01 	lds	r25, 0x017B
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	29 f0       	breq	.+10     	; 0x14fc <__vector_6+0x40>
	{
		(*g_interruptCallBack_Ptr)(); /* Execute callback function */
    14f2:	e0 91 7a 01 	lds	r30, 0x017A
    14f6:	f0 91 7b 01 	lds	r31, 0x017B
    14fa:	09 95       	icall
	}
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	bf 91       	pop	r27
    1506:	af 91       	pop	r26
    1508:	9f 91       	pop	r25
    150a:	8f 91       	pop	r24
    150c:	7f 91       	pop	r23
    150e:	6f 91       	pop	r22
    1510:	5f 91       	pop	r21
    1512:	4f 91       	pop	r20
    1514:	3f 91       	pop	r19
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <ICU_init>:
 * [Args]	:
 * [In] Config_Ptr	: Includes pre-scaler & edge values.
 * [Return]			: Void.
 */
void ICU_init(const ICU_ConfigType *Config_Ptr)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <ICU_init+0x6>
    1528:	00 d0       	rcall	.+0      	; 0x152a <ICU_init+0x8>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02
	/* Select edge accordingly (MUST BE SELECTED FIRST) */
	switch ((*Config_Ptr).edge)
    1534:	ea 81       	ldd	r30, Y+2	; 0x02
    1536:	fb 81       	ldd	r31, Y+3	; 0x03
    1538:	80 81       	ld	r24, Z
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	86 95       	lsr	r24
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	3d 83       	std	Y+5, r19	; 0x05
    1548:	2c 83       	std	Y+4, r18	; 0x04
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	69 f0       	breq	.+26     	; 0x156c <ICU_init+0x4a>
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	21 30       	cpi	r18, 0x01	; 1
    1558:	31 05       	cpc	r19, r1
    155a:	79 f4       	brne	.+30     	; 0x157a <ICU_init+0x58>
	{
		case RISING:
			SET_BIT(TCCR1B, ICES1);
    155c:	ae e4       	ldi	r26, 0x4E	; 78
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ee e4       	ldi	r30, 0x4E	; 78
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 64       	ori	r24, 0x40	; 64
    1568:	8c 93       	st	X, r24
    156a:	07 c0       	rjmp	.+14     	; 0x157a <ICU_init+0x58>
		break;
		case FALLING:
			CLEAR_BIT(TCCR1B, ICES1);
    156c:	ae e4       	ldi	r26, 0x4E	; 78
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ee e4       	ldi	r30, 0x4E	; 78
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 7b       	andi	r24, 0xBF	; 191
    1578:	8c 93       	st	X, r24
		break;
	}
	/* Create an instance of Timer16Bit_initConfig to initialize timer1*/
	Timer_initConfig Timer1_config = { TIMER16BIT_NORMAL, NORMAL_OC,
			LOGIC_LOW };
    157a:	19 82       	std	Y+1, r1	; 0x01
	/* Initialize timer1 and disable it's interrupt*/
	Timer1_init(&Timer1_config);
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <Timer1_init>
	/* Initialize ICU copied value from timer1 by ZERO */
	ICR1 = 0;
    1584:	e6 e4       	ldi	r30, 0x46	; 70
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	11 82       	std	Z+1, r1	; 0x01
    158a:	10 82       	st	Z, r1
	/* Enable ICU interrupt */
	SET_BIT(TIMSK, TICIE1);
    158c:	a9 e5       	ldi	r26, 0x59	; 89
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e9 e5       	ldi	r30, 0x59	; 89
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 62       	ori	r24, 0x20	; 32
    1598:	8c 93       	st	X, r24
	/* Setup ICU pin direction */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	66 e0       	ldi	r22, 0x06	; 6
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	/* Start timer1 in normal mode */
	Timer1_start((*Config_Ptr).prescaler, 0, 0, 0);
    15a4:	ea 81       	ldd	r30, Y+2	; 0x02
    15a6:	fb 81       	ldd	r31, Y+3	; 0x03
    15a8:	80 81       	ld	r24, Z
    15aa:	87 70       	andi	r24, 0x07	; 7
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Timer1_start>
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <ICU_setCallBack>:
 * 		Function that sets the call-back function address for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void ICU_setCallBack(void (*Ptr2Function)(void))
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <ICU_setCallBack+0x6>
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
	g_interruptCallBack_Ptr = Ptr2Function;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	90 93 7b 01 	sts	0x017B, r25
    15e2:	80 93 7a 01 	sts	0x017A, r24
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <ICU_setEdgeDetectionType>:
 * [Args]	:
 * [In] edge	: Inducates edge required.
 * [Return]		: Void.
 */
void ICU_setEdgeDetectionType(const ICU_EDGE_TYPE edge)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <ICU_setEdgeDetectionType+0x6>
    15f6:	0f 92       	push	r0
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	89 83       	std	Y+1, r24	; 0x01
	/* Select edge accordingly */
	switch (edge)
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3b 83       	std	Y+3, r19	; 0x03
    1606:	2a 83       	std	Y+2, r18	; 0x02
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	69 f0       	breq	.+26     	; 0x162a <ICU_setEdgeDetectionType+0x3a>
    1610:	2a 81       	ldd	r18, Y+2	; 0x02
    1612:	3b 81       	ldd	r19, Y+3	; 0x03
    1614:	21 30       	cpi	r18, 0x01	; 1
    1616:	31 05       	cpc	r19, r1
    1618:	79 f4       	brne	.+30     	; 0x1638 <ICU_setEdgeDetectionType+0x48>
	{
		case RISING:
			SET_BIT(TCCR1B, ICES1);
    161a:	ae e4       	ldi	r26, 0x4E	; 78
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ee e4       	ldi	r30, 0x4E	; 78
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	80 64       	ori	r24, 0x40	; 64
    1626:	8c 93       	st	X, r24
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <ICU_setEdgeDetectionType+0x48>
		break;
		case FALLING:
			CLEAR_BIT(TCCR1B, ICES1);
    162a:	ae e4       	ldi	r26, 0x4E	; 78
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ee e4       	ldi	r30, 0x4E	; 78
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7b       	andi	r24, 0xBF	; 191
    1636:	8c 93       	st	X, r24
		break;
	}
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <ICU_getInputCaptureValue>:
 * 		Function that return the value of ICU last copied count of timer1.
 * [Args]		: Void.
 * [Return]		: ICU last copied count of timer1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    164c:	e6 e4       	ldi	r30, 0x46	; 70
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <ICU_clearTimerValue>:
 * 		Function that resets timer1 count value to ZERO.
 * [Args]		: Void.
 * [Return]		: Void
 */
void ICU_clearTimerValue(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1662:	ec e4       	ldi	r30, 0x4C	; 76
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	11 82       	std	Z+1, r1	; 0x01
    1668:	10 82       	st	Z, r1
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <ICU_deInit>:
 * 		Function that de-initialize timer1, clearing all it's settings & values.
 * [Args]		: Void.
 * [Return]		: Void
 */
void ICU_deInit(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	Timer1_deInit();
    1678:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Timer1_deInit>
}
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <__vector_9>:
 * [Interrupt Vector]	: TIMER1_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer1.
 */
ISR(TIMER1_OVF_vect)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    16ac:	80 91 7c 01 	lds	r24, 0x017C
    16b0:	90 91 7d 01 	lds	r25, 0x017D
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	29 f0       	breq	.+10     	; 0x16c2 <__vector_9+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    16b8:	e0 91 7c 01 	lds	r30, 0x017C
    16bc:	f0 91 7d 01 	lds	r31, 0x017D
    16c0:	09 95       	icall
	}
}
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__vector_7>:
 * [Interrupt Vector]	: TIMER1_COMPA_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit A.
 */
ISR(TIMER1_COMPA_vect)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1712:	80 91 7c 01 	lds	r24, 0x017C
    1716:	90 91 7d 01 	lds	r25, 0x017D
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	29 f0       	breq	.+10     	; 0x1728 <__vector_7+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    171e:	e0 91 7c 01 	lds	r30, 0x017C
    1722:	f0 91 7d 01 	lds	r31, 0x017D
    1726:	09 95       	icall
	}
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_8>:
 * [Interrupt Vector]	: TIMER1_COMPB_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit B.
 */
ISR(TIMER1_COMPB_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitB_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1778:	80 91 7e 01 	lds	r24, 0x017E
    177c:	90 91 7f 01 	lds	r25, 0x017F
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	29 f0       	breq	.+10     	; 0x178e <__vector_8+0x40>
	{
		(*g_timer1CallBackUnitB_Ptr)(); /* Execute callback function */
    1784:	e0 91 7e 01 	lds	r30, 0x017E
    1788:	f0 91 7f 01 	lds	r31, 0x017F
    178c:	09 95       	icall
	}
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <Timer1_init>:
#endif

#if (TIMER1_ENABLE == TRUE)

void Timer1_init(const Timer_initConfig *timerConfig)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	2e 97       	sbiw	r28, 0x0e	; 14
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR1A);
    17cc:	ef e4       	ldi	r30, 0x4F	; 79
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	20 81       	ld	r18, Z
    17d2:	ef e4       	ldi	r30, 0x4F	; 79
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    17d8:	ee e4       	ldi	r30, 0x4E	; 78
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	30 81       	ld	r19, Z
    17de:	ee e4       	ldi	r30, 0x4E	; 78
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    17e4:	e9 81       	ldd	r30, Y+1	; 0x01
    17e6:	fa 81       	ldd	r31, Y+2	; 0x02
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 70       	andi	r24, 0x0F	; 15
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3c 87       	std	Y+12, r19	; 0x0c
    17f2:	2b 87       	std	Y+11, r18	; 0x0b
    17f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f8:	87 30       	cpi	r24, 0x07	; 7
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <Timer1_init+0x4c>
    17fe:	40 c1       	rjmp	.+640    	; 0x1a80 <Timer1_init+0x2cc>
    1800:	2b 85       	ldd	r18, Y+11	; 0x0b
    1802:	3c 85       	ldd	r19, Y+12	; 0x0c
    1804:	28 30       	cpi	r18, 0x08	; 8
    1806:	31 05       	cpc	r19, r1
    1808:	4c f5       	brge	.+82     	; 0x185c <Timer1_init+0xa8>
    180a:	8b 85       	ldd	r24, Y+11	; 0x0b
    180c:	9c 85       	ldd	r25, Y+12	; 0x0c
    180e:	83 30       	cpi	r24, 0x03	; 3
    1810:	91 05       	cpc	r25, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <Timer1_init+0x62>
    1814:	b3 c0       	rjmp	.+358    	; 0x197c <Timer1_init+0x1c8>
    1816:	2b 85       	ldd	r18, Y+11	; 0x0b
    1818:	3c 85       	ldd	r19, Y+12	; 0x0c
    181a:	24 30       	cpi	r18, 0x04	; 4
    181c:	31 05       	cpc	r19, r1
    181e:	8c f4       	brge	.+34     	; 0x1842 <Timer1_init+0x8e>
    1820:	8b 85       	ldd	r24, Y+11	; 0x0b
    1822:	9c 85       	ldd	r25, Y+12	; 0x0c
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <Timer1_init+0x78>
    182a:	6e c0       	rjmp	.+220    	; 0x1908 <Timer1_init+0x154>
    182c:	2b 85       	ldd	r18, Y+11	; 0x0b
    182e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	0c f0       	brlt	.+2      	; 0x1838 <Timer1_init+0x84>
    1836:	85 c0       	rjmp	.+266    	; 0x1942 <Timer1_init+0x18e>
    1838:	8b 85       	ldd	r24, Y+11	; 0x0b
    183a:	9c 85       	ldd	r25, Y+12	; 0x0c
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	c9 f1       	breq	.+114    	; 0x18b2 <Timer1_init+0xfe>
    1840:	14 c2       	rjmp	.+1064   	; 0x1c6a <Timer1_init+0x4b6>
    1842:	2b 85       	ldd	r18, Y+11	; 0x0b
    1844:	3c 85       	ldd	r19, Y+12	; 0x0c
    1846:	25 30       	cpi	r18, 0x05	; 5
    1848:	31 05       	cpc	r19, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <Timer1_init+0x9a>
    184c:	df c0       	rjmp	.+446    	; 0x1a0c <Timer1_init+0x258>
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	86 30       	cpi	r24, 0x06	; 6
    1854:	91 05       	cpc	r25, r1
    1856:	0c f0       	brlt	.+2      	; 0x185a <Timer1_init+0xa6>
    1858:	f6 c0       	rjmp	.+492    	; 0x1a46 <Timer1_init+0x292>
    185a:	ad c0       	rjmp	.+346    	; 0x19b6 <Timer1_init+0x202>
    185c:	2b 85       	ldd	r18, Y+11	; 0x0b
    185e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1860:	2b 30       	cpi	r18, 0x0B	; 11
    1862:	31 05       	cpc	r19, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <Timer1_init+0xb4>
    1866:	80 c1       	rjmp	.+768    	; 0x1b68 <Timer1_init+0x3b4>
    1868:	8b 85       	ldd	r24, Y+11	; 0x0b
    186a:	9c 85       	ldd	r25, Y+12	; 0x0c
    186c:	8c 30       	cpi	r24, 0x0C	; 12
    186e:	91 05       	cpc	r25, r1
    1870:	6c f4       	brge	.+26     	; 0x188c <Timer1_init+0xd8>
    1872:	2b 85       	ldd	r18, Y+11	; 0x0b
    1874:	3c 85       	ldd	r19, Y+12	; 0x0c
    1876:	29 30       	cpi	r18, 0x09	; 9
    1878:	31 05       	cpc	r19, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <Timer1_init+0xca>
    187c:	3b c1       	rjmp	.+630    	; 0x1af4 <Timer1_init+0x340>
    187e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1880:	9c 85       	ldd	r25, Y+12	; 0x0c
    1882:	8a 30       	cpi	r24, 0x0A	; 10
    1884:	91 05       	cpc	r25, r1
    1886:	0c f0       	brlt	.+2      	; 0x188a <Timer1_init+0xd6>
    1888:	52 c1       	rjmp	.+676    	; 0x1b2e <Timer1_init+0x37a>
    188a:	17 c1       	rjmp	.+558    	; 0x1aba <Timer1_init+0x306>
    188c:	2b 85       	ldd	r18, Y+11	; 0x0b
    188e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1890:	2e 30       	cpi	r18, 0x0E	; 14
    1892:	31 05       	cpc	r19, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <Timer1_init+0xe4>
    1896:	b0 c1       	rjmp	.+864    	; 0x1bf8 <Timer1_init+0x444>
    1898:	8b 85       	ldd	r24, Y+11	; 0x0b
    189a:	9c 85       	ldd	r25, Y+12	; 0x0c
    189c:	8f 30       	cpi	r24, 0x0F	; 15
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <Timer1_init+0xf0>
    18a2:	c7 c1       	rjmp	.+910    	; 0x1c32 <Timer1_init+0x47e>
    18a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    18a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    18a8:	2c 30       	cpi	r18, 0x0C	; 12
    18aa:	31 05       	cpc	r19, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <Timer1_init+0xfc>
    18ae:	79 c1       	rjmp	.+754    	; 0x1ba2 <Timer1_init+0x3ee>
    18b0:	dc c1       	rjmp	.+952    	; 0x1c6a <Timer1_init+0x4b6>
	{
		case TIMER16BIT_NORMAL:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    18b2:	af e4       	ldi	r26, 0x4F	; 79
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ef e4       	ldi	r30, 0x4F	; 79
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 60       	ori	r24, 0x08	; 8
    18be:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    18c0:	af e4       	ldi	r26, 0x4F	; 79
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ef e4       	ldi	r30, 0x4F	; 79
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	84 60       	ori	r24, 0x04	; 4
    18cc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    18ce:	ae e4       	ldi	r26, 0x4E	; 78
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ee e4       	ldi	r30, 0x4E	; 78
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8f 7e       	andi	r24, 0xEF	; 239
    18da:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    18dc:	ae e4       	ldi	r26, 0x4E	; 78
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ee e4       	ldi	r30, 0x4E	; 78
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	87 7f       	andi	r24, 0xF7	; 247
    18e8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    18ea:	af e4       	ldi	r26, 0x4F	; 79
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ef e4       	ldi	r30, 0x4F	; 79
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8d 7f       	andi	r24, 0xFD	; 253
    18f6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    18f8:	af e4       	ldi	r26, 0x4F	; 79
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ef e4       	ldi	r30, 0x4F	; 79
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	8c 93       	st	X, r24
    1906:	b1 c1       	rjmp	.+866    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1908:	ae e4       	ldi	r26, 0x4E	; 78
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ee e4       	ldi	r30, 0x4E	; 78
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8f 7e       	andi	r24, 0xEF	; 239
    1914:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1916:	ae e4       	ldi	r26, 0x4E	; 78
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ee e4       	ldi	r30, 0x4E	; 78
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	87 7f       	andi	r24, 0xF7	; 247
    1922:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1924:	af e4       	ldi	r26, 0x4F	; 79
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ef e4       	ldi	r30, 0x4F	; 79
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8d 7f       	andi	r24, 0xFD	; 253
    1930:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1932:	af e4       	ldi	r26, 0x4F	; 79
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ef e4       	ldi	r30, 0x4F	; 79
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	81 60       	ori	r24, 0x01	; 1
    193e:	8c 93       	st	X, r24
    1940:	94 c1       	rjmp	.+808    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1942:	ae e4       	ldi	r26, 0x4E	; 78
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ee e4       	ldi	r30, 0x4E	; 78
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7e       	andi	r24, 0xEF	; 239
    194e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1950:	ae e4       	ldi	r26, 0x4E	; 78
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ee e4       	ldi	r30, 0x4E	; 78
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	87 7f       	andi	r24, 0xF7	; 247
    195c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    195e:	af e4       	ldi	r26, 0x4F	; 79
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ef e4       	ldi	r30, 0x4F	; 79
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	82 60       	ori	r24, 0x02	; 2
    196a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    196c:	af e4       	ldi	r26, 0x4F	; 79
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ef e4       	ldi	r30, 0x4F	; 79
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8e 7f       	andi	r24, 0xFE	; 254
    1978:	8c 93       	st	X, r24
    197a:	77 c1       	rjmp	.+750    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    197c:	ae e4       	ldi	r26, 0x4E	; 78
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ee e4       	ldi	r30, 0x4E	; 78
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 7e       	andi	r24, 0xEF	; 239
    1988:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	87 7f       	andi	r24, 0xF7	; 247
    1996:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1998:	af e4       	ldi	r26, 0x4F	; 79
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ef e4       	ldi	r30, 0x4F	; 79
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	82 60       	ori	r24, 0x02	; 2
    19a4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    19a6:	af e4       	ldi	r26, 0x4F	; 79
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	ef e4       	ldi	r30, 0x4F	; 79
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	81 60       	ori	r24, 0x01	; 1
    19b2:	8c 93       	st	X, r24
    19b4:	5a c1       	rjmp	.+692    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_OCR1A:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    19b6:	af e4       	ldi	r26, 0x4F	; 79
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef e4       	ldi	r30, 0x4F	; 79
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	88 60       	ori	r24, 0x08	; 8
    19c2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    19c4:	af e4       	ldi	r26, 0x4F	; 79
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ef e4       	ldi	r30, 0x4F	; 79
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	84 60       	ori	r24, 0x04	; 4
    19d0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    19d2:	ae e4       	ldi	r26, 0x4E	; 78
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ee e4       	ldi	r30, 0x4E	; 78
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 7e       	andi	r24, 0xEF	; 239
    19de:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    19e0:	ae e4       	ldi	r26, 0x4E	; 78
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ee e4       	ldi	r30, 0x4E	; 78
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	88 60       	ori	r24, 0x08	; 8
    19ec:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    19ee:	af e4       	ldi	r26, 0x4F	; 79
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef e4       	ldi	r30, 0x4F	; 79
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8d 7f       	andi	r24, 0xFD	; 253
    19fa:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    19fc:	af e4       	ldi	r26, 0x4F	; 79
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e4       	ldi	r30, 0x4F	; 79
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8e 7f       	andi	r24, 0xFE	; 254
    1a08:	8c 93       	st	X, r24
    1a0a:	2f c1       	rjmp	.+606    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1a0c:	ae e4       	ldi	r26, 0x4E	; 78
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ee e4       	ldi	r30, 0x4E	; 78
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8f 7e       	andi	r24, 0xEF	; 239
    1a18:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1a1a:	ae e4       	ldi	r26, 0x4E	; 78
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ee e4       	ldi	r30, 0x4E	; 78
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 60       	ori	r24, 0x08	; 8
    1a26:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1a28:	af e4       	ldi	r26, 0x4F	; 79
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ef e4       	ldi	r30, 0x4F	; 79
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8d 7f       	andi	r24, 0xFD	; 253
    1a34:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1a36:	af e4       	ldi	r26, 0x4F	; 79
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	ef e4       	ldi	r30, 0x4F	; 79
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	8c 93       	st	X, r24
    1a44:	12 c1       	rjmp	.+548    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1a46:	ae e4       	ldi	r26, 0x4E	; 78
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ee e4       	ldi	r30, 0x4E	; 78
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 7e       	andi	r24, 0xEF	; 239
    1a52:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1a54:	ae e4       	ldi	r26, 0x4E	; 78
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ee e4       	ldi	r30, 0x4E	; 78
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 60       	ori	r24, 0x08	; 8
    1a60:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1a62:	af e4       	ldi	r26, 0x4F	; 79
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ef e4       	ldi	r30, 0x4F	; 79
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	82 60       	ori	r24, 0x02	; 2
    1a6e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1a70:	af e4       	ldi	r26, 0x4F	; 79
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	ef e4       	ldi	r30, 0x4F	; 79
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	8e 7f       	andi	r24, 0xFE	; 254
    1a7c:	8c 93       	st	X, r24
    1a7e:	f5 c0       	rjmp	.+490    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1a80:	ae e4       	ldi	r26, 0x4E	; 78
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ee e4       	ldi	r30, 0x4E	; 78
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8f 7e       	andi	r24, 0xEF	; 239
    1a8c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1a8e:	ae e4       	ldi	r26, 0x4E	; 78
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	ee e4       	ldi	r30, 0x4E	; 78
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	88 60       	ori	r24, 0x08	; 8
    1a9a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1a9c:	af e4       	ldi	r26, 0x4F	; 79
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	ef e4       	ldi	r30, 0x4F	; 79
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	82 60       	ori	r24, 0x02	; 2
    1aa8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1aaa:	af e4       	ldi	r26, 0x4F	; 79
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	ef e4       	ldi	r30, 0x4F	; 79
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	8c 93       	st	X, r24
    1ab8:	d8 c0       	rjmp	.+432    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1aba:	ae e4       	ldi	r26, 0x4E	; 78
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	ee e4       	ldi	r30, 0x4E	; 78
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 61       	ori	r24, 0x10	; 16
    1ac6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1ac8:	ae e4       	ldi	r26, 0x4E	; 78
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	ee e4       	ldi	r30, 0x4E	; 78
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	87 7f       	andi	r24, 0xF7	; 247
    1ad4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1ad6:	af e4       	ldi	r26, 0x4F	; 79
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ef e4       	ldi	r30, 0x4F	; 79
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8d 7f       	andi	r24, 0xFD	; 253
    1ae2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1ae4:	af e4       	ldi	r26, 0x4F	; 79
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	ef e4       	ldi	r30, 0x4F	; 79
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8e 7f       	andi	r24, 0xFE	; 254
    1af0:	8c 93       	st	X, r24
    1af2:	bb c0       	rjmp	.+374    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1af4:	ae e4       	ldi	r26, 0x4E	; 78
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ee e4       	ldi	r30, 0x4E	; 78
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 61       	ori	r24, 0x10	; 16
    1b00:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1b02:	ae e4       	ldi	r26, 0x4E	; 78
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	ee e4       	ldi	r30, 0x4E	; 78
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	87 7f       	andi	r24, 0xF7	; 247
    1b0e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1b10:	af e4       	ldi	r26, 0x4F	; 79
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ef e4       	ldi	r30, 0x4F	; 79
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8d 7f       	andi	r24, 0xFD	; 253
    1b1c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1b1e:	af e4       	ldi	r26, 0x4F	; 79
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	ef e4       	ldi	r30, 0x4F	; 79
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	8c 93       	st	X, r24
    1b2c:	9e c0       	rjmp	.+316    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1b2e:	ae e4       	ldi	r26, 0x4E	; 78
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ee e4       	ldi	r30, 0x4E	; 78
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 61       	ori	r24, 0x10	; 16
    1b3a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1b3c:	ae e4       	ldi	r26, 0x4E	; 78
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	ee e4       	ldi	r30, 0x4E	; 78
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	87 7f       	andi	r24, 0xF7	; 247
    1b48:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1b4a:	af e4       	ldi	r26, 0x4F	; 79
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ef e4       	ldi	r30, 0x4F	; 79
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	82 60       	ori	r24, 0x02	; 2
    1b56:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1b58:	af e4       	ldi	r26, 0x4F	; 79
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	ef e4       	ldi	r30, 0x4F	; 79
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8e 7f       	andi	r24, 0xFE	; 254
    1b64:	8c 93       	st	X, r24
    1b66:	81 c0       	rjmp	.+258    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1b68:	ae e4       	ldi	r26, 0x4E	; 78
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	ee e4       	ldi	r30, 0x4E	; 78
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 61       	ori	r24, 0x10	; 16
    1b74:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1b76:	ae e4       	ldi	r26, 0x4E	; 78
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ee e4       	ldi	r30, 0x4E	; 78
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	87 7f       	andi	r24, 0xF7	; 247
    1b82:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1b84:	af e4       	ldi	r26, 0x4F	; 79
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e4       	ldi	r30, 0x4F	; 79
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1b92:	af e4       	ldi	r26, 0x4F	; 79
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ef e4       	ldi	r30, 0x4F	; 79
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	81 60       	ori	r24, 0x01	; 1
    1b9e:	8c 93       	st	X, r24
    1ba0:	64 c0       	rjmp	.+200    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_ICR1:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    1ba2:	af e4       	ldi	r26, 0x4F	; 79
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ef e4       	ldi	r30, 0x4F	; 79
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 60       	ori	r24, 0x08	; 8
    1bae:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1bb0:	af e4       	ldi	r26, 0x4F	; 79
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ef e4       	ldi	r30, 0x4F	; 79
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	84 60       	ori	r24, 0x04	; 4
    1bbc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    1bbe:	ae e4       	ldi	r26, 0x4E	; 78
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ee e4       	ldi	r30, 0x4E	; 78
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 61       	ori	r24, 0x10	; 16
    1bca:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1bcc:	ae e4       	ldi	r26, 0x4E	; 78
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ee e4       	ldi	r30, 0x4E	; 78
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 60       	ori	r24, 0x08	; 8
    1bd8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1bda:	af e4       	ldi	r26, 0x4F	; 79
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ef e4       	ldi	r30, 0x4F	; 79
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8d 7f       	andi	r24, 0xFD	; 253
    1be6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1be8:	af e4       	ldi	r26, 0x4F	; 79
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ef e4       	ldi	r30, 0x4F	; 79
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8e 7f       	andi	r24, 0xFE	; 254
    1bf4:	8c 93       	st	X, r24
    1bf6:	39 c0       	rjmp	.+114    	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1bf8:	ae e4       	ldi	r26, 0x4E	; 78
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ee e4       	ldi	r30, 0x4E	; 78
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 61       	ori	r24, 0x10	; 16
    1c04:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1c06:	ae e4       	ldi	r26, 0x4E	; 78
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	ee e4       	ldi	r30, 0x4E	; 78
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	88 60       	ori	r24, 0x08	; 8
    1c12:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1c14:	af e4       	ldi	r26, 0x4F	; 79
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ef e4       	ldi	r30, 0x4F	; 79
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	82 60       	ori	r24, 0x02	; 2
    1c20:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1c22:	af e4       	ldi	r26, 0x4F	; 79
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ef e4       	ldi	r30, 0x4F	; 79
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8e 7f       	andi	r24, 0xFE	; 254
    1c2e:	8c 93       	st	X, r24
    1c30:	1c c0       	rjmp	.+56     	; 0x1c6a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1c32:	ae e4       	ldi	r26, 0x4E	; 78
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ee e4       	ldi	r30, 0x4E	; 78
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 61       	ori	r24, 0x10	; 16
    1c3e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1c40:	ae e4       	ldi	r26, 0x4E	; 78
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ee e4       	ldi	r30, 0x4E	; 78
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1c4e:	af e4       	ldi	r26, 0x4F	; 79
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ef e4       	ldi	r30, 0x4F	; 79
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	82 60       	ori	r24, 0x02	; 2
    1c5a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1c5c:	af e4       	ldi	r26, 0x4F	; 79
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ef e4       	ldi	r30, 0x4F	; 79
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	8c 93       	st	X, r24
		break;
	}
	if (((*timerConfig).mode == TIMER16BIT_CTC_OCR1A)
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 70       	andi	r24, 0x0F	; 15
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	39 f0       	breq	.+14     	; 0x1c84 <Timer1_init+0x4d0>
    1c76:	e9 81       	ldd	r30, Y+1	; 0x01
    1c78:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 70       	andi	r24, 0x0F	; 15
    1c7e:	8c 30       	cpi	r24, 0x0C	; 12
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <Timer1_init+0x4d0>
    1c82:	f8 c0       	rjmp	.+496    	; 0x1e74 <Timer1_init+0x6c0>
			|| ((*timerConfig).mode == TIMER16BIT_CTC_ICR1))
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	80 81       	ld	r24, Z
    1c8a:	82 95       	swap	r24
    1c8c:	86 95       	lsr	r24
    1c8e:	86 95       	lsr	r24
    1c90:	83 70       	andi	r24, 0x03	; 3
    1c92:	81 70       	andi	r24, 0x01	; 1
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3a 87       	std	Y+10, r19	; 0x0a
    1c9a:	29 87       	std	Y+9, r18	; 0x09
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	d9 f0       	breq	.+54     	; 0x1cda <Timer1_init+0x526>
    1ca4:	29 85       	ldd	r18, Y+9	; 0x09
    1ca6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ca8:	21 30       	cpi	r18, 0x01	; 1
    1caa:	31 05       	cpc	r19, r1
    1cac:	59 f5       	brne	.+86     	; 0x1d04 <Timer1_init+0x550>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE1A);
    1cae:	a9 e5       	ldi	r26, 0x59	; 89
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e9 e5       	ldi	r30, 0x59	; 89
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	80 61       	ori	r24, 0x10	; 16
    1cba:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B);
    1cbc:	a9 e5       	ldi	r26, 0x59	; 89
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e9 e5       	ldi	r30, 0x59	; 89
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 60       	ori	r24, 0x08	; 8
    1cc8:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1cca:	a9 e5       	ldi	r26, 0x59	; 89
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e9 e5       	ldi	r30, 0x59	; 89
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8b 7f       	andi	r24, 0xFB	; 251
    1cd6:	8c 93       	st	X, r24
    1cd8:	15 c0       	rjmp	.+42     	; 0x1d04 <Timer1_init+0x550>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    1cda:	a9 e5       	ldi	r26, 0x59	; 89
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e9 e5       	ldi	r30, 0x59	; 89
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 7e       	andi	r24, 0xEF	; 239
    1ce6:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    1ce8:	a9 e5       	ldi	r26, 0x59	; 89
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e9 e5       	ldi	r30, 0x59	; 89
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	87 7f       	andi	r24, 0xF7	; 247
    1cf4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1cf6:	a9 e5       	ldi	r26, 0x59	; 89
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 e5       	ldi	r30, 0x59	; 89
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8b 7f       	andi	r24, 0xFB	; 251
    1d02:	8c 93       	st	X, r24
			break;
		}
		/* Select compare mode */
		switch ((*timerConfig).compareOutputMode)
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	80 81       	ld	r24, Z
    1d0a:	82 95       	swap	r24
    1d0c:	8f 70       	andi	r24, 0x0F	; 15
    1d0e:	83 70       	andi	r24, 0x03	; 3
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	38 87       	std	Y+8, r19	; 0x08
    1d16:	2f 83       	std	Y+7, r18	; 0x07
    1d18:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1a:	98 85       	ldd	r25, Y+8	; 0x08
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	a1 f1       	breq	.+104    	; 0x1d8a <Timer1_init+0x5d6>
    1d22:	2f 81       	ldd	r18, Y+7	; 0x07
    1d24:	38 85       	ldd	r19, Y+8	; 0x08
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <Timer1_init+0x582>
    1d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2e:	98 85       	ldd	r25, Y+8	; 0x08
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	71 f0       	breq	.+28     	; 0x1d50 <Timer1_init+0x59c>
    1d34:	a3 c1       	rjmp	.+838    	; 0x207c <Timer1_init+0x8c8>
    1d36:	2f 81       	ldd	r18, Y+7	; 0x07
    1d38:	38 85       	ldd	r19, Y+8	; 0x08
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <Timer1_init+0x58e>
    1d40:	4b c0       	rjmp	.+150    	; 0x1dd8 <Timer1_init+0x624>
    1d42:	8f 81       	ldd	r24, Y+7	; 0x07
    1d44:	98 85       	ldd	r25, Y+8	; 0x08
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <Timer1_init+0x59a>
    1d4c:	6c c0       	rjmp	.+216    	; 0x1e26 <Timer1_init+0x672>
    1d4e:	96 c1       	rjmp	.+812    	; 0x207c <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1d50:	af e4       	ldi	r26, 0x4F	; 79
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ef e4       	ldi	r30, 0x4F	; 79
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 77       	andi	r24, 0x7F	; 127
    1d5c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1d5e:	af e4       	ldi	r26, 0x4F	; 79
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ef e4       	ldi	r30, 0x4F	; 79
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 7d       	andi	r24, 0xDF	; 223
    1d6a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1d6c:	af e4       	ldi	r26, 0x4F	; 79
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ef e4       	ldi	r30, 0x4F	; 79
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 7b       	andi	r24, 0xBF	; 191
    1d78:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1d7a:	af e4       	ldi	r26, 0x4F	; 79
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ef e4       	ldi	r30, 0x4F	; 79
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 7e       	andi	r24, 0xEF	; 239
    1d86:	8c 93       	st	X, r24
    1d88:	79 c1       	rjmp	.+754    	; 0x207c <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1d8a:	af e4       	ldi	r26, 0x4F	; 79
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ef e4       	ldi	r30, 0x4F	; 79
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8f 77       	andi	r24, 0x7F	; 127
    1d96:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1d98:	af e4       	ldi	r26, 0x4F	; 79
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ef e4       	ldi	r30, 0x4F	; 79
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    1da6:	af e4       	ldi	r26, 0x4F	; 79
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ef e4       	ldi	r30, 0x4F	; 79
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 64       	ori	r24, 0x40	; 64
    1db2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    1db4:	af e4       	ldi	r26, 0x4F	; 79
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ef e4       	ldi	r30, 0x4F	; 79
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	80 61       	ori	r24, 0x10	; 16
    1dc0:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	64 e0       	ldi	r22, 0x04	; 4
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	65 e0       	ldi	r22, 0x05	; 5
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1dd6:	52 c1       	rjmp	.+676    	; 0x207c <Timer1_init+0x8c8>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    1dd8:	af e4       	ldi	r26, 0x4F	; 79
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ef e4       	ldi	r30, 0x4F	; 79
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 68       	ori	r24, 0x80	; 128
    1de4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1de6:	af e4       	ldi	r26, 0x4F	; 79
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	ef e4       	ldi	r30, 0x4F	; 79
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 62       	ori	r24, 0x20	; 32
    1df2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1df4:	af e4       	ldi	r26, 0x4F	; 79
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ef e4       	ldi	r30, 0x4F	; 79
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8f 7b       	andi	r24, 0xBF	; 191
    1e00:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1e02:	af e4       	ldi	r26, 0x4F	; 79
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	ef e4       	ldi	r30, 0x4F	; 79
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8f 7e       	andi	r24, 0xEF	; 239
    1e0e:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	64 e0       	ldi	r22, 0x04	; 4
    1e14:	41 e0       	ldi	r20, 0x01	; 1
    1e16:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	65 e0       	ldi	r22, 0x05	; 5
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1e24:	2b c1       	rjmp	.+598    	; 0x207c <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    1e26:	af e4       	ldi	r26, 0x4F	; 79
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	ef e4       	ldi	r30, 0x4F	; 79
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	80 68       	ori	r24, 0x80	; 128
    1e32:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1e34:	af e4       	ldi	r26, 0x4F	; 79
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	ef e4       	ldi	r30, 0x4F	; 79
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 62       	ori	r24, 0x20	; 32
    1e40:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    1e42:	af e4       	ldi	r26, 0x4F	; 79
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	ef e4       	ldi	r30, 0x4F	; 79
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 64       	ori	r24, 0x40	; 64
    1e4e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    1e50:	af e4       	ldi	r26, 0x4F	; 79
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ef e4       	ldi	r30, 0x4F	; 79
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 61       	ori	r24, 0x10	; 16
    1e5c:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1e68:	83 e0       	ldi	r24, 0x03	; 3
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1e72:	04 c1       	rjmp	.+520    	; 0x207c <Timer1_init+0x8c8>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	80 81       	ld	r24, Z
    1e7a:	82 95       	swap	r24
    1e7c:	86 95       	lsr	r24
    1e7e:	86 95       	lsr	r24
    1e80:	83 70       	andi	r24, 0x03	; 3
    1e82:	81 70       	andi	r24, 0x01	; 1
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3e 83       	std	Y+6, r19	; 0x06
    1e8a:	2d 83       	std	Y+5, r18	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	d9 f0       	breq	.+54     	; 0x1eca <Timer1_init+0x716>
    1e94:	2d 81       	ldd	r18, Y+5	; 0x05
    1e96:	3e 81       	ldd	r19, Y+6	; 0x06
    1e98:	21 30       	cpi	r18, 0x01	; 1
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	59 f5       	brne	.+86     	; 0x1ef4 <Timer1_init+0x740>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE1A);
    1e9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 e5       	ldi	r30, 0x59	; 89
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7e       	andi	r24, 0xEF	; 239
    1eaa:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    1eac:	a9 e5       	ldi	r26, 0x59	; 89
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e9 e5       	ldi	r30, 0x59	; 89
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	87 7f       	andi	r24, 0xF7	; 247
    1eb8:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE1);
    1eba:	a9 e5       	ldi	r26, 0x59	; 89
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e9 e5       	ldi	r30, 0x59	; 89
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	84 60       	ori	r24, 0x04	; 4
    1ec6:	8c 93       	st	X, r24
    1ec8:	15 c0       	rjmp	.+42     	; 0x1ef4 <Timer1_init+0x740>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    1eca:	a9 e5       	ldi	r26, 0x59	; 89
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e9 e5       	ldi	r30, 0x59	; 89
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 7e       	andi	r24, 0xEF	; 239
    1ed6:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    1ed8:	a9 e5       	ldi	r26, 0x59	; 89
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e9 e5       	ldi	r30, 0x59	; 89
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	87 7f       	andi	r24, 0xF7	; 247
    1ee4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1ee6:	a9 e5       	ldi	r26, 0x59	; 89
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e5       	ldi	r30, 0x59	; 89
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8b 7f       	andi	r24, 0xFB	; 251
    1ef2:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	80 81       	ld	r24, Z
    1efa:	82 95       	swap	r24
    1efc:	8f 70       	andi	r24, 0x0F	; 15
    1efe:	83 70       	andi	r24, 0x03	; 3
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	3c 83       	std	Y+4, r19	; 0x04
    1f06:	2b 83       	std	Y+3, r18	; 0x03
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	a1 f1       	breq	.+104    	; 0x1f7a <Timer1_init+0x7c6>
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	3c 81       	ldd	r19, Y+4	; 0x04
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	31 05       	cpc	r19, r1
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <Timer1_init+0x772>
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	71 f0       	breq	.+28     	; 0x1f40 <Timer1_init+0x78c>
    1f24:	ab c0       	rjmp	.+342    	; 0x207c <Timer1_init+0x8c8>
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <Timer1_init+0x77e>
    1f30:	58 c0       	rjmp	.+176    	; 0x1fe2 <Timer1_init+0x82e>
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	91 05       	cpc	r25, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <Timer1_init+0x78a>
    1f3c:	79 c0       	rjmp	.+242    	; 0x2030 <Timer1_init+0x87c>
    1f3e:	9e c0       	rjmp	.+316    	; 0x207c <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1f40:	af e4       	ldi	r26, 0x4F	; 79
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ef e4       	ldi	r30, 0x4F	; 79
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 77       	andi	r24, 0x7F	; 127
    1f4c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1f4e:	af e4       	ldi	r26, 0x4F	; 79
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ef e4       	ldi	r30, 0x4F	; 79
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8f 7d       	andi	r24, 0xDF	; 223
    1f5a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1f5c:	af e4       	ldi	r26, 0x4F	; 79
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ef e4       	ldi	r30, 0x4F	; 79
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 7b       	andi	r24, 0xBF	; 191
    1f68:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1f6a:	af e4       	ldi	r26, 0x4F	; 79
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	ef e4       	ldi	r30, 0x4F	; 79
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8f 7e       	andi	r24, 0xEF	; 239
    1f76:	8c 93       	st	X, r24
    1f78:	81 c0       	rjmp	.+258    	; 0x207c <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1f7a:	af e4       	ldi	r26, 0x4F	; 79
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	ef e4       	ldi	r30, 0x4F	; 79
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8f 77       	andi	r24, 0x7F	; 127
    1f86:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1f88:	af e4       	ldi	r26, 0x4F	; 79
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ef e4       	ldi	r30, 0x4F	; 79
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 7d       	andi	r24, 0xDF	; 223
    1f94:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    1f96:	af e4       	ldi	r26, 0x4F	; 79
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	ef e4       	ldi	r30, 0x4F	; 79
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 64       	ori	r24, 0x40	; 64
    1fa2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    1fa4:	af e4       	ldi	r26, 0x4F	; 79
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ef e4       	ldi	r30, 0x4F	; 79
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	80 61       	ori	r24, 0x10	; 16
    1fb0:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	64 e0       	ldi	r22, 0x04	; 4
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
				if ((*timerConfig).mode != TIMER16BIT_PHASE_FREQ_PWM_OCR1A
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	80 81       	ld	r24, Z
    1fc2:	8f 70       	andi	r24, 0x0F	; 15
    1fc4:	89 30       	cpi	r24, 0x09	; 9
    1fc6:	39 f4       	brne	.+14     	; 0x1fd6 <Timer1_init+0x822>
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	80 81       	ld	r24, Z
    1fce:	8f 70       	andi	r24, 0x0F	; 15
    1fd0:	8f 30       	cpi	r24, 0x0F	; 15
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <Timer1_init+0x822>
    1fd4:	53 c0       	rjmp	.+166    	; 0x207c <Timer1_init+0x8c8>
						|| (*timerConfig).mode != TIMER16BIT_FAST_PWM_OCR1A)
				{
					GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	65 e0       	ldi	r22, 0x05	; 5
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1fe0:	4d c0       	rjmp	.+154    	; 0x207c <Timer1_init+0x8c8>
				}
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    1fe2:	af e4       	ldi	r26, 0x4F	; 79
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	ef e4       	ldi	r30, 0x4F	; 79
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	80 68       	ori	r24, 0x80	; 128
    1fee:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1ff0:	af e4       	ldi	r26, 0x4F	; 79
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ef e4       	ldi	r30, 0x4F	; 79
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 62       	ori	r24, 0x20	; 32
    1ffc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1ffe:	af e4       	ldi	r26, 0x4F	; 79
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ef e4       	ldi	r30, 0x4F	; 79
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 7b       	andi	r24, 0xBF	; 191
    200a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    200c:	af e4       	ldi	r26, 0x4F	; 79
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	ef e4       	ldi	r30, 0x4F	; 79
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8f 7e       	andi	r24, 0xEF	; 239
    2018:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	64 e0       	ldi	r22, 0x04	; 4
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	65 e0       	ldi	r22, 0x05	; 5
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    202e:	26 c0       	rjmp	.+76     	; 0x207c <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    2030:	af e4       	ldi	r26, 0x4F	; 79
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ef e4       	ldi	r30, 0x4F	; 79
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	80 68       	ori	r24, 0x80	; 128
    203c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    203e:	af e4       	ldi	r26, 0x4F	; 79
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	ef e4       	ldi	r30, 0x4F	; 79
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	80 62       	ori	r24, 0x20	; 32
    204a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    204c:	af e4       	ldi	r26, 0x4F	; 79
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ef e4       	ldi	r30, 0x4F	; 79
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 64       	ori	r24, 0x40	; 64
    2058:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    205a:	af e4       	ldi	r26, 0x4F	; 79
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	ef e4       	ldi	r30, 0x4F	; 79
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 61       	ori	r24, 0x10	; 16
    2066:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2068:	83 e0       	ldi	r24, 0x03	; 3
    206a:	64 e0       	ldi	r22, 0x04	; 4
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	65 e0       	ldi	r22, 0x05	; 5
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
			break;
		}
	}
}
    207c:	2e 96       	adiw	r28, 0x0e	; 14
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <Timer1_setCallBack>:
 * 		normal mode or compare unit A interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBack(void (*Ptr2Function)(void))
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <Timer1_setCallBack+0x6>
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitA_Ptr = Ptr2Function;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	90 93 7d 01 	sts	0x017D, r25
    20a4:	80 93 7c 01 	sts	0x017C, r24
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <Timer1_setCallBackUnitB>:
 * 		compare unit B interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBackUnitB(void (*Ptr2Function)(void))
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <Timer1_setCallBackUnitB+0x6>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitB_Ptr = Ptr2Function;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	90 93 7f 01 	sts	0x017F, r25
    20c8:	80 93 7e 01 	sts	0x017E, r24
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <Timer1_start>:
 * [In] compareValueB	: Indicates compare value for unit B.
 * [Return]				: Void.
 */
void Timer1_start(TIMER01_PRESCALER prescaler, uint16 start,
		uint16 compareValueA, uint16 compareValueB)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	27 97       	sbiw	r28, 0x07	; 7
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	7b 83       	std	Y+3, r23	; 0x03
    20ee:	6a 83       	std	Y+2, r22	; 0x02
    20f0:	5d 83       	std	Y+5, r21	; 0x05
    20f2:	4c 83       	std	Y+4, r20	; 0x04
    20f4:	3f 83       	std	Y+7, r19	; 0x07
    20f6:	2e 83       	std	Y+6, r18	; 0x06
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	87 70       	andi	r24, 0x07	; 7
    20fc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start; /* Set timer starting value */
    20fe:	ec e4       	ldi	r30, 0x4C	; 76
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24
	/* Choose between compare unit A or compare unit B or both */
	OCR1A = compareValueA;
    210a:	ea e4       	ldi	r30, 0x4A	; 74
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
	OCR1B = compareValueB;
    2116:	e8 e4       	ldi	r30, 0x48	; 72
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	8e 81       	ldd	r24, Y+6	; 0x06
    211c:	9f 81       	ldd	r25, Y+7	; 0x07
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
	/* If interrupt is enable in initialization, enable it for
	 * it's corresponding compare unit chosen */
	if (compareValueA != 0 && compareValueB == 0)
    2122:	8c 81       	ldd	r24, Y+4	; 0x04
    2124:	9d 81       	ldd	r25, Y+5	; 0x05
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	a9 f0       	breq	.+42     	; 0x2154 <Timer1_start+0x7e>
    212a:	8e 81       	ldd	r24, Y+6	; 0x06
    212c:	9f 81       	ldd	r25, Y+7	; 0x07
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	89 f4       	brne	.+34     	; 0x2154 <Timer1_start+0x7e>
	{
		if (BIT_IS_SET(TIMSK, OCIE1A))
    2132:	e9 e5       	ldi	r30, 0x59	; 89
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	80 71       	andi	r24, 0x10	; 16
    213e:	90 70       	andi	r25, 0x00	; 0
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	b9 f1       	breq	.+110    	; 0x21b2 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1B);
    2144:	a9 e5       	ldi	r26, 0x59	; 89
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e9 e5       	ldi	r30, 0x59	; 89
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	87 7f       	andi	r24, 0xF7	; 247
    2150:	8c 93       	st	X, r24
    2152:	2f c0       	rjmp	.+94     	; 0x21b2 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB != 0)
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	a9 f4       	brne	.+42     	; 0x2186 <Timer1_start+0xb0>
    215c:	8e 81       	ldd	r24, Y+6	; 0x06
    215e:	9f 81       	ldd	r25, Y+7	; 0x07
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	89 f0       	breq	.+34     	; 0x2186 <Timer1_start+0xb0>
	{
		if (BIT_IS_SET(TIMSK, OCIE1B))
    2164:	e9 e5       	ldi	r30, 0x59	; 89
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	88 2f       	mov	r24, r24
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	88 70       	andi	r24, 0x08	; 8
    2170:	90 70       	andi	r25, 0x00	; 0
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	f1 f0       	breq	.+60     	; 0x21b2 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1A);
    2176:	a9 e5       	ldi	r26, 0x59	; 89
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e9 e5       	ldi	r30, 0x59	; 89
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 7e       	andi	r24, 0xEF	; 239
    2182:	8c 93       	st	X, r24
    2184:	16 c0       	rjmp	.+44     	; 0x21b2 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB == 0)
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	91 f4       	brne	.+36     	; 0x21b2 <Timer1_start+0xdc>
    218e:	8e 81       	ldd	r24, Y+6	; 0x06
    2190:	9f 81       	ldd	r25, Y+7	; 0x07
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	71 f4       	brne	.+28     	; 0x21b2 <Timer1_start+0xdc>
	{
		CLEAR_BIT(TIMSK, OCIE1A);
    2196:	a9 e5       	ldi	r26, 0x59	; 89
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e9 e5       	ldi	r30, 0x59	; 89
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7e       	andi	r24, 0xEF	; 239
    21a2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1B);
    21a4:	a9 e5       	ldi	r26, 0x59	; 89
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e9 e5       	ldi	r30, 0x59	; 89
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	87 7f       	andi	r24, 0xF7	; 247
    21b0:	8c 93       	st	X, r24
	}
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR1B, 0xF8, prescaler);
    21b2:	ae e4       	ldi	r26, 0x4E	; 78
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ee e4       	ldi	r30, 0x4E	; 78
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	98 2f       	mov	r25, r24
    21be:	98 7f       	andi	r25, 0xF8	; 248
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	89 2b       	or	r24, r25
    21c4:	8c 93       	st	X, r24
}
    21c6:	27 96       	adiw	r28, 0x07	; 7
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <Timer1_stop>:
 * 		Function that stops timer1 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_stop(void)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR1B, 0xF8, 0x00); /* Clear pre-scaler */
    21e0:	ae e4       	ldi	r26, 0x4E	; 78
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ee e4       	ldi	r30, 0x4E	; 78
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	88 7f       	andi	r24, 0xF8	; 248
    21ec:	8c 93       	st	X, r24
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <Timer1_deInit>:
 * 		Function that clears all timer1 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_deInit(void)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	2a 97       	sbiw	r28, 0x0a	; 10
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
	/* Clear timer1 registers */
	CLEAR_REG(TCCR1A);
    2208:	ef e4       	ldi	r30, 0x4F	; 79
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	ef e4       	ldi	r30, 0x4F	; 79
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    2214:	ee e4       	ldi	r30, 0x4E	; 78
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	90 81       	ld	r25, Z
    221a:	ee e4       	ldi	r30, 0x4E	; 78
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	10 82       	st	Z, r1
	CLEAR_REG(TCNT1);
    2220:	ec e4       	ldi	r30, 0x4C	; 76
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	ec e4       	ldi	r30, 0x4C	; 76
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	11 82       	std	Z+1, r1	; 0x01
    222e:	10 82       	st	Z, r1
	CLEAR_REG(OCR1A);
    2230:	ea e4       	ldi	r30, 0x4A	; 74
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	ea e4       	ldi	r30, 0x4A	; 74
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	11 82       	std	Z+1, r1	; 0x01
    223e:	10 82       	st	Z, r1
	CLEAR_REG(OCR1B);
    2240:	e8 e4       	ldi	r30, 0x48	; 72
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	e8 e4       	ldi	r30, 0x48	; 72
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	11 82       	std	Z+1, r1	; 0x01
    224e:	10 82       	st	Z, r1
	CLEAR_REG(ICR1);
    2250:	e6 e4       	ldi	r30, 0x46	; 70
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	e6 e4       	ldi	r30, 0x46	; 70
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	11 82       	std	Z+1, r1	; 0x01
    225e:	10 82       	st	Z, r1
	/* Disable timer1 interrupts */
	CLEAR_BIT(TIMSK, TICIE1);
    2260:	a9 e5       	ldi	r26, 0x59	; 89
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e9 e5       	ldi	r30, 0x59	; 89
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 7d       	andi	r24, 0xDF	; 223
    226c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    226e:	a9 e5       	ldi	r26, 0x59	; 89
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e9 e5       	ldi	r30, 0x59	; 89
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 7e       	andi	r24, 0xEF	; 239
    227a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    227c:	a9 e5       	ldi	r26, 0x59	; 89
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e9 e5       	ldi	r30, 0x59	; 89
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	87 7f       	andi	r24, 0xF7	; 247
    2288:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE1);
    228a:	a9 e5       	ldi	r26, 0x59	; 89
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e9 e5       	ldi	r30, 0x59	; 89
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	8b 7f       	andi	r24, 0xFB	; 251
    2296:	8c 93       	st	X, r24
	/* Clear timer1 flags */
	SET_BIT(TIFR, ICF1);
    2298:	a8 e5       	ldi	r26, 0x58	; 88
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e8 e5       	ldi	r30, 0x58	; 88
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 62       	ori	r24, 0x20	; 32
    22a4:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1A);
    22a6:	a8 e5       	ldi	r26, 0x58	; 88
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e8 e5       	ldi	r30, 0x58	; 88
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 61       	ori	r24, 0x10	; 16
    22b2:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1B);
    22b4:	a8 e5       	ldi	r26, 0x58	; 88
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e8 e5       	ldi	r30, 0x58	; 88
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 60       	ori	r24, 0x08	; 8
    22c0:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV1);
    22c2:	a8 e5       	ldi	r26, 0x58	; 88
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e8 e5       	ldi	r30, 0x58	; 88
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	84 60       	ori	r24, 0x04	; 4
    22ce:	8c 93       	st	X, r24
}
    22d0:	2a 96       	adiw	r28, 0x0a	; 10
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <LCD_init>:
 * 			2. Setup the LCD data mode (4 BIT MODE/8 BIT MODE).
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_init(void)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	2e 97       	sbiw	r28, 0x0e	; 14
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
	/* Configure direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	62 e0       	ldi	r22, 0x02	; 2
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 ea       	ldi	r26, 0xA0	; 160
    2324:	b1 e4       	ldi	r27, 0x41	; 65
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_init+0x8e>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_init+0x10c>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_init+0xee>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_init+0xdc>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_init+0xd0>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_init+0x118>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	6f ef       	ldi	r22, 0xFF	; 255
    2406:	0e 94 8c 09 	call	0x1318	; 0x1318 <GPIO_setupPortDirection>
	/* Use two lines LCD in 8-bits data mode & (5x7) dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    240a:	88 e3       	ldi	r24, 0x38	; 56
    240c:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Turn cursor off */
    2410:	8c e0       	ldi	r24, 0x0C	; 12
    2412:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
}
    241c:	2e 96       	adiw	r28, 0x0e	; 14
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <LCD_sendCommand>:
 * [Args]	:
 * [In] command	: Indicates the command that is sent.
 * [Return]		: Void.
 */
void LCD_sendCommand(uint8 command)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	e9 97       	sbiw	r28, 0x39	; 57
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS = 0 */
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 e8       	ldi	r26, 0x80	; 128
    2454:	bf e3       	ldi	r27, 0x3F	; 63
    2456:	8d ab       	std	Y+53, r24	; 0x35
    2458:	9e ab       	std	Y+54, r25	; 0x36
    245a:	af ab       	std	Y+55, r26	; 0x37
    245c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	6d a9       	ldd	r22, Y+53	; 0x35
    2460:	7e a9       	ldd	r23, Y+54	; 0x36
    2462:	8f a9       	ldd	r24, Y+55	; 0x37
    2464:	98 ad       	ldd	r25, Y+56	; 0x38
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a ef       	ldi	r20, 0xFA	; 250
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	89 ab       	std	Y+49, r24	; 0x31
    2478:	9a ab       	std	Y+50, r25	; 0x32
    247a:	ab ab       	std	Y+51, r26	; 0x33
    247c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    247e:	69 a9       	ldd	r22, Y+49	; 0x31
    2480:	7a a9       	ldd	r23, Y+50	; 0x32
    2482:	8b a9       	ldd	r24, Y+51	; 0x33
    2484:	9c a9       	ldd	r25, Y+52	; 0x34
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <LCD_sendCommand+0x72>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	98 ab       	std	Y+48, r25	; 0x30
    249c:	8f a7       	std	Y+47, r24	; 0x2f
    249e:	3f c0       	rjmp	.+126    	; 0x251e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    24a0:	69 a9       	ldd	r22, Y+49	; 0x31
    24a2:	7a a9       	ldd	r23, Y+50	; 0x32
    24a4:	8b a9       	ldd	r24, Y+51	; 0x33
    24a6:	9c a9       	ldd	r25, Y+52	; 0x34
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	6d a9       	ldd	r22, Y+53	; 0x35
    24ba:	7e a9       	ldd	r23, Y+54	; 0x36
    24bc:	8f a9       	ldd	r24, Y+55	; 0x37
    24be:	98 ad       	ldd	r25, Y+56	; 0x38
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	98 ab       	std	Y+48, r25	; 0x30
    24de:	8f a7       	std	Y+47, r24	; 0x2f
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <LCD_sendCommand+0xd2>
    24e2:	88 ec       	ldi	r24, 0xC8	; 200
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9e a7       	std	Y+46, r25	; 0x2e
    24e8:	8d a7       	std	Y+45, r24	; 0x2d
    24ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    24ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <LCD_sendCommand+0xc0>
    24f2:	9e a7       	std	Y+46, r25	; 0x2e
    24f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f8:	98 a9       	ldd	r25, Y+48	; 0x30
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	98 ab       	std	Y+48, r25	; 0x30
    24fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8f a5       	ldd	r24, Y+47	; 0x2f
    2502:	98 a9       	ldd	r25, Y+48	; 0x30
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <LCD_sendCommand+0xb4>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	69 a9       	ldd	r22, Y+49	; 0x31
    250c:	7a a9       	ldd	r23, Y+50	; 0x32
    250e:	8b a9       	ldd	r24, Y+51	; 0x33
    2510:	9c a9       	ldd	r25, Y+52	; 0x34
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	98 ab       	std	Y+48, r25	; 0x30
    251c:	8f a7       	std	Y+47, r24	; 0x2f
    251e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2520:	98 a9       	ldd	r25, Y+48	; 0x30
    2522:	9c a7       	std	Y+44, r25	; 0x2c
    2524:	8b a7       	std	Y+43, r24	; 0x2b
    2526:	8b a5       	ldd	r24, Y+43	; 0x2b
    2528:	9c a5       	ldd	r25, Y+44	; 0x2c
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_sendCommand+0xfc>
    252e:	9c a7       	std	Y+44, r25	; 0x2c
    2530:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	62 e0       	ldi	r22, 0x02	; 2
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e8       	ldi	r26, 0x80	; 128
    2542:	bf e3       	ldi	r27, 0x3F	; 63
    2544:	8f a3       	std	Y+39, r24	; 0x27
    2546:	98 a7       	std	Y+40, r25	; 0x28
    2548:	a9 a7       	std	Y+41, r26	; 0x29
    254a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6f a1       	ldd	r22, Y+39	; 0x27
    254e:	78 a5       	ldd	r23, Y+40	; 0x28
    2550:	89 a5       	ldd	r24, Y+41	; 0x29
    2552:	9a a5       	ldd	r25, Y+42	; 0x2a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a ef       	ldi	r20, 0xFA	; 250
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8b a3       	std	Y+35, r24	; 0x23
    2566:	9c a3       	std	Y+36, r25	; 0x24
    2568:	ad a3       	std	Y+37, r26	; 0x25
    256a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <LCD_sendCommand+0x160>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
    258c:	3f c0       	rjmp	.+126    	; 0x260c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    258e:	6b a1       	ldd	r22, Y+35	; 0x23
    2590:	7c a1       	ldd	r23, Y+36	; 0x24
    2592:	8d a1       	ldd	r24, Y+37	; 0x25
    2594:	9e a1       	ldd	r25, Y+38	; 0x26
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6f a1       	ldd	r22, Y+39	; 0x27
    25a8:	78 a5       	ldd	r23, Y+40	; 0x28
    25aa:	89 a5       	ldd	r24, Y+41	; 0x29
    25ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9a a3       	std	Y+34, r25	; 0x22
    25cc:	89 a3       	std	Y+33, r24	; 0x21
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <LCD_sendCommand+0x1c0>
    25d0:	88 ec       	ldi	r24, 0xC8	; 200
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	98 a3       	std	Y+32, r25	; 0x20
    25d6:	8f 8f       	std	Y+31, r24	; 0x1f
    25d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25da:	98 a1       	ldd	r25, Y+32	; 0x20
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_sendCommand+0x1ae>
    25e0:	98 a3       	std	Y+32, r25	; 0x20
    25e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9a a3       	std	Y+34, r25	; 0x22
    25ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	89 a1       	ldd	r24, Y+33	; 0x21
    25f0:	9a a1       	ldd	r25, Y+34	; 0x22
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <LCD_sendCommand+0x1a2>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6b a1       	ldd	r22, Y+35	; 0x23
    25fa:	7c a1       	ldd	r23, Y+36	; 0x24
    25fc:	8d a1       	ldd	r24, Y+37	; 0x25
    25fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9a a3       	std	Y+34, r25	; 0x22
    260a:	89 a3       	std	Y+33, r24	; 0x21
    260c:	89 a1       	ldd	r24, Y+33	; 0x21
    260e:	9a a1       	ldd	r25, Y+34	; 0x22
    2610:	9e 8f       	std	Y+30, r25	; 0x1e
    2612:	8d 8f       	std	Y+29, r24	; 0x1d
    2614:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2616:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_sendCommand+0x1ea>
    261c:	9e 8f       	std	Y+30, r25	; 0x1e
    261e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190 ns */

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* Write to the data bus from D0 to D7 */
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	69 ad       	ldd	r22, Y+57	; 0x39
    2638:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <GPIO_writePort>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e8       	ldi	r26, 0x80	; 128
    2642:	bf e3       	ldi	r27, 0x3F	; 63
    2644:	89 8f       	std	Y+25, r24	; 0x19
    2646:	9a 8f       	std	Y+26, r25	; 0x1a
    2648:	ab 8f       	std	Y+27, r26	; 0x1b
    264a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a ef       	ldi	r20, 0xFA	; 250
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8d 8b       	std	Y+21, r24	; 0x15
    2666:	9e 8b       	std	Y+22, r25	; 0x16
    2668:	af 8b       	std	Y+23, r26	; 0x17
    266a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266c:	6d 89       	ldd	r22, Y+21	; 0x15
    266e:	7e 89       	ldd	r23, Y+22	; 0x16
    2670:	8f 89       	ldd	r24, Y+23	; 0x17
    2672:	98 8d       	ldd	r25, Y+24	; 0x18
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <LCD_sendCommand+0x260>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	3f c0       	rjmp	.+126    	; 0x270c <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    268e:	6d 89       	ldd	r22, Y+21	; 0x15
    2690:	7e 89       	ldd	r23, Y+22	; 0x16
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	98 8d       	ldd	r25, Y+24	; 0x18
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	69 8d       	ldd	r22, Y+25	; 0x19
    26a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_sendCommand+0x2c0>
    26d0:	88 ec       	ldi	r24, 0xC8	; 200
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9a 8b       	std	Y+18, r25	; 0x12
    26d6:	89 8b       	std	Y+17, r24	; 0x11
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_sendCommand+0x2ae>
    26e0:	9a 8b       	std	Y+18, r25	; 0x12
    26e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <LCD_sendCommand+0x2a2>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	98 8b       	std	Y+16, r25	; 0x10
    2712:	8f 87       	std	Y+15, r24	; 0x0f
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	98 89       	ldd	r25, Y+16	; 0x10
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_sendCommand+0x2ea>
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	62 e0       	ldi	r22, 0x02	; 2
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e8       	ldi	r26, 0x80	; 128
    2730:	bf e3       	ldi	r27, 0x3F	; 63
    2732:	8b 87       	std	Y+11, r24	; 0x0b
    2734:	9c 87       	std	Y+12, r25	; 0x0c
    2736:	ad 87       	std	Y+13, r26	; 0x0d
    2738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a ef       	ldi	r20, 0xFA	; 250
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8f 83       	std	Y+7, r24	; 0x07
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	a9 87       	std	Y+9, r26	; 0x09
    2758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <LCD_sendCommand+0x34e>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <LCD_sendCommand+0x3cc>
	else if (__tmp > 65535)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <LCD_sendCommand+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <LCD_sendCommand+0x3ae>
    27be:	88 ec       	ldi	r24, 0xC8	; 200
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <LCD_sendCommand+0x39c>
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <LCD_sendCommand+0x390>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <LCD_sendCommand+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <LCD_sendCommand+0x3d8>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    280e:	e9 96       	adiw	r28, 0x39	; 57
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <LCD_displayCharacter>:
 * [Args]	:
 * [In] data	: Indicates the character that is sent.
 * [Return]		: Void.
 */
void LCD_displayCharacter(uint8 data)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	e9 97       	sbiw	r28, 0x39	; 57
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS = 1 */
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e8       	ldi	r26, 0x80	; 128
    2846:	bf e3       	ldi	r27, 0x3F	; 63
    2848:	8d ab       	std	Y+53, r24	; 0x35
    284a:	9e ab       	std	Y+54, r25	; 0x36
    284c:	af ab       	std	Y+55, r26	; 0x37
    284e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6d a9       	ldd	r22, Y+53	; 0x35
    2852:	7e a9       	ldd	r23, Y+54	; 0x36
    2854:	8f a9       	ldd	r24, Y+55	; 0x37
    2856:	98 ad       	ldd	r25, Y+56	; 0x38
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a ef       	ldi	r20, 0xFA	; 250
    285e:	54 e4       	ldi	r21, 0x44	; 68
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	89 ab       	std	Y+49, r24	; 0x31
    286a:	9a ab       	std	Y+50, r25	; 0x32
    286c:	ab ab       	std	Y+51, r26	; 0x33
    286e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2870:	69 a9       	ldd	r22, Y+49	; 0x31
    2872:	7a a9       	ldd	r23, Y+50	; 0x32
    2874:	8b a9       	ldd	r24, Y+51	; 0x33
    2876:	9c a9       	ldd	r25, Y+52	; 0x34
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	98 ab       	std	Y+48, r25	; 0x30
    288e:	8f a7       	std	Y+47, r24	; 0x2f
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2892:	69 a9       	ldd	r22, Y+49	; 0x31
    2894:	7a a9       	ldd	r23, Y+50	; 0x32
    2896:	8b a9       	ldd	r24, Y+51	; 0x33
    2898:	9c a9       	ldd	r25, Y+52	; 0x34
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6d a9       	ldd	r22, Y+53	; 0x35
    28ac:	7e a9       	ldd	r23, Y+54	; 0x36
    28ae:	8f a9       	ldd	r24, Y+55	; 0x37
    28b0:	98 ad       	ldd	r25, Y+56	; 0x38
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	98 ab       	std	Y+48, r25	; 0x30
    28d0:	8f a7       	std	Y+47, r24	; 0x2f
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <LCD_displayCharacter+0xd2>
    28d4:	88 ec       	ldi	r24, 0xC8	; 200
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9e a7       	std	Y+46, r25	; 0x2e
    28da:	8d a7       	std	Y+45, r24	; 0x2d
    28dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    28de:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_displayCharacter+0xc0>
    28e4:	9e a7       	std	Y+46, r25	; 0x2e
    28e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ea:	98 a9       	ldd	r25, Y+48	; 0x30
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	98 ab       	std	Y+48, r25	; 0x30
    28f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f4:	98 a9       	ldd	r25, Y+48	; 0x30
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <LCD_displayCharacter+0xb4>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	69 a9       	ldd	r22, Y+49	; 0x31
    28fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2900:	8b a9       	ldd	r24, Y+51	; 0x33
    2902:	9c a9       	ldd	r25, Y+52	; 0x34
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
    2910:	8f a5       	ldd	r24, Y+47	; 0x2f
    2912:	98 a9       	ldd	r25, Y+48	; 0x30
    2914:	9c a7       	std	Y+44, r25	; 0x2c
    2916:	8b a7       	std	Y+43, r24	; 0x2b
    2918:	8b a5       	ldd	r24, Y+43	; 0x2b
    291a:	9c a5       	ldd	r25, Y+44	; 0x2c
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <LCD_displayCharacter+0xfc>
    2920:	9c a7       	std	Y+44, r25	; 0x2c
    2922:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	62 e0       	ldi	r22, 0x02	; 2
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 e8       	ldi	r26, 0x80	; 128
    2934:	bf e3       	ldi	r27, 0x3F	; 63
    2936:	8f a3       	std	Y+39, r24	; 0x27
    2938:	98 a7       	std	Y+40, r25	; 0x28
    293a:	a9 a7       	std	Y+41, r26	; 0x29
    293c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	6f a1       	ldd	r22, Y+39	; 0x27
    2940:	78 a5       	ldd	r23, Y+40	; 0x28
    2942:	89 a5       	ldd	r24, Y+41	; 0x29
    2944:	9a a5       	ldd	r25, Y+42	; 0x2a
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	4a ef       	ldi	r20, 0xFA	; 250
    294c:	54 e4       	ldi	r21, 0x44	; 68
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	8b a3       	std	Y+35, r24	; 0x23
    2958:	9c a3       	std	Y+36, r25	; 0x24
    295a:	ad a3       	std	Y+37, r26	; 0x25
    295c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    295e:	6b a1       	ldd	r22, Y+35	; 0x23
    2960:	7c a1       	ldd	r23, Y+36	; 0x24
    2962:	8d a1       	ldd	r24, Y+37	; 0x25
    2964:	9e a1       	ldd	r25, Y+38	; 0x26
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	2c f4       	brge	.+10     	; 0x2980 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9a a3       	std	Y+34, r25	; 0x22
    297c:	89 a3       	std	Y+33, r24	; 0x21
    297e:	3f c0       	rjmp	.+126    	; 0x29fe <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2980:	6b a1       	ldd	r22, Y+35	; 0x23
    2982:	7c a1       	ldd	r23, Y+36	; 0x24
    2984:	8d a1       	ldd	r24, Y+37	; 0x25
    2986:	9e a1       	ldd	r25, Y+38	; 0x26
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	4c f5       	brge	.+82     	; 0x29ea <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	6f a1       	ldd	r22, Y+39	; 0x27
    299a:	78 a5       	ldd	r23, Y+40	; 0x28
    299c:	89 a5       	ldd	r24, Y+41	; 0x29
    299e:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <LCD_displayCharacter+0x1c0>
    29c2:	88 ec       	ldi	r24, 0xC8	; 200
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
    29ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29cc:	98 a1       	ldd	r25, Y+32	; 0x20
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_displayCharacter+0x1ae>
    29d2:	98 a3       	std	Y+32, r25	; 0x20
    29d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	89 a1       	ldd	r24, Y+33	; 0x21
    29d8:	9a a1       	ldd	r25, Y+34	; 0x22
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <LCD_displayCharacter+0x1a2>
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	6b a1       	ldd	r22, Y+35	; 0x23
    29ec:	7c a1       	ldd	r23, Y+36	; 0x24
    29ee:	8d a1       	ldd	r24, Y+37	; 0x25
    29f0:	9e a1       	ldd	r25, Y+38	; 0x26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2a00:	9a a1       	ldd	r25, Y+34	; 0x22
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
    2a06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <LCD_displayCharacter+0x1ea>
    2a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a10:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* Write to the data bus from D0 to D7 */
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	69 ad       	ldd	r22, Y+57	; 0x39
    2a16:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <GPIO_writePort>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a0 e8       	ldi	r26, 0x80	; 128
    2a20:	bf e3       	ldi	r27, 0x3F	; 63
    2a22:	89 8f       	std	Y+25, r24	; 0x19
    2a24:	9a 8f       	std	Y+26, r25	; 0x1a
    2a26:	ab 8f       	std	Y+27, r26	; 0x1b
    2a28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a ef       	ldi	r20, 0xFA	; 250
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	8d 8b       	std	Y+21, r24	; 0x15
    2a44:	9e 8b       	std	Y+22, r25	; 0x16
    2a46:	af 8b       	std	Y+23, r26	; 0x17
    2a48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a50:	98 8d       	ldd	r25, Y+24	; 0x18
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	9c 8b       	std	Y+20, r25	; 0x14
    2a68:	8b 8b       	std	Y+19, r24	; 0x13
    2a6a:	3f c0       	rjmp	.+126    	; 0x2aea <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a70:	8f 89       	ldd	r24, Y+23	; 0x17
    2a72:	98 8d       	ldd	r25, Y+24	; 0x18
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	57 e4       	ldi	r21, 0x47	; 71
    2a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a80:	18 16       	cp	r1, r24
    2a82:	4c f5       	brge	.+82     	; 0x2ad6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	69 8d       	ldd	r22, Y+25	; 0x19
    2a86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e2       	ldi	r20, 0x20	; 32
    2a92:	51 e4       	ldi	r21, 0x41	; 65
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9c 8b       	std	Y+20, r25	; 0x14
    2aaa:	8b 8b       	std	Y+19, r24	; 0x13
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <LCD_displayCharacter+0x2ac>
    2aae:	88 ec       	ldi	r24, 0xC8	; 200
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9a 8b       	std	Y+18, r25	; 0x12
    2ab4:	89 8b       	std	Y+17, r24	; 0x11
    2ab6:	89 89       	ldd	r24, Y+17	; 0x11
    2ab8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <LCD_displayCharacter+0x29a>
    2abe:	9a 8b       	std	Y+18, r25	; 0x12
    2ac0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9c 8b       	std	Y+20, r25	; 0x14
    2aca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	69 f7       	brne	.-38     	; 0x2aae <LCD_displayCharacter+0x28e>
    2ad4:	14 c0       	rjmp	.+40     	; 0x2afe <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ada:	8f 89       	ldd	r24, Y+23	; 0x17
    2adc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9c 8b       	std	Y+20, r25	; 0x14
    2ae8:	8b 8b       	std	Y+19, r24	; 0x13
    2aea:	8b 89       	ldd	r24, Y+19	; 0x13
    2aec:	9c 89       	ldd	r25, Y+20	; 0x14
    2aee:	98 8b       	std	Y+16, r25	; 0x10
    2af0:	8f 87       	std	Y+15, r24	; 0x0f
    2af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af4:	98 89       	ldd	r25, Y+16	; 0x10
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <LCD_displayCharacter+0x2d6>
    2afa:	98 8b       	std	Y+16, r25	; 0x10
    2afc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e8       	ldi	r26, 0x80	; 128
    2b0e:	bf e3       	ldi	r27, 0x3F	; 63
    2b10:	8b 87       	std	Y+11, r24	; 0x0b
    2b12:	9c 87       	std	Y+12, r25	; 0x0c
    2b14:	ad 87       	std	Y+13, r26	; 0x0d
    2b16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a ef       	ldi	r20, 0xFA	; 250
    2b26:	54 e4       	ldi	r21, 0x44	; 68
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8f 83       	std	Y+7, r24	; 0x07
    2b32:	98 87       	std	Y+8, r25	; 0x08
    2b34:	a9 87       	std	Y+9, r26	; 0x09
    2b36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b38:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3a:	78 85       	ldd	r23, Y+8	; 0x08
    2b3c:	89 85       	ldd	r24, Y+9	; 0x09
    2b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	5f e3       	ldi	r21, 0x3F	; 63
    2b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4c:	88 23       	and	r24, r24
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	8d 83       	std	Y+5, r24	; 0x05
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <LCD_displayCharacter+0x39a>
    2b9c:	88 ec       	ldi	r24, 0xC8	; 200
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_displayCharacter+0x388>
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	9e 83       	std	Y+6, r25	; 0x06
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	69 f7       	brne	.-38     	; 0x2b9c <LCD_displayCharacter+0x37c>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc6:	78 85       	ldd	r23, Y+8	; 0x08
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bda:	9e 81       	ldd	r25, Y+6	; 0x06
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_displayCharacter+0x3c4>
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    2bec:	e9 96       	adiw	r28, 0x39	; 57
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <LCD_displayString>:
 * [Args] 	:
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayString(const uint8 *string)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <LCD_displayString+0x6>
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
	/* Display each character in the recieved string array */
	uint8 i = 0;
    2c0e:	19 82       	std	Y+1, r1	; 0x01
    2c10:	0e c0       	rjmp	.+28     	; 0x2c2e <LCD_displayString+0x30>
	while (string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e2 0f       	add	r30, r18
    2c20:	f3 1f       	adc	r31, r19
    2c22:	80 81       	ld	r24, Z
    2c24:	0e 94 10 14 	call	0x2820	; 0x2820 <LCD_displayCharacter>
		i++;
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	8f 5f       	subi	r24, 0xFF	; 255
    2c2c:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const uint8 *string)
{
	/* Display each character in the recieved string array */
	uint8 i = 0;
	while (string[i] != '\0')
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	9b 81       	ldd	r25, Y+3	; 0x03
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 23       	and	r24, r24
    2c42:	39 f7       	brne	.-50     	; 0x2c12 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*string);
		string++;
	}
	 *********************************************************/
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <LCD_moveCursor>:
 * [In] row		: Indicates the row required.
 * [In] column	: Indicates the column required.
 * [Return]		: Void.
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <LCD_moveCursor+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <LCD_moveCursor+0x8>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	6a 83       	std	Y+2, r22	; 0x02
	/* Calculate the address in the LCD DDRAM, */
	/* then move the LCD cursor to this specific address. */
	switch (row)
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	3c 83       	std	Y+4, r19	; 0x04
    2c68:	2b 83       	std	Y+3, r18	; 0x03
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	91 05       	cpc	r25, r1
    2c72:	d1 f0       	breq	.+52     	; 0x2ca8 <LCD_moveCursor+0x58>
    2c74:	2b 81       	ldd	r18, Y+3	; 0x03
    2c76:	3c 81       	ldd	r19, Y+4	; 0x04
    2c78:	22 30       	cpi	r18, 0x02	; 2
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <LCD_moveCursor+0x38>
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	9c 81       	ldd	r25, Y+4	; 0x04
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	61 f0       	breq	.+24     	; 0x2c9e <LCD_moveCursor+0x4e>
    2c86:	21 c0       	rjmp	.+66     	; 0x2cca <LCD_moveCursor+0x7a>
    2c88:	2b 81       	ldd	r18, Y+3	; 0x03
    2c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c8c:	22 30       	cpi	r18, 0x02	; 2
    2c8e:	31 05       	cpc	r19, r1
    2c90:	89 f0       	breq	.+34     	; 0x2cb4 <LCD_moveCursor+0x64>
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	83 30       	cpi	r24, 0x03	; 3
    2c98:	91 05       	cpc	r25, r1
    2c9a:	91 f0       	breq	.+36     	; 0x2cc0 <LCD_moveCursor+0x70>
    2c9c:	16 c0       	rjmp	.+44     	; 0x2cca <LCD_moveCursor+0x7a>
	{
		case 0:
			LCD_sendCommand(column | LCD_SET_CURSOR_LOCATION);
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	80 68       	ori	r24, 0x80	; 128
    2ca2:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
    2ca6:	11 c0       	rjmp	.+34     	; 0x2cca <LCD_moveCursor+0x7a>
		break;
		case 1:
			LCD_sendCommand((column + 0x40) | LCD_SET_CURSOR_LOCATION);
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	80 5c       	subi	r24, 0xC0	; 192
    2cac:	80 68       	ori	r24, 0x80	; 128
    2cae:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
    2cb2:	0b c0       	rjmp	.+22     	; 0x2cca <LCD_moveCursor+0x7a>
		break;
		case 2:
			LCD_sendCommand((column + 0x10) | LCD_SET_CURSOR_LOCATION);
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	80 5f       	subi	r24, 0xF0	; 240
    2cb8:	80 68       	ori	r24, 0x80	; 128
    2cba:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <LCD_moveCursor+0x7a>
		break;
		case 3:
			LCD_sendCommand((column + 0x50) | LCD_SET_CURSOR_LOCATION);
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	80 5b       	subi	r24, 0xB0	; 176
    2cc4:	80 68       	ori	r24, 0x80	; 128
    2cc6:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
		break;
	}
}
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <LCD_displayStringRowColumn>:
 * [In] column	: Indicates the column required.
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *string)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <LCD_displayStringRowColumn+0x6>
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <LCD_displayStringRowColumn+0x8>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	6a 83       	std	Y+2, r22	; 0x02
    2ce8:	5c 83       	std	Y+4, r21	; 0x04
    2cea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column); /* Go to to the specified LCD position */
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <LCD_moveCursor>
	LCD_displayString(string); /* Display string */
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
}
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <LCD_intgerToString>:
 * [Args]	:
 * [In] data	: Indicates the decimal value required.
 * [Return]		: Void.
 */
void LCD_intgerToString(uint16 data)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	62 97       	sbiw	r28, 0x12	; 18
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	9a 8b       	std	Y+18, r25	; 0x12
    2d20:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; /* Hold the ASCII result */
	itoa(data, buffer, 10); /* Convert data to it's ASCII value - 10 for decimal */
    2d22:	89 89       	ldd	r24, Y+17	; 0x11
    2d24:	9a 89       	ldd	r25, Y+18	; 0x12
    2d26:	9e 01       	movw	r18, r28
    2d28:	2f 5f       	subi	r18, 0xFF	; 255
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	b9 01       	movw	r22, r18
    2d2e:	4a e0       	ldi	r20, 0x0A	; 10
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	0e 94 52 18 	call	0x30a4	; 0x30a4 <itoa>
	LCD_displayString(buffer); /* Display string */
    2d36:	ce 01       	movw	r24, r28
    2d38:	01 96       	adiw	r24, 0x01	; 1
    2d3a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
}
    2d3e:	62 96       	adiw	r28, 0x12	; 18
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <LCD_clearScreen>:
 * 		Send the clear screen command
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_clearScreen(void)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_sendCommand>
}
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <Ultrasonic_init>:
 * 			3. Set trigger output pin.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void Ultrasonic_init(void)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	/* Define structure of ICU configurations */
	ICU_ConfigType ICU_Config = { TIMER01_PRESCALER_8, RISING };
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	88 7f       	andi	r24, 0xF8	; 248
    2d72:	82 60       	ori	r24, 0x02	; 2
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	88 60       	ori	r24, 0x08	; 8
    2d7a:	89 83       	std	Y+1, r24	; 0x01
	/* Set ICU call-back function */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    2d7c:	89 ed       	ldi	r24, 0xD9	; 217
    2d7e:	97 e1       	ldi	r25, 0x17	; 23
    2d80:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <ICU_setCallBack>
	/* Set trigger pin as output */
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    2d84:	83 e0       	ldi	r24, 0x03	; 3
    2d86:	67 e0       	ldi	r22, 0x07	; 7
    2d88:	41 e0       	ldi	r20, 0x01	; 1
    2d8a:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	/* Initialize ICU */
	ICU_init(&ICU_Config);
    2d8e:	ce 01       	movw	r24, r28
    2d90:	01 96       	adiw	r24, 0x01	; 1
    2d92:	0e 94 91 0a 	call	0x1522	; 0x1522 <ICU_init>
}
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <Ultrasonic_trigger>:
 * 		Sets trigger pin to (LOGIC HIGH) for 10 micro-seconds.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void Ultrasonic_trigger(void)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	68 97       	sbiw	r28, 0x18	; 24
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
	/* Set trigger pin as (LOGIC HIGH) */
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	67 e0       	ldi	r22, 0x07	; 7
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	a0 e2       	ldi	r26, 0x20	; 32
    2dc2:	b1 e4       	ldi	r27, 0x41	; 65
    2dc4:	8d 8b       	std	Y+21, r24	; 0x15
    2dc6:	9e 8b       	std	Y+22, r25	; 0x16
    2dc8:	af 8b       	std	Y+23, r26	; 0x17
    2dca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	2b ea       	ldi	r18, 0xAB	; 171
    2dd6:	3a ea       	ldi	r19, 0xAA	; 170
    2dd8:	4a e2       	ldi	r20, 0x2A	; 42
    2dda:	50 e4       	ldi	r21, 0x40	; 64
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	89 8b       	std	Y+17, r24	; 0x11
    2de6:	9a 8b       	std	Y+18, r25	; 0x12
    2de8:	ab 8b       	std	Y+19, r26	; 0x13
    2dea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2dec:	69 89       	ldd	r22, Y+17	; 0x11
    2dee:	7a 89       	ldd	r23, Y+18	; 0x12
    2df0:	8b 89       	ldd	r24, Y+19	; 0x13
    2df2:	9c 89       	ldd	r25, Y+20	; 0x14
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e8       	ldi	r20, 0x80	; 128
    2dfa:	5f e3       	ldi	r21, 0x3F	; 63
    2dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e00:	88 23       	and	r24, r24
    2e02:	1c f4       	brge	.+6      	; 0x2e0a <Ultrasonic_trigger+0x6c>
		__ticks = 1;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	88 8b       	std	Y+16, r24	; 0x10
    2e08:	91 c0       	rjmp	.+290    	; 0x2f2c <Ultrasonic_trigger+0x18e>
	else if (__tmp > 255)
    2e0a:	69 89       	ldd	r22, Y+17	; 0x11
    2e0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e10:	9c 89       	ldd	r25, Y+20	; 0x14
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	53 e4       	ldi	r21, 0x43	; 67
    2e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <Ultrasonic_trigger+0x86>
    2e22:	7b c0       	rjmp	.+246    	; 0x2f1a <Ultrasonic_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2e24:	6d 89       	ldd	r22, Y+21	; 0x15
    2e26:	7e 89       	ldd	r23, Y+22	; 0x16
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a e7       	ldi	r20, 0x7A	; 122
    2e32:	54 e4       	ldi	r21, 0x44	; 68
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8c 87       	std	Y+12, r24	; 0x0c
    2e3e:	9d 87       	std	Y+13, r25	; 0x0d
    2e40:	ae 87       	std	Y+14, r26	; 0x0e
    2e42:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e44:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e46:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	88 87       	std	Y+8, r24	; 0x08
    2e5e:	99 87       	std	Y+9, r25	; 0x09
    2e60:	aa 87       	std	Y+10, r26	; 0x0a
    2e62:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e64:	68 85       	ldd	r22, Y+8	; 0x08
    2e66:	79 85       	ldd	r23, Y+9	; 0x09
    2e68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <Ultrasonic_trigger+0xe8>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9f 83       	std	Y+7, r25	; 0x07
    2e82:	8e 83       	std	Y+6, r24	; 0x06
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <Ultrasonic_trigger+0x166>
	else if (__tmp > 65535)
    2e86:	68 85       	ldd	r22, Y+8	; 0x08
    2e88:	79 85       	ldd	r23, Y+9	; 0x09
    2e8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	4c f5       	brge	.+82     	; 0x2ef0 <Ultrasonic_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ea0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ea4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e2       	ldi	r20, 0x20	; 32
    2eac:	51 e4       	ldi	r21, 0x41	; 65
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9f 83       	std	Y+7, r25	; 0x07
    2ec4:	8e 83       	std	Y+6, r24	; 0x06
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <Ultrasonic_trigger+0x148>
    2ec8:	88 ec       	ldi	r24, 0xC8	; 200
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9d 83       	std	Y+5, r25	; 0x05
    2ece:	8c 83       	std	Y+4, r24	; 0x04
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <Ultrasonic_trigger+0x136>
    2ed8:	9d 83       	std	Y+5, r25	; 0x05
    2eda:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ede:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9f 83       	std	Y+7, r25	; 0x07
    2ee4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f7       	brne	.-38     	; 0x2ec8 <Ultrasonic_trigger+0x12a>
    2eee:	24 c0       	rjmp	.+72     	; 0x2f38 <Ultrasonic_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef0:	68 85       	ldd	r22, Y+8	; 0x08
    2ef2:	79 85       	ldd	r23, Y+9	; 0x09
    2ef4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ef6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9f 83       	std	Y+7, r25	; 0x07
    2f02:	8e 83       	std	Y+6, r24	; 0x06
    2f04:	8e 81       	ldd	r24, Y+6	; 0x06
    2f06:	9f 81       	ldd	r25, Y+7	; 0x07
    2f08:	9b 83       	std	Y+3, r25	; 0x03
    2f0a:	8a 83       	std	Y+2, r24	; 0x02
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <Ultrasonic_trigger+0x172>
    2f14:	9b 83       	std	Y+3, r25	; 0x03
    2f16:	8a 83       	std	Y+2, r24	; 0x02
    2f18:	0f c0       	rjmp	.+30     	; 0x2f38 <Ultrasonic_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f1a:	69 89       	ldd	r22, Y+17	; 0x11
    2f1c:	7a 89       	ldd	r23, Y+18	; 0x12
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	9c 89       	ldd	r25, Y+20	; 0x14
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	88 8b       	std	Y+16, r24	; 0x10
    2f2c:	88 89       	ldd	r24, Y+16	; 0x10
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	8a 95       	dec	r24
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <Ultrasonic_trigger+0x194>
    2f36:	89 83       	std	Y+1, r24	; 0x01
	/* Wait 10 micro-seconds */
	_delay_us(10);
	/* Set trigger pin as (LOGIC LOW) */
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    2f38:	83 e0       	ldi	r24, 0x03	; 3
    2f3a:	67 e0       	ldi	r22, 0x07	; 7
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
}
    2f42:	68 96       	adiw	r28, 0x18	; 24
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <Ultrasonic_readDistance>:
 * 		ICU timer value and returns the calculated distance.
 * [Args]	: Void.
 * [Return]	: Measured distance value.
 */
uint16 Ultrasonic_readDistance(void)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <Ultrasonic_readDistance+0x6>
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	/* Declare & initialize a variable that holds distance */
	uint16 distance = 0;
    2f5e:	1a 82       	std	Y+2, r1	; 0x02
    2f60:	19 82       	std	Y+1, r1	; 0x01
	/* Trigger ultrasonic */
	Ultrasonic_trigger();
    2f62:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Ultrasonic_trigger>
	/* Calculate distance depending on ICU timer value */
	distance = ((float) 0.01731 * echoHighTime);
    2f66:	80 91 81 01 	lds	r24, 0x0181
    2f6a:	90 91 82 01 	lds	r25, 0x0182
    2f6e:	cc 01       	movw	r24, r24
    2f70:	a0 e0       	ldi	r26, 0x00	; 0
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	23 eb       	ldi	r18, 0xB3	; 179
    2f86:	3d ec       	ldi	r19, 0xCD	; 205
    2f88:	4d e8       	ldi	r20, 0x8D	; 141
    2f8a:	5c e3       	ldi	r21, 0x3C	; 60
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	/* Return distance calculated to upper layer */
	return distance;
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <Ultrasonic_edgeProcessing>:
 * 		to last ICU timer value and resets number of edges detected.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void Ultrasonic_edgeProcessing(void)
{
    2fb2:	df 93       	push	r29
    2fb4:	cf 93       	push	r28
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
	/* Increase edges count */
	edgeCount++;
    2fba:	80 91 80 01 	lds	r24, 0x0180
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	80 93 80 01 	sts	0x0180, r24
	/* If the edge detected is a rising edge */
	if (edgeCount == 1)
    2fc4:	80 91 80 01 	lds	r24, 0x0180
    2fc8:	81 30       	cpi	r24, 0x01	; 1
    2fca:	31 f4       	brne	.+12     	; 0x2fd8 <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue(); /* Clear previous ICU timer value to start again from this point */
    2fcc:	0e 94 2d 0b 	call	0x165a	; 0x165a <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING); /* Set edge detection to (FALLING) */
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <ICU_setEdgeDetectionType>
    2fd6:	0d c0       	rjmp	.+26     	; 0x2ff2 <Ultrasonic_edgeProcessing+0x40>
	}
	else
	{
		echoHighTime = ICU_getInputCaptureValue(); /* Set the new ICU timer value to echoHighTime */
    2fd8:	0e 94 22 0b 	call	0x1644	; 0x1644 <ICU_getInputCaptureValue>
    2fdc:	90 93 82 01 	sts	0x0182, r25
    2fe0:	80 93 81 01 	sts	0x0181, r24
		ICU_clearTimerValue(); /* Clear previous ICU timer value to start again from this point */
    2fe4:	0e 94 2d 0b 	call	0x165a	; 0x165a <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(RISING); /* Set edge detection to (RISING) */
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <ICU_setEdgeDetectionType>
		edgeCount = 0; /* Reset number of detected edges */
    2fee:	10 92 80 01 	sts	0x0180, r1
	}
}
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	08 95       	ret

00002ff8 <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
	/* Enable global interrupt */
	SET_BIT(SREG, 7);
    3000:	af e5       	ldi	r26, 0x5F	; 95
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	ef e5       	ldi	r30, 0x5F	; 95
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	80 68       	ori	r24, 0x80	; 128
    300c:	8c 93       	st	X, r24
	/* Initialize LCD */
	LCD_init();
    300e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <LCD_init>
	/* Initialize Ultrasonic */
	Ultrasonic_init();
    3012:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Ultrasonic_init>
	/* Display text */
	LCD_displayString("Distance:     cm");
    3016:	80 e6       	ldi	r24, 0x60	; 96
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
	/* Execute program loop */
	while (TRUE)
	{
		LCD_moveCursor(0, 10); /* Move to row 0 column 10 */
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	6a e0       	ldi	r22, 0x0A	; 10
    3022:	0e 94 28 16 	call	0x2c50	; 0x2c50 <LCD_moveCursor>
		LCD_intgerToString(Ultrasonic_readDistance()); /* Display calculated distance */
    3026:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Ultrasonic_readDistance>
    302a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_intgerToString>
		LCD_displayCharacter(' '); /* Clear numbers after displaying value */
    302e:	80 e2       	ldi	r24, 0x20	; 32
    3030:	0e 94 10 14 	call	0x2820	; 0x2820 <LCD_displayCharacter>
    3034:	f4 cf       	rjmp	.-24     	; 0x301e <main+0x26>

00003036 <__prologue_saves__>:
    3036:	2f 92       	push	r2
    3038:	3f 92       	push	r3
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	ca 1b       	sub	r28, r26
    3060:	db 0b       	sbc	r29, r27
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	09 94       	ijmp

0000306e <__epilogue_restores__>:
    306e:	2a 88       	ldd	r2, Y+18	; 0x12
    3070:	39 88       	ldd	r3, Y+17	; 0x11
    3072:	48 88       	ldd	r4, Y+16	; 0x10
    3074:	5f 84       	ldd	r5, Y+15	; 0x0f
    3076:	6e 84       	ldd	r6, Y+14	; 0x0e
    3078:	7d 84       	ldd	r7, Y+13	; 0x0d
    307a:	8c 84       	ldd	r8, Y+12	; 0x0c
    307c:	9b 84       	ldd	r9, Y+11	; 0x0b
    307e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3080:	b9 84       	ldd	r11, Y+9	; 0x09
    3082:	c8 84       	ldd	r12, Y+8	; 0x08
    3084:	df 80       	ldd	r13, Y+7	; 0x07
    3086:	ee 80       	ldd	r14, Y+6	; 0x06
    3088:	fd 80       	ldd	r15, Y+5	; 0x05
    308a:	0c 81       	ldd	r16, Y+4	; 0x04
    308c:	1b 81       	ldd	r17, Y+3	; 0x03
    308e:	aa 81       	ldd	r26, Y+2	; 0x02
    3090:	b9 81       	ldd	r27, Y+1	; 0x01
    3092:	ce 0f       	add	r28, r30
    3094:	d1 1d       	adc	r29, r1
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	ed 01       	movw	r28, r26
    30a2:	08 95       	ret

000030a4 <itoa>:
    30a4:	fb 01       	movw	r30, r22
    30a6:	9f 01       	movw	r18, r30
    30a8:	e8 94       	clt
    30aa:	42 30       	cpi	r20, 0x02	; 2
    30ac:	c4 f0       	brlt	.+48     	; 0x30de <itoa+0x3a>
    30ae:	45 32       	cpi	r20, 0x25	; 37
    30b0:	b4 f4       	brge	.+44     	; 0x30de <itoa+0x3a>
    30b2:	4a 30       	cpi	r20, 0x0A	; 10
    30b4:	29 f4       	brne	.+10     	; 0x30c0 <itoa+0x1c>
    30b6:	97 fb       	bst	r25, 7
    30b8:	1e f4       	brtc	.+6      	; 0x30c0 <itoa+0x1c>
    30ba:	90 95       	com	r25
    30bc:	81 95       	neg	r24
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	64 2f       	mov	r22, r20
    30c2:	77 27       	eor	r23, r23
    30c4:	0e 94 83 18 	call	0x3106	; 0x3106 <__udivmodhi4>
    30c8:	80 5d       	subi	r24, 0xD0	; 208
    30ca:	8a 33       	cpi	r24, 0x3A	; 58
    30cc:	0c f0       	brlt	.+2      	; 0x30d0 <itoa+0x2c>
    30ce:	89 5d       	subi	r24, 0xD9	; 217
    30d0:	81 93       	st	Z+, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	a1 f7       	brne	.-24     	; 0x30c0 <itoa+0x1c>
    30d8:	16 f4       	brtc	.+4      	; 0x30de <itoa+0x3a>
    30da:	5d e2       	ldi	r21, 0x2D	; 45
    30dc:	51 93       	st	Z+, r21
    30de:	10 82       	st	Z, r1
    30e0:	c9 01       	movw	r24, r18
    30e2:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <strrev>

000030e6 <strrev>:
    30e6:	dc 01       	movw	r26, r24
    30e8:	fc 01       	movw	r30, r24
    30ea:	67 2f       	mov	r22, r23
    30ec:	71 91       	ld	r23, Z+
    30ee:	77 23       	and	r23, r23
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <strrev+0x4>
    30f2:	32 97       	sbiw	r30, 0x02	; 2
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <strrev+0x18>
    30f6:	7c 91       	ld	r23, X
    30f8:	6d 93       	st	X+, r22
    30fa:	70 83       	st	Z, r23
    30fc:	62 91       	ld	r22, -Z
    30fe:	ae 17       	cp	r26, r30
    3100:	bf 07       	cpc	r27, r31
    3102:	c8 f3       	brcs	.-14     	; 0x30f6 <strrev+0x10>
    3104:	08 95       	ret

00003106 <__udivmodhi4>:
    3106:	aa 1b       	sub	r26, r26
    3108:	bb 1b       	sub	r27, r27
    310a:	51 e1       	ldi	r21, 0x11	; 17
    310c:	07 c0       	rjmp	.+14     	; 0x311c <__udivmodhi4_ep>

0000310e <__udivmodhi4_loop>:
    310e:	aa 1f       	adc	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	a6 17       	cp	r26, r22
    3114:	b7 07       	cpc	r27, r23
    3116:	10 f0       	brcs	.+4      	; 0x311c <__udivmodhi4_ep>
    3118:	a6 1b       	sub	r26, r22
    311a:	b7 0b       	sbc	r27, r23

0000311c <__udivmodhi4_ep>:
    311c:	88 1f       	adc	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	5a 95       	dec	r21
    3122:	a9 f7       	brne	.-22     	; 0x310e <__udivmodhi4_loop>
    3124:	80 95       	com	r24
    3126:	90 95       	com	r25
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	08 95       	ret

0000312e <_exit>:
    312e:	f8 94       	cli

00003130 <__stop_program>:
    3130:	ff cf       	rjmp	.-2      	; 0x3130 <__stop_program>
