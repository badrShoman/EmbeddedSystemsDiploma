
DistanceMeasuringProject_Eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00003132  000031c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080017a  0080017a  000032e0  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  000032e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001528  00000000  00000000  00005ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000073a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000097ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ab33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bd0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000becc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_6>
      1c:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__vector_7>
      20:	0c 94 07 11 	jmp	0x220e	; 0x220e <__vector_8>
      24:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 97 18 	jmp	0x312e	; 0x312e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* Enable global interrupt */
	SET_BIT(SREG, 7);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
	/* Initialize LCD */
	LCD_init();
     e44:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <LCD_init>
	/* Initialize Ultrasonic */
	Ultrasonic_init();
     e48:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Ultrasonic_init>
	/* Display text */
	LCD_displayString("Distance:     cm");
     e4c:	80 e6       	ldi	r24, 0x60	; 96
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_displayString>
	/* Execute program loop */
	while (TRUE)
	{
		LCD_moveCursor(0, 10); /* Move to row 0 column 10 */
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	6a e0       	ldi	r22, 0x0A	; 10
     e58:	0e 94 17 10 	call	0x202e	; 0x202e <LCD_moveCursor>
		LCD_intgerToString(Ultrasonic_readDistance()); /* Display calculated distance */
     e5c:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Ultrasonic_readDistance>
     e60:	0e 94 74 10 	call	0x20e8	; 0x20e8 <LCD_intgerToString>
		LCD_displayCharacter(' '); /* Clear numbers after displaying value */
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <LCD_displayCharacter>
     e6a:	f4 cf       	rjmp	.-24     	; 0xe54 <main+0x26>

00000e6c <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	00 d0       	rcall	.+0      	; 0xe72 <GPIO_setupPinDirection+0x6>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <GPIO_setupPinDirection+0x8>
     e74:	0f 92       	push	r0
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	6a 83       	std	Y+2, r22	; 0x02
     e7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	88 30       	cpi	r24, 0x08	; 8
     e84:	08 f0       	brcs	.+2      	; 0xe88 <GPIO_setupPinDirection+0x1c>
     e86:	d5 c0       	rjmp	.+426    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <GPIO_setupPinDirection+0x24>
     e8e:	d1 c0       	rjmp	.+418    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3d 83       	std	Y+5, r19	; 0x05
     e98:	2c 83       	std	Y+4, r18	; 0x04
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <GPIO_setupPinDirection+0x3a>
     ea4:	43 c0       	rjmp	.+134    	; 0xf2c <GPIO_setupPinDirection+0xc0>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	2c f4       	brge	.+10     	; 0xeba <GPIO_setupPinDirection+0x4e>
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	9d 81       	ldd	r25, Y+5	; 0x05
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	71 f0       	breq	.+28     	; 0xed4 <GPIO_setupPinDirection+0x68>
     eb8:	bc c0       	rjmp	.+376    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	3d 81       	ldd	r19, Y+5	; 0x05
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <GPIO_setupPinDirection+0x5a>
     ec4:	5f c0       	rjmp	.+190    	; 0xf84 <GPIO_setupPinDirection+0x118>
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	91 05       	cpc	r25, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <GPIO_setupPinDirection+0x66>
     ed0:	85 c0       	rjmp	.+266    	; 0xfdc <GPIO_setupPinDirection+0x170>
     ed2:	af c0       	rjmp	.+350    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	a1 f4       	brne	.+40     	; 0xf02 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
     eda:	aa e3       	ldi	r26, 0x3A	; 58
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ea e3       	ldi	r30, 0x3A	; 58
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <GPIO_setupPinDirection+0x8c>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <GPIO_setupPinDirection+0x88>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	98 c0       	rjmp	.+304    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
     f02:	aa e3       	ldi	r26, 0x3A	; 58
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ea e3       	ldi	r30, 0x3A	; 58
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_setupPinDirection+0xb4>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_setupPinDirection+0xb0>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	83 c0       	rjmp	.+262    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	a1 f4       	brne	.+40     	; 0xf5a <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
     f32:	a7 e3       	ldi	r26, 0x37	; 55
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e7 e3       	ldi	r30, 0x37	; 55
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <GPIO_setupPinDirection+0xe4>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <GPIO_setupPinDirection+0xe0>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	6c c0       	rjmp	.+216    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
     f5a:	a7 e3       	ldi	r26, 0x37	; 55
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e3       	ldi	r30, 0x37	; 55
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <GPIO_setupPinDirection+0x10c>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <GPIO_setupPinDirection+0x108>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	57 c0       	rjmp	.+174    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	a1 f4       	brne	.+40     	; 0xfb2 <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
     f8a:	a4 e3       	ldi	r26, 0x34	; 52
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e4 e3       	ldi	r30, 0x34	; 52
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_setupPinDirection+0x13c>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_setupPinDirection+0x138>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	40 c0       	rjmp	.+128    	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_setupPinDirection+0x164>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_setupPinDirection+0x160>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	2b c0       	rjmp	.+86     	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	a1 f4       	brne	.+40     	; 0x100a <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
     fe2:	a1 e3       	ldi	r26, 0x31	; 49
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e1 e3       	ldi	r30, 0x31	; 49
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_setupPinDirection+0x194>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_setupPinDirection+0x190>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	14 c0       	rjmp	.+40     	; 0x1032 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_setupPinDirection+0x1bc>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_setupPinDirection+0x1b8>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <GPIO_writePin+0x6>
    1048:	00 d0       	rcall	.+0      	; 0x104a <GPIO_writePin+0x8>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	6a 83       	std	Y+2, r22	; 0x02
    1054:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	08 f0       	brcs	.+2      	; 0x105e <GPIO_writePin+0x1c>
    105c:	d5 c0       	rjmp	.+426    	; 0x1208 <GPIO_writePin+0x1c6>
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	84 30       	cpi	r24, 0x04	; 4
    1062:	08 f0       	brcs	.+2      	; 0x1066 <GPIO_writePin+0x24>
    1064:	d1 c0       	rjmp	.+418    	; 0x1208 <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3d 83       	std	Y+5, r19	; 0x05
    106e:	2c 83       	std	Y+4, r18	; 0x04
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <GPIO_writePin+0x3a>
    107a:	43 c0       	rjmp	.+134    	; 0x1102 <GPIO_writePin+0xc0>
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	2c f4       	brge	.+10     	; 0x1090 <GPIO_writePin+0x4e>
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	9d 81       	ldd	r25, Y+5	; 0x05
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	71 f0       	breq	.+28     	; 0x10aa <GPIO_writePin+0x68>
    108e:	bc c0       	rjmp	.+376    	; 0x1208 <GPIO_writePin+0x1c6>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <GPIO_writePin+0x5a>
    109a:	5f c0       	rjmp	.+190    	; 0x115a <GPIO_writePin+0x118>
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	9d 81       	ldd	r25, Y+5	; 0x05
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <GPIO_writePin+0x66>
    10a6:	85 c0       	rjmp	.+266    	; 0x11b2 <GPIO_writePin+0x170>
    10a8:	af c0       	rjmp	.+350    	; 0x1208 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
    10b0:	ab e3       	ldi	r26, 0x3B	; 59
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	eb e3       	ldi	r30, 0x3B	; 59
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <GPIO_writePin+0x8c>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <GPIO_writePin+0x88>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	98 c0       	rjmp	.+304    	; 0x1208 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
    10d8:	ab e3       	ldi	r26, 0x3B	; 59
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_writePin+0xb4>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_writePin+0xb0>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	83 c0       	rjmp	.+262    	; 0x1208 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	a1 f4       	brne	.+40     	; 0x1130 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
    1108:	a8 e3       	ldi	r26, 0x38	; 56
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_writePin+0xe4>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_writePin+0xe0>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	6c c0       	rjmp	.+216    	; 0x1208 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_writePin+0x10c>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_writePin+0x108>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	57 c0       	rjmp	.+174    	; 0x1208 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	a1 f4       	brne	.+40     	; 0x1188 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_writePin+0x13c>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_writePin+0x138>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	40 c0       	rjmp	.+128    	; 0x1208 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_writePin+0x164>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_writePin+0x160>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	2b c0       	rjmp	.+86     	; 0x1208 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	a1 f4       	brne	.+40     	; 0x11e0 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_writePin+0x194>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_writePin+0x190>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_writePin+0x1bc>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_writePin+0x1b8>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <GPIO_readPin+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_readPin+0x8>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_readPin+0xa>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 30       	cpi	r24, 0x08	; 8
    122e:	08 f0       	brcs	.+2      	; 0x1232 <GPIO_readPin+0x1a>
    1230:	85 c0       	rjmp	.+266    	; 0x133c <GPIO_readPin+0x124>
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	08 f0       	brcs	.+2      	; 0x123a <GPIO_readPin+0x22>
    1238:	81 c0       	rjmp	.+258    	; 0x133c <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3d 83       	std	Y+5, r19	; 0x05
    1242:	2c 83       	std	Y+4, r18	; 0x04
    1244:	4c 81       	ldd	r20, Y+4	; 0x04
    1246:	5d 81       	ldd	r21, Y+5	; 0x05
    1248:	41 30       	cpi	r20, 0x01	; 1
    124a:	51 05       	cpc	r21, r1
    124c:	79 f1       	breq	.+94     	; 0x12ac <GPIO_readPin+0x94>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	91 05       	cpc	r25, r1
    1256:	34 f4       	brge	.+12     	; 0x1264 <GPIO_readPin+0x4c>
    1258:	2c 81       	ldd	r18, Y+4	; 0x04
    125a:	3d 81       	ldd	r19, Y+5	; 0x05
    125c:	21 15       	cp	r18, r1
    125e:	31 05       	cpc	r19, r1
    1260:	69 f0       	breq	.+26     	; 0x127c <GPIO_readPin+0x64>
    1262:	6c c0       	rjmp	.+216    	; 0x133c <GPIO_readPin+0x124>
    1264:	4c 81       	ldd	r20, Y+4	; 0x04
    1266:	5d 81       	ldd	r21, Y+5	; 0x05
    1268:	42 30       	cpi	r20, 0x02	; 2
    126a:	51 05       	cpc	r21, r1
    126c:	b9 f1       	breq	.+110    	; 0x12dc <GPIO_readPin+0xc4>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <GPIO_readPin+0x62>
    1278:	49 c0       	rjmp	.+146    	; 0x130c <GPIO_readPin+0xf4>
    127a:	60 c0       	rjmp	.+192    	; 0x133c <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
    127c:	e9 e3       	ldi	r30, 0x39	; 57
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_readPin+0x7c>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_readPin+0x78>
    1298:	ca 01       	movw	r24, r20
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	90 70       	andi	r25, 0x00	; 0
    129e:	88 23       	and	r24, r24
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    12a2:	51 e0       	ldi	r21, 0x01	; 1
    12a4:	5b 83       	std	Y+3, r21	; 0x03
    12a6:	4b c0       	rjmp	.+150    	; 0x133e <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    12a8:	1b 82       	std	Y+3, r1	; 0x03
    12aa:	49 c0       	rjmp	.+146    	; 0x133e <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
    12ac:	e6 e3       	ldi	r30, 0x36	; 54
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a9 01       	movw	r20, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_readPin+0xac>
    12c0:	55 95       	asr	r21
    12c2:	47 95       	ror	r20
    12c4:	8a 95       	dec	r24
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_readPin+0xa8>
    12c8:	ca 01       	movw	r24, r20
    12ca:	81 70       	andi	r24, 0x01	; 1
    12cc:	90 70       	andi	r25, 0x00	; 0
    12ce:	88 23       	and	r24, r24
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    12d2:	51 e0       	ldi	r21, 0x01	; 1
    12d4:	5b 83       	std	Y+3, r21	; 0x03
    12d6:	33 c0       	rjmp	.+102    	; 0x133e <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    12d8:	1b 82       	std	Y+3, r1	; 0x03
    12da:	31 c0       	rjmp	.+98     	; 0x133e <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
    12dc:	e3 e3       	ldi	r30, 0x33	; 51
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_readPin+0xdc>
    12f0:	55 95       	asr	r21
    12f2:	47 95       	ror	r20
    12f4:	8a 95       	dec	r24
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_readPin+0xd8>
    12f8:	ca 01       	movw	r24, r20
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	90 70       	andi	r25, 0x00	; 0
    12fe:	88 23       	and	r24, r24
    1300:	19 f0       	breq	.+6      	; 0x1308 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    1302:	51 e0       	ldi	r21, 0x01	; 1
    1304:	5b 83       	std	Y+3, r21	; 0x03
    1306:	1b c0       	rjmp	.+54     	; 0x133e <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1308:	1b 82       	std	Y+3, r1	; 0x03
    130a:	19 c0       	rjmp	.+50     	; 0x133e <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
    130c:	e0 e3       	ldi	r30, 0x30	; 48
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a9 01       	movw	r20, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <GPIO_readPin+0x10c>
    1320:	55 95       	asr	r21
    1322:	47 95       	ror	r20
    1324:	8a 95       	dec	r24
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <GPIO_readPin+0x108>
    1328:	ca 01       	movw	r24, r20
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	88 23       	and	r24, r24
    1330:	19 f0       	breq	.+6      	; 0x1338 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    1332:	51 e0       	ldi	r21, 0x01	; 1
    1334:	5b 83       	std	Y+3, r21	; 0x03
    1336:	03 c0       	rjmp	.+6      	; 0x133e <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1338:	1b 82       	std	Y+3, r1	; 0x03
    133a:	01 c0       	rjmp	.+2      	; 0x133e <GPIO_readPin+0x126>
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_readPin+0x12a>
				}
		}
	}
}
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	8e 83       	std	Y+6, r24	; 0x06
    1342:	8e 81       	ldd	r24, Y+6	; 0x06
    1344:	26 96       	adiw	r28, 0x06	; 6
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <GPIO_setupPortDirection+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_setupPortDirection+0x8>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	90 f5       	brcc	.+100    	; 0x13d0 <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3c 83       	std	Y+4, r19	; 0x04
    1374:	2b 83       	std	Y+3, r18	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	d1 f0       	breq	.+52     	; 0x13b4 <GPIO_setupPortDirection+0x5e>
    1380:	2b 81       	ldd	r18, Y+3	; 0x03
    1382:	3c 81       	ldd	r19, Y+4	; 0x04
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	2c f4       	brge	.+10     	; 0x1394 <GPIO_setupPortDirection+0x3e>
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	61 f0       	breq	.+24     	; 0x13aa <GPIO_setupPortDirection+0x54>
    1392:	1e c0       	rjmp	.+60     	; 0x13d0 <GPIO_setupPortDirection+0x7a>
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	81 f0       	breq	.+32     	; 0x13be <GPIO_setupPortDirection+0x68>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	91 05       	cpc	r25, r1
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <GPIO_setupPortDirection+0x72>
    13a8:	13 c0       	rjmp	.+38     	; 0x13d0 <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    13aa:	ea e3       	ldi	r30, 0x3A	; 58
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	80 83       	st	Z, r24
    13b2:	0e c0       	rjmp	.+28     	; 0x13d0 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    13b4:	e7 e3       	ldi	r30, 0x37	; 55
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	80 83       	st	Z, r24
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    13be:	e4 e3       	ldi	r30, 0x34	; 52
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	80 83       	st	Z, r24
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    13c8:	e1 e3       	ldi	r30, 0x31	; 49
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <GPIO_writePort+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <GPIO_writePort+0x8>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	90 f5       	brcc	.+100    	; 0x1458 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3c 83       	std	Y+4, r19	; 0x04
    13fc:	2b 83       	std	Y+3, r18	; 0x03
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	91 05       	cpc	r25, r1
    1406:	d1 f0       	breq	.+52     	; 0x143c <GPIO_writePort+0x5e>
    1408:	2b 81       	ldd	r18, Y+3	; 0x03
    140a:	3c 81       	ldd	r19, Y+4	; 0x04
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	31 05       	cpc	r19, r1
    1410:	2c f4       	brge	.+10     	; 0x141c <GPIO_writePort+0x3e>
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	61 f0       	breq	.+24     	; 0x1432 <GPIO_writePort+0x54>
    141a:	1e c0       	rjmp	.+60     	; 0x1458 <GPIO_writePort+0x7a>
    141c:	2b 81       	ldd	r18, Y+3	; 0x03
    141e:	3c 81       	ldd	r19, Y+4	; 0x04
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	81 f0       	breq	.+32     	; 0x1446 <GPIO_writePort+0x68>
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	91 05       	cpc	r25, r1
    142e:	81 f0       	breq	.+32     	; 0x1450 <GPIO_writePort+0x72>
    1430:	13 c0       	rjmp	.+38     	; 0x1458 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    1432:	eb e3       	ldi	r30, 0x3B	; 59
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	80 83       	st	Z, r24
    143a:	0e c0       	rjmp	.+28     	; 0x1458 <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    143c:	e8 e3       	ldi	r30, 0x38	; 56
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	80 83       	st	Z, r24
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	80 83       	st	Z, r24
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    1450:	e2 e3       	ldi	r30, 0x32	; 50
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	80 83       	st	Z, r24
			break;
		}
	}
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <GPIO_readPort+0x6>
    146c:	00 d0       	rcall	.+0      	; 0x146e <GPIO_readPort+0x8>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	98 f5       	brcc	.+102    	; 0x14e2 <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3c 83       	std	Y+4, r19	; 0x04
    1484:	2b 83       	std	Y+3, r18	; 0x03
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	d1 f0       	breq	.+52     	; 0x14c4 <GPIO_readPort+0x5e>
    1490:	2b 81       	ldd	r18, Y+3	; 0x03
    1492:	3c 81       	ldd	r19, Y+4	; 0x04
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <GPIO_readPort+0x3e>
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	61 f0       	breq	.+24     	; 0x14ba <GPIO_readPort+0x54>
    14a2:	1f c0       	rjmp	.+62     	; 0x14e2 <GPIO_readPort+0x7c>
    14a4:	2b 81       	ldd	r18, Y+3	; 0x03
    14a6:	3c 81       	ldd	r19, Y+4	; 0x04
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	81 f0       	breq	.+32     	; 0x14ce <GPIO_readPort+0x68>
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <GPIO_readPort+0x72>
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    14ba:	e9 e3       	ldi	r30, 0x39	; 57
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	90 81       	ld	r25, Z
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	10 c0       	rjmp	.+32     	; 0x14e4 <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    14c4:	e6 e3       	ldi	r30, 0x36	; 54
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	20 81       	ld	r18, Z
    14ca:	2a 83       	std	Y+2, r18	; 0x02
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    14ce:	e3 e3       	ldi	r30, 0x33	; 51
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	30 81       	ld	r19, Z
    14d4:	3a 83       	std	Y+2, r19	; 0x02
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    14d8:	e0 e3       	ldi	r30, 0x30	; 48
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <GPIO_readPort+0x7e>
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_readPort+0x82>
		}
	}
}
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	9d 83       	std	Y+5, r25	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <__vector_6>:
 * [Interrupt Vector]	: TIMER1_CAPT_vect
 * [Description]		:
 * 		An interrupt that acts upon detecting an edge.
 */
ISR(TIMER1_CAPT_vect)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	if (g_interruptCallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1524:	80 91 7a 01 	lds	r24, 0x017A
    1528:	90 91 7b 01 	lds	r25, 0x017B
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	29 f0       	breq	.+10     	; 0x153a <__vector_6+0x40>
	{
		(*g_interruptCallBack_Ptr)(); /* Execute callback function */
    1530:	e0 91 7a 01 	lds	r30, 0x017A
    1534:	f0 91 7b 01 	lds	r31, 0x017B
    1538:	09 95       	icall
	}
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <ICU_init>:
 * [Args]	:
 * [In] Config_Ptr	: Includes pre-scaler & edge values.
 * [Return]			: Void.
 */
void ICU_init(const ICU_ConfigType *Config_Ptr)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <ICU_init+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <ICU_init+0x8>
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	9b 83       	std	Y+3, r25	; 0x03
    1570:	8a 83       	std	Y+2, r24	; 0x02
	/* Select edge accordingly (MUST BE SELECTED FIRST) */
	switch ((*Config_Ptr).edge)
    1572:	ea 81       	ldd	r30, Y+2	; 0x02
    1574:	fb 81       	ldd	r31, Y+3	; 0x03
    1576:	80 81       	ld	r24, Z
    1578:	86 95       	lsr	r24
    157a:	86 95       	lsr	r24
    157c:	86 95       	lsr	r24
    157e:	81 70       	andi	r24, 0x01	; 1
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3d 83       	std	Y+5, r19	; 0x05
    1586:	2c 83       	std	Y+4, r18	; 0x04
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	69 f0       	breq	.+26     	; 0x15aa <ICU_init+0x4a>
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	21 30       	cpi	r18, 0x01	; 1
    1596:	31 05       	cpc	r19, r1
    1598:	79 f4       	brne	.+30     	; 0x15b8 <ICU_init+0x58>
	{
		case RISING:
			SET_BIT(TCCR1B, ICES1);
    159a:	ae e4       	ldi	r26, 0x4E	; 78
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ee e4       	ldi	r30, 0x4E	; 78
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 64       	ori	r24, 0x40	; 64
    15a6:	8c 93       	st	X, r24
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <ICU_init+0x58>
		break;
		case FALLING:
			CLEAR_BIT(TCCR1B, ICES1);
    15aa:	ae e4       	ldi	r26, 0x4E	; 78
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ee e4       	ldi	r30, 0x4E	; 78
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 7b       	andi	r24, 0xBF	; 191
    15b6:	8c 93       	st	X, r24
		break;
	}
	/* Create an instance of Timer16Bit_initConfig to initialize timer1*/
	Timer_initConfig Timer1_config = { TIMER16BIT_NORMAL, NORMAL_OC,
			LOGIC_LOW };
    15b8:	19 82       	std	Y+1, r1	; 0x01
	/* Initialize timer1 and disable it's interrupt*/
	Timer1_init(&Timer1_config);
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 3a 11 	call	0x2274	; 0x2274 <Timer1_init>
	/* Initialize ICU copied value from timer1 by ZERO */
	ICR1 = 0;
    15c2:	e6 e4       	ldi	r30, 0x46	; 70
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	11 82       	std	Z+1, r1	; 0x01
    15c8:	10 82       	st	Z, r1
	/* Enable ICU interrupt */
	SET_BIT(TIMSK, TICIE1);
    15ca:	a9 e5       	ldi	r26, 0x59	; 89
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e9 e5       	ldi	r30, 0x59	; 89
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 62       	ori	r24, 0x20	; 32
    15d6:	8c 93       	st	X, r24
	/* Setup ICU pin direction */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	66 e0       	ldi	r22, 0x06	; 6
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
	/* Start timer1 in normal mode */
	Timer1_start((*Config_Ptr).prescaler, 0, 0, 0);
    15e2:	ea 81       	ldd	r30, Y+2	; 0x02
    15e4:	fb 81       	ldd	r31, Y+3	; 0x03
    15e6:	80 81       	ld	r24, Z
    15e8:	87 70       	andi	r24, 0x07	; 7
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer1_start>
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <ICU_setCallBack>:
 * 		Function that sets the call-back function address for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void ICU_setCallBack(void (*Ptr2Function)(void))
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <ICU_setCallBack+0x6>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
	g_interruptCallBack_Ptr = Ptr2Function;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	90 93 7b 01 	sts	0x017B, r25
    1620:	80 93 7a 01 	sts	0x017A, r24
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <ICU_setEdgeDetectionType>:
 * [Args]	:
 * [In] edge	: Inducates edge required.
 * [Return]		: Void.
 */
void ICU_setEdgeDetectionType(const ICU_EDGE_TYPE edge)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <ICU_setEdgeDetectionType+0x6>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
	/* Select edge accordingly */
	switch (edge)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3b 83       	std	Y+3, r19	; 0x03
    1644:	2a 83       	std	Y+2, r18	; 0x02
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f0       	breq	.+26     	; 0x1668 <ICU_setEdgeDetectionType+0x3a>
    164e:	2a 81       	ldd	r18, Y+2	; 0x02
    1650:	3b 81       	ldd	r19, Y+3	; 0x03
    1652:	21 30       	cpi	r18, 0x01	; 1
    1654:	31 05       	cpc	r19, r1
    1656:	79 f4       	brne	.+30     	; 0x1676 <ICU_setEdgeDetectionType+0x48>
	{
		case RISING:
			SET_BIT(TCCR1B, ICES1);
    1658:	ae e4       	ldi	r26, 0x4E	; 78
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ee e4       	ldi	r30, 0x4E	; 78
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 64       	ori	r24, 0x40	; 64
    1664:	8c 93       	st	X, r24
    1666:	07 c0       	rjmp	.+14     	; 0x1676 <ICU_setEdgeDetectionType+0x48>
		break;
		case FALLING:
			CLEAR_BIT(TCCR1B, ICES1);
    1668:	ae e4       	ldi	r26, 0x4E	; 78
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ee e4       	ldi	r30, 0x4E	; 78
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8f 7b       	andi	r24, 0xBF	; 191
    1674:	8c 93       	st	X, r24
		break;
	}
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <ICU_getInputCaptureValue>:
 * 		Function that return the value of ICU last copied count of timer1.
 * [Args]		: Void.
 * [Return]		: ICU last copied count of timer1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    168a:	e6 e4       	ldi	r30, 0x46	; 70
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <ICU_clearTimerValue>:
 * 		Function that resets timer1 count value to ZERO.
 * [Args]		: Void.
 * [Return]		: Void
 */
void ICU_clearTimerValue(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    16a0:	ec e4       	ldi	r30, 0x4C	; 76
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	11 82       	std	Z+1, r1	; 0x01
    16a6:	10 82       	st	Z, r1
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <ICU_deInit>:
 * 		Function that de-initialize timer1, clearing all it's settings & values.
 * [Args]		: Void.
 * [Return]		: Void
 */
void ICU_deInit(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	Timer1_deInit();
    16b6:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <Timer1_deInit>
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <LCD_init>:
 * 			2. Setup the LCD data mode (4 BIT MODE/8 BIT MODE).
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_init(void)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	2e 97       	sbiw	r28, 0x0e	; 14
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
	/* Configure direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 ea       	ldi	r26, 0xA0	; 160
    1702:	b1 e4       	ldi	r27, 0x41	; 65
    1704:	8b 87       	std	Y+11, r24	; 0x0b
    1706:	9c 87       	std	Y+12, r25	; 0x0c
    1708:	ad 87       	std	Y+13, r26	; 0x0d
    170a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	6b 85       	ldd	r22, Y+11	; 0x0b
    170e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a ef       	ldi	r20, 0xFA	; 250
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8f 83       	std	Y+7, r24	; 0x07
    1726:	98 87       	std	Y+8, r25	; 0x08
    1728:	a9 87       	std	Y+9, r26	; 0x09
    172a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <LCD_init+0x8e>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <LCD_init+0x10c>
	else if (__tmp > 65535)
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	6b 85       	ldd	r22, Y+11	; 0x0b
    1768:	7c 85       	ldd	r23, Y+12	; 0x0c
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_init+0xee>
    1790:	88 ec       	ldi	r24, 0xC8	; 200
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_init+0xdc>
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <LCD_init+0xd0>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_init+0x118>
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	6f ef       	ldi	r22, 0xFF	; 255
    17e4:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPortDirection>
	/* Use two lines LCD in 8-bits data mode & (5x7) dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17e8:	88 e3       	ldi	r24, 0x38	; 56
    17ea:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Turn cursor off */
    17ee:	8c e0       	ldi	r24, 0x0C	; 12
    17f0:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
}
    17fa:	2e 96       	adiw	r28, 0x0e	; 14
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <LCD_sendCommand>:
 * [Args]	:
 * [In] command	: Indicates the command that is sent.
 * [Return]		: Void.
 */
void LCD_sendCommand(uint8 command)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	e9 97       	sbiw	r28, 0x39	; 57
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS = 0 */
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e8       	ldi	r26, 0x80	; 128
    1832:	bf e3       	ldi	r27, 0x3F	; 63
    1834:	8d ab       	std	Y+53, r24	; 0x35
    1836:	9e ab       	std	Y+54, r25	; 0x36
    1838:	af ab       	std	Y+55, r26	; 0x37
    183a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6d a9       	ldd	r22, Y+53	; 0x35
    183e:	7e a9       	ldd	r23, Y+54	; 0x36
    1840:	8f a9       	ldd	r24, Y+55	; 0x37
    1842:	98 ad       	ldd	r25, Y+56	; 0x38
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a ef       	ldi	r20, 0xFA	; 250
    184a:	54 e4       	ldi	r21, 0x44	; 68
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	89 ab       	std	Y+49, r24	; 0x31
    1856:	9a ab       	std	Y+50, r25	; 0x32
    1858:	ab ab       	std	Y+51, r26	; 0x33
    185a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    185c:	69 a9       	ldd	r22, Y+49	; 0x31
    185e:	7a a9       	ldd	r23, Y+50	; 0x32
    1860:	8b a9       	ldd	r24, Y+51	; 0x33
    1862:	9c a9       	ldd	r25, Y+52	; 0x34
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <LCD_sendCommand+0x72>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	98 ab       	std	Y+48, r25	; 0x30
    187a:	8f a7       	std	Y+47, r24	; 0x2f
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    187e:	69 a9       	ldd	r22, Y+49	; 0x31
    1880:	7a a9       	ldd	r23, Y+50	; 0x32
    1882:	8b a9       	ldd	r24, Y+51	; 0x33
    1884:	9c a9       	ldd	r25, Y+52	; 0x34
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6d a9       	ldd	r22, Y+53	; 0x35
    1898:	7e a9       	ldd	r23, Y+54	; 0x36
    189a:	8f a9       	ldd	r24, Y+55	; 0x37
    189c:	98 ad       	ldd	r25, Y+56	; 0x38
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	98 ab       	std	Y+48, r25	; 0x30
    18bc:	8f a7       	std	Y+47, r24	; 0x2f
    18be:	0f c0       	rjmp	.+30     	; 0x18de <LCD_sendCommand+0xd2>
    18c0:	88 ec       	ldi	r24, 0xC8	; 200
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9e a7       	std	Y+46, r25	; 0x2e
    18c6:	8d a7       	std	Y+45, r24	; 0x2d
    18c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_sendCommand+0xc0>
    18d0:	9e a7       	std	Y+46, r25	; 0x2e
    18d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d6:	98 a9       	ldd	r25, Y+48	; 0x30
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e0:	98 a9       	ldd	r25, Y+48	; 0x30
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <LCD_sendCommand+0xb4>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ea:	7a a9       	ldd	r23, Y+50	; 0x32
    18ec:	8b a9       	ldd	r24, Y+51	; 0x33
    18ee:	9c a9       	ldd	r25, Y+52	; 0x34
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	98 ab       	std	Y+48, r25	; 0x30
    18fa:	8f a7       	std	Y+47, r24	; 0x2f
    18fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1900:	9c a7       	std	Y+44, r25	; 0x2c
    1902:	8b a7       	std	Y+43, r24	; 0x2b
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_sendCommand+0xfc>
    190c:	9c a7       	std	Y+44, r25	; 0x2c
    190e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	62 e0       	ldi	r22, 0x02	; 2
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e8       	ldi	r26, 0x80	; 128
    1920:	bf e3       	ldi	r27, 0x3F	; 63
    1922:	8f a3       	std	Y+39, r24	; 0x27
    1924:	98 a7       	std	Y+40, r25	; 0x28
    1926:	a9 a7       	std	Y+41, r26	; 0x29
    1928:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	6f a1       	ldd	r22, Y+39	; 0x27
    192c:	78 a5       	ldd	r23, Y+40	; 0x28
    192e:	89 a5       	ldd	r24, Y+41	; 0x29
    1930:	9a a5       	ldd	r25, Y+42	; 0x2a
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a ef       	ldi	r20, 0xFA	; 250
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8b a3       	std	Y+35, r24	; 0x23
    1944:	9c a3       	std	Y+36, r25	; 0x24
    1946:	ad a3       	std	Y+37, r26	; 0x25
    1948:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    194a:	6b a1       	ldd	r22, Y+35	; 0x23
    194c:	7c a1       	ldd	r23, Y+36	; 0x24
    194e:	8d a1       	ldd	r24, Y+37	; 0x25
    1950:	9e a1       	ldd	r25, Y+38	; 0x26
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <LCD_sendCommand+0x160>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9a a3       	std	Y+34, r25	; 0x22
    1968:	89 a3       	std	Y+33, r24	; 0x21
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    196c:	6b a1       	ldd	r22, Y+35	; 0x23
    196e:	7c a1       	ldd	r23, Y+36	; 0x24
    1970:	8d a1       	ldd	r24, Y+37	; 0x25
    1972:	9e a1       	ldd	r25, Y+38	; 0x26
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	6f a1       	ldd	r22, Y+39	; 0x27
    1986:	78 a5       	ldd	r23, Y+40	; 0x28
    1988:	89 a5       	ldd	r24, Y+41	; 0x29
    198a:	9a a5       	ldd	r25, Y+42	; 0x2a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9a a3       	std	Y+34, r25	; 0x22
    19aa:	89 a3       	std	Y+33, r24	; 0x21
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <LCD_sendCommand+0x1c0>
    19ae:	88 ec       	ldi	r24, 0xC8	; 200
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	98 a3       	std	Y+32, r25	; 0x20
    19b4:	8f 8f       	std	Y+31, r24	; 0x1f
    19b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b8:	98 a1       	ldd	r25, Y+32	; 0x20
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_sendCommand+0x1ae>
    19be:	98 a3       	std	Y+32, r25	; 0x20
    19c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	89 a1       	ldd	r24, Y+33	; 0x21
    19c4:	9a a1       	ldd	r25, Y+34	; 0x22
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	9a a3       	std	Y+34, r25	; 0x22
    19ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	89 a1       	ldd	r24, Y+33	; 0x21
    19ce:	9a a1       	ldd	r25, Y+34	; 0x22
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <LCD_sendCommand+0x1a2>
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	6b a1       	ldd	r22, Y+35	; 0x23
    19d8:	7c a1       	ldd	r23, Y+36	; 0x24
    19da:	8d a1       	ldd	r24, Y+37	; 0x25
    19dc:	9e a1       	ldd	r25, Y+38	; 0x26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9a a3       	std	Y+34, r25	; 0x22
    19e8:	89 a3       	std	Y+33, r24	; 0x21
    19ea:	89 a1       	ldd	r24, Y+33	; 0x21
    19ec:	9a a1       	ldd	r25, Y+34	; 0x22
    19ee:	9e 8f       	std	Y+30, r25	; 0x1e
    19f0:	8d 8f       	std	Y+29, r24	; 0x1d
    19f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_sendCommand+0x1ea>
    19fa:	9e 8f       	std	Y+30, r25	; 0x1e
    19fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190 ns */

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* Write to the data bus from D0 to D7 */
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	69 ad       	ldd	r22, Y+57	; 0x39
    1a16:	0e 94 ef 09 	call	0x13de	; 0x13de <GPIO_writePort>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a0 e8       	ldi	r26, 0x80	; 128
    1a20:	bf e3       	ldi	r27, 0x3F	; 63
    1a22:	89 8f       	std	Y+25, r24	; 0x19
    1a24:	9a 8f       	std	Y+26, r25	; 0x1a
    1a26:	ab 8f       	std	Y+27, r26	; 0x1b
    1a28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8d 8b       	std	Y+21, r24	; 0x15
    1a44:	9e 8b       	std	Y+22, r25	; 0x16
    1a46:	af 8b       	std	Y+23, r26	; 0x17
    1a48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <LCD_sendCommand+0x260>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    1a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a70:	8f 89       	ldd	r24, Y+23	; 0x17
    1a72:	98 8d       	ldd	r25, Y+24	; 0x18
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	69 8d       	ldd	r22, Y+25	; 0x19
    1a86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <LCD_sendCommand+0x2c0>
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
    1ab6:	89 89       	ldd	r24, Y+17	; 0x11
    1ab8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_sendCommand+0x2ae>
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9c 8b       	std	Y+20, r25	; 0x14
    1aca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ace:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <LCD_sendCommand+0x2a2>
    1ad4:	14 c0       	rjmp	.+40     	; 0x1afe <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ada:	8f 89       	ldd	r24, Y+23	; 0x17
    1adc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	98 8b       	std	Y+16, r25	; 0x10
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
    1af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af4:	98 89       	ldd	r25, Y+16	; 0x10
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_sendCommand+0x2ea>
    1afa:	98 8b       	std	Y+16, r25	; 0x10
    1afc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	8b 87       	std	Y+11, r24	; 0x0b
    1b12:	9c 87       	std	Y+12, r25	; 0x0c
    1b14:	ad 87       	std	Y+13, r26	; 0x0d
    1b16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8f 83       	std	Y+7, r24	; 0x07
    1b32:	98 87       	std	Y+8, r25	; 0x08
    1b34:	a9 87       	std	Y+9, r26	; 0x09
    1b36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_sendCommand+0x34e>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_sendCommand+0x3cc>
	else if (__tmp > 65535)
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_sendCommand+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_sendCommand+0x3ae>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_sendCommand+0x39c>
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_sendCommand+0x390>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <LCD_sendCommand+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc6:	78 85       	ldd	r23, Y+8	; 0x08
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x3d8>
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    1bec:	e9 96       	adiw	r28, 0x39	; 57
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <LCD_displayCharacter>:
 * [Args]	:
 * [In] data	: Indicates the character that is sent.
 * [Return]		: Void.
 */
void LCD_displayCharacter(uint8 data)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	e9 97       	sbiw	r28, 0x39	; 57
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS = 1 */
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a0 e8       	ldi	r26, 0x80	; 128
    1c24:	bf e3       	ldi	r27, 0x3F	; 63
    1c26:	8d ab       	std	Y+53, r24	; 0x35
    1c28:	9e ab       	std	Y+54, r25	; 0x36
    1c2a:	af ab       	std	Y+55, r26	; 0x37
    1c2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c30:	7e a9       	ldd	r23, Y+54	; 0x36
    1c32:	8f a9       	ldd	r24, Y+55	; 0x37
    1c34:	98 ad       	ldd	r25, Y+56	; 0x38
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a ef       	ldi	r20, 0xFA	; 250
    1c3c:	54 e4       	ldi	r21, 0x44	; 68
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	89 ab       	std	Y+49, r24	; 0x31
    1c48:	9a ab       	std	Y+50, r25	; 0x32
    1c4a:	ab ab       	std	Y+51, r26	; 0x33
    1c4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c50:	7a a9       	ldd	r23, Y+50	; 0x32
    1c52:	8b a9       	ldd	r24, Y+51	; 0x33
    1c54:	9c a9       	ldd	r25, Y+52	; 0x34
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
    1c6e:	3f c0       	rjmp	.+126    	; 0x1cee <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c70:	69 a9       	ldd	r22, Y+49	; 0x31
    1c72:	7a a9       	ldd	r23, Y+50	; 0x32
    1c74:	8b a9       	ldd	r24, Y+51	; 0x33
    1c76:	9c a9       	ldd	r25, Y+52	; 0x34
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	4c f5       	brge	.+82     	; 0x1cda <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c88:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <LCD_displayCharacter+0xd2>
    1cb2:	88 ec       	ldi	r24, 0xC8	; 200
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9e a7       	std	Y+46, r25	; 0x2e
    1cb8:	8d a7       	std	Y+45, r24	; 0x2d
    1cba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_displayCharacter+0xc0>
    1cc2:	9e a7       	std	Y+46, r25	; 0x2e
    1cc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	98 ab       	std	Y+48, r25	; 0x30
    1cce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <LCD_displayCharacter+0xb4>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	69 a9       	ldd	r22, Y+49	; 0x31
    1cdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cde:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	98 ab       	std	Y+48, r25	; 0x30
    1cec:	8f a7       	std	Y+47, r24	; 0x2f
    1cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf2:	9c a7       	std	Y+44, r25	; 0x2c
    1cf4:	8b a7       	std	Y+43, r24	; 0x2b
    1cf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_displayCharacter+0xfc>
    1cfe:	9c a7       	std	Y+44, r25	; 0x2c
    1d00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	bf e3       	ldi	r27, 0x3F	; 63
    1d14:	8f a3       	std	Y+39, r24	; 0x27
    1d16:	98 a7       	std	Y+40, r25	; 0x28
    1d18:	a9 a7       	std	Y+41, r26	; 0x29
    1d1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d20:	89 a5       	ldd	r24, Y+41	; 0x29
    1d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a ef       	ldi	r20, 0xFA	; 250
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8b a3       	std	Y+35, r24	; 0x23
    1d36:	9c a3       	std	Y+36, r25	; 0x24
    1d38:	ad a3       	std	Y+37, r26	; 0x25
    1d3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d40:	8d a1       	ldd	r24, Y+37	; 0x25
    1d42:	9e a1       	ldd	r25, Y+38	; 0x26
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d60:	7c a1       	ldd	r23, Y+36	; 0x24
    1d62:	8d a1       	ldd	r24, Y+37	; 0x25
    1d64:	9e a1       	ldd	r25, Y+38	; 0x26
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6f a1       	ldd	r22, Y+39	; 0x27
    1d78:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a a3       	std	Y+34, r25	; 0x22
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <LCD_displayCharacter+0x1c0>
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	98 a3       	std	Y+32, r25	; 0x20
    1da6:	8f 8f       	std	Y+31, r24	; 0x1f
    1da8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1daa:	98 a1       	ldd	r25, Y+32	; 0x20
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_displayCharacter+0x1ae>
    1db0:	98 a3       	std	Y+32, r25	; 0x20
    1db2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	89 a1       	ldd	r24, Y+33	; 0x21
    1db6:	9a a1       	ldd	r25, Y+34	; 0x22
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9a a3       	std	Y+34, r25	; 0x22
    1dbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <LCD_displayCharacter+0x1a2>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dca:	7c a1       	ldd	r23, Y+36	; 0x24
    1dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dce:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9a a3       	std	Y+34, r25	; 0x22
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dde:	9a a1       	ldd	r25, Y+34	; 0x22
    1de0:	9e 8f       	std	Y+30, r25	; 0x1e
    1de2:	8d 8f       	std	Y+29, r24	; 0x1d
    1de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_displayCharacter+0x1ea>
    1dec:	9e 8f       	std	Y+30, r25	; 0x1e
    1dee:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* Write to the data bus from D0 to D7 */
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	69 ad       	ldd	r22, Y+57	; 0x39
    1df4:	0e 94 ef 09 	call	0x13de	; 0x13de <GPIO_writePort>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e8       	ldi	r26, 0x80	; 128
    1dfe:	bf e3       	ldi	r27, 0x3F	; 63
    1e00:	89 8f       	std	Y+25, r24	; 0x19
    1e02:	9a 8f       	std	Y+26, r25	; 0x1a
    1e04:	ab 8f       	std	Y+27, r26	; 0x1b
    1e06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8d 8b       	std	Y+21, r24	; 0x15
    1e22:	9e 8b       	std	Y+22, r25	; 0x16
    1e24:	af 8b       	std	Y+23, r26	; 0x17
    1e26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 8b       	std	Y+20, r25	; 0x14
    1e46:	8b 8b       	std	Y+19, r24	; 0x13
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e50:	98 8d       	ldd	r25, Y+24	; 0x18
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	69 8d       	ldd	r22, Y+25	; 0x19
    1e64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <LCD_displayCharacter+0x2ac>
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9a 8b       	std	Y+18, r25	; 0x12
    1e92:	89 8b       	std	Y+17, r24	; 0x11
    1e94:	89 89       	ldd	r24, Y+17	; 0x11
    1e96:	9a 89       	ldd	r25, Y+18	; 0x12
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_displayCharacter+0x29a>
    1e9c:	9a 8b       	std	Y+18, r25	; 0x12
    1e9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9c 8b       	std	Y+20, r25	; 0x14
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1eac:	9c 89       	ldd	r25, Y+20	; 0x14
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <LCD_displayCharacter+0x28e>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	8b 8b       	std	Y+19, r24	; 0x13
    1ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ecc:	98 8b       	std	Y+16, r25	; 0x10
    1ece:	8f 87       	std	Y+15, r24	; 0x0f
    1ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed2:	98 89       	ldd	r25, Y+16	; 0x10
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_displayCharacter+0x2d6>
    1ed8:	98 8b       	std	Y+16, r25	; 0x10
    1eda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	62 e0       	ldi	r22, 0x02	; 2
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	8b 87       	std	Y+11, r24	; 0x0b
    1ef0:	9c 87       	std	Y+12, r25	; 0x0c
    1ef2:	ad 87       	std	Y+13, r26	; 0x0d
    1ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8f 83       	std	Y+7, r24	; 0x07
    1f10:	98 87       	std	Y+8, r25	; 0x08
    1f12:	a9 87       	std	Y+9, r26	; 0x09
    1f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_displayCharacter+0x39a>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_displayCharacter+0x388>
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_displayCharacter+0x37c>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_displayCharacter+0x3c4>
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    1fca:	e9 96       	adiw	r28, 0x39	; 57
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <LCD_displayString>:
 * [Args] 	:
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayString(const uint8 *string)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <LCD_displayString+0x6>
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	9b 83       	std	Y+3, r25	; 0x03
    1fea:	8a 83       	std	Y+2, r24	; 0x02
	/* Display each character in the recieved string array */
	uint8 i = 0;
    1fec:	19 82       	std	Y+1, r1	; 0x01
    1fee:	0e c0       	rjmp	.+28     	; 0x200c <LCD_displayString+0x30>
	while (string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	e2 0f       	add	r30, r18
    1ffe:	f3 1f       	adc	r31, r19
    2000:	80 81       	ld	r24, Z
    2002:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <LCD_displayCharacter>
		i++;
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const uint8 *string)
{
	/* Display each character in the recieved string array */
	uint8 i = 0;
	while (string[i] != '\0')
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	9b 81       	ldd	r25, Y+3	; 0x03
    2016:	fc 01       	movw	r30, r24
    2018:	e2 0f       	add	r30, r18
    201a:	f3 1f       	adc	r31, r19
    201c:	80 81       	ld	r24, Z
    201e:	88 23       	and	r24, r24
    2020:	39 f7       	brne	.-50     	; 0x1ff0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*string);
		string++;
	}
	 *********************************************************/
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <LCD_moveCursor>:
 * [In] row		: Indicates the row required.
 * [In] column	: Indicates the column required.
 * [Return]		: Void.
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <LCD_moveCursor+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <LCD_moveCursor+0x8>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
	/* Calculate the address in the LCD DDRAM, */
	/* then move the LCD cursor to this specific address. */
	switch (row)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	3c 83       	std	Y+4, r19	; 0x04
    2046:	2b 83       	std	Y+3, r18	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	91 05       	cpc	r25, r1
    2050:	d1 f0       	breq	.+52     	; 0x2086 <LCD_moveCursor+0x58>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	2c f4       	brge	.+10     	; 0x2066 <LCD_moveCursor+0x38>
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	61 f0       	breq	.+24     	; 0x207c <LCD_moveCursor+0x4e>
    2064:	21 c0       	rjmp	.+66     	; 0x20a8 <LCD_moveCursor+0x7a>
    2066:	2b 81       	ldd	r18, Y+3	; 0x03
    2068:	3c 81       	ldd	r19, Y+4	; 0x04
    206a:	22 30       	cpi	r18, 0x02	; 2
    206c:	31 05       	cpc	r19, r1
    206e:	89 f0       	breq	.+34     	; 0x2092 <LCD_moveCursor+0x64>
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	91 f0       	breq	.+36     	; 0x209e <LCD_moveCursor+0x70>
    207a:	16 c0       	rjmp	.+44     	; 0x20a8 <LCD_moveCursor+0x7a>
	{
		case 0:
			LCD_sendCommand(column | LCD_SET_CURSOR_LOCATION);
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	80 68       	ori	r24, 0x80	; 128
    2080:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
    2084:	11 c0       	rjmp	.+34     	; 0x20a8 <LCD_moveCursor+0x7a>
		break;
		case 1:
			LCD_sendCommand((column + 0x40) | LCD_SET_CURSOR_LOCATION);
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	80 5c       	subi	r24, 0xC0	; 192
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
    2090:	0b c0       	rjmp	.+22     	; 0x20a8 <LCD_moveCursor+0x7a>
		break;
		case 2:
			LCD_sendCommand((column + 0x10) | LCD_SET_CURSOR_LOCATION);
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	80 5f       	subi	r24, 0xF0	; 240
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <LCD_moveCursor+0x7a>
		break;
		case 3:
			LCD_sendCommand((column + 0x50) | LCD_SET_CURSOR_LOCATION);
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 5b       	subi	r24, 0xB0	; 176
    20a2:	80 68       	ori	r24, 0x80	; 128
    20a4:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
		break;
	}
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_displayStringRowColumn>:
 * [In] column	: Indicates the column required.
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *string)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <LCD_displayStringRowColumn+0x6>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LCD_displayStringRowColumn+0x8>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	6a 83       	std	Y+2, r22	; 0x02
    20c6:	5c 83       	std	Y+4, r21	; 0x04
    20c8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column); /* Go to to the specified LCD position */
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	6a 81       	ldd	r22, Y+2	; 0x02
    20ce:	0e 94 17 10 	call	0x202e	; 0x202e <LCD_moveCursor>
	LCD_displayString(string); /* Display string */
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_displayString>
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <LCD_intgerToString>:
 * [Args]	:
 * [In] data	: Indicates the decimal value required.
 * [Return]		: Void.
 */
void LCD_intgerToString(uint16 data)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	62 97       	sbiw	r28, 0x12	; 18
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	9a 8b       	std	Y+18, r25	; 0x12
    20fe:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; /* Hold the ASCII result */
	itoa(data, buffer, 10); /* Convert data to it's ASCII value - 10 for decimal */
    2100:	89 89       	ldd	r24, Y+17	; 0x11
    2102:	9a 89       	ldd	r25, Y+18	; 0x12
    2104:	9e 01       	movw	r18, r28
    2106:	2f 5f       	subi	r18, 0xFF	; 255
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	b9 01       	movw	r22, r18
    210c:	4a e0       	ldi	r20, 0x0A	; 10
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	0e 94 52 18 	call	0x30a4	; 0x30a4 <itoa>
	LCD_displayString(buffer); /* Display string */
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_displayString>
}
    211c:	62 96       	adiw	r28, 0x12	; 18
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <LCD_clearScreen>:
 * 		Send the clear screen command
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_clearScreen(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_sendCommand>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <__vector_9>:
 * [Interrupt Vector]	: TIMER1_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer1.
 */
ISR(TIMER1_OVF_vect)
{
    2142:	1f 92       	push	r1
    2144:	0f 92       	push	r0
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	0f 92       	push	r0
    214a:	11 24       	eor	r1, r1
    214c:	2f 93       	push	r18
    214e:	3f 93       	push	r19
    2150:	4f 93       	push	r20
    2152:	5f 93       	push	r21
    2154:	6f 93       	push	r22
    2156:	7f 93       	push	r23
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25
    215c:	af 93       	push	r26
    215e:	bf 93       	push	r27
    2160:	ef 93       	push	r30
    2162:	ff 93       	push	r31
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    216c:	80 91 7c 01 	lds	r24, 0x017C
    2170:	90 91 7d 01 	lds	r25, 0x017D
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	29 f0       	breq	.+10     	; 0x2182 <__vector_9+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    2178:	e0 91 7c 01 	lds	r30, 0x017C
    217c:	f0 91 7d 01 	lds	r31, 0x017D
    2180:	09 95       	icall
	}
}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	ff 91       	pop	r31
    2188:	ef 91       	pop	r30
    218a:	bf 91       	pop	r27
    218c:	af 91       	pop	r26
    218e:	9f 91       	pop	r25
    2190:	8f 91       	pop	r24
    2192:	7f 91       	pop	r23
    2194:	6f 91       	pop	r22
    2196:	5f 91       	pop	r21
    2198:	4f 91       	pop	r20
    219a:	3f 91       	pop	r19
    219c:	2f 91       	pop	r18
    219e:	0f 90       	pop	r0
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	0f 90       	pop	r0
    21a4:	1f 90       	pop	r1
    21a6:	18 95       	reti

000021a8 <__vector_7>:
 * [Interrupt Vector]	: TIMER1_COMPA_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit A.
 */
ISR(TIMER1_COMPA_vect)
{
    21a8:	1f 92       	push	r1
    21aa:	0f 92       	push	r0
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	0f 92       	push	r0
    21b0:	11 24       	eor	r1, r1
    21b2:	2f 93       	push	r18
    21b4:	3f 93       	push	r19
    21b6:	4f 93       	push	r20
    21b8:	5f 93       	push	r21
    21ba:	6f 93       	push	r22
    21bc:	7f 93       	push	r23
    21be:	8f 93       	push	r24
    21c0:	9f 93       	push	r25
    21c2:	af 93       	push	r26
    21c4:	bf 93       	push	r27
    21c6:	ef 93       	push	r30
    21c8:	ff 93       	push	r31
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    21d2:	80 91 7c 01 	lds	r24, 0x017C
    21d6:	90 91 7d 01 	lds	r25, 0x017D
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	29 f0       	breq	.+10     	; 0x21e8 <__vector_7+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    21de:	e0 91 7c 01 	lds	r30, 0x017C
    21e2:	f0 91 7d 01 	lds	r31, 0x017D
    21e6:	09 95       	icall
	}
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	ff 91       	pop	r31
    21ee:	ef 91       	pop	r30
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <__vector_8>:
 * [Interrupt Vector]	: TIMER1_COMPB_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit B.
 */
ISR(TIMER1_COMPB_vect)
{
    220e:	1f 92       	push	r1
    2210:	0f 92       	push	r0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	0f 92       	push	r0
    2216:	11 24       	eor	r1, r1
    2218:	2f 93       	push	r18
    221a:	3f 93       	push	r19
    221c:	4f 93       	push	r20
    221e:	5f 93       	push	r21
    2220:	6f 93       	push	r22
    2222:	7f 93       	push	r23
    2224:	8f 93       	push	r24
    2226:	9f 93       	push	r25
    2228:	af 93       	push	r26
    222a:	bf 93       	push	r27
    222c:	ef 93       	push	r30
    222e:	ff 93       	push	r31
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitB_Ptr != NULL_PTR) /* If callback function pointer is not void */
    2238:	80 91 7e 01 	lds	r24, 0x017E
    223c:	90 91 7f 01 	lds	r25, 0x017F
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	29 f0       	breq	.+10     	; 0x224e <__vector_8+0x40>
	{
		(*g_timer1CallBackUnitB_Ptr)(); /* Execute callback function */
    2244:	e0 91 7e 01 	lds	r30, 0x017E
    2248:	f0 91 7f 01 	lds	r31, 0x017F
    224c:	09 95       	icall
	}
}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	ff 91       	pop	r31
    2254:	ef 91       	pop	r30
    2256:	bf 91       	pop	r27
    2258:	af 91       	pop	r26
    225a:	9f 91       	pop	r25
    225c:	8f 91       	pop	r24
    225e:	7f 91       	pop	r23
    2260:	6f 91       	pop	r22
    2262:	5f 91       	pop	r21
    2264:	4f 91       	pop	r20
    2266:	3f 91       	pop	r19
    2268:	2f 91       	pop	r18
    226a:	0f 90       	pop	r0
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	0f 90       	pop	r0
    2270:	1f 90       	pop	r1
    2272:	18 95       	reti

00002274 <Timer1_init>:
#endif

#if (TIMER1_ENABLE == TRUE)

void Timer1_init(const Timer_initConfig *timerConfig)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	2e 97       	sbiw	r28, 0x0e	; 14
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR1A);
    228c:	ef e4       	ldi	r30, 0x4F	; 79
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	20 81       	ld	r18, Z
    2292:	ef e4       	ldi	r30, 0x4F	; 79
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    2298:	ee e4       	ldi	r30, 0x4E	; 78
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	30 81       	ld	r19, Z
    229e:	ee e4       	ldi	r30, 0x4E	; 78
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    22a4:	e9 81       	ldd	r30, Y+1	; 0x01
    22a6:	fa 81       	ldd	r31, Y+2	; 0x02
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 70       	andi	r24, 0x0F	; 15
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3c 87       	std	Y+12, r19	; 0x0c
    22b2:	2b 87       	std	Y+11, r18	; 0x0b
    22b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    22b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    22b8:	87 30       	cpi	r24, 0x07	; 7
    22ba:	91 05       	cpc	r25, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <Timer1_init+0x4c>
    22be:	40 c1       	rjmp	.+640    	; 0x2540 <Timer1_init+0x2cc>
    22c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    22c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    22c4:	28 30       	cpi	r18, 0x08	; 8
    22c6:	31 05       	cpc	r19, r1
    22c8:	4c f5       	brge	.+82     	; 0x231c <Timer1_init+0xa8>
    22ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    22cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	91 05       	cpc	r25, r1
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <Timer1_init+0x62>
    22d4:	b3 c0       	rjmp	.+358    	; 0x243c <Timer1_init+0x1c8>
    22d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    22d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    22da:	24 30       	cpi	r18, 0x04	; 4
    22dc:	31 05       	cpc	r19, r1
    22de:	8c f4       	brge	.+34     	; 0x2302 <Timer1_init+0x8e>
    22e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <Timer1_init+0x78>
    22ea:	6e c0       	rjmp	.+220    	; 0x23c8 <Timer1_init+0x154>
    22ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    22ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    22f0:	22 30       	cpi	r18, 0x02	; 2
    22f2:	31 05       	cpc	r19, r1
    22f4:	0c f0       	brlt	.+2      	; 0x22f8 <Timer1_init+0x84>
    22f6:	85 c0       	rjmp	.+266    	; 0x2402 <Timer1_init+0x18e>
    22f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	c9 f1       	breq	.+114    	; 0x2372 <Timer1_init+0xfe>
    2300:	14 c2       	rjmp	.+1064   	; 0x272a <Timer1_init+0x4b6>
    2302:	2b 85       	ldd	r18, Y+11	; 0x0b
    2304:	3c 85       	ldd	r19, Y+12	; 0x0c
    2306:	25 30       	cpi	r18, 0x05	; 5
    2308:	31 05       	cpc	r19, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <Timer1_init+0x9a>
    230c:	df c0       	rjmp	.+446    	; 0x24cc <Timer1_init+0x258>
    230e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2310:	9c 85       	ldd	r25, Y+12	; 0x0c
    2312:	86 30       	cpi	r24, 0x06	; 6
    2314:	91 05       	cpc	r25, r1
    2316:	0c f0       	brlt	.+2      	; 0x231a <Timer1_init+0xa6>
    2318:	f6 c0       	rjmp	.+492    	; 0x2506 <Timer1_init+0x292>
    231a:	ad c0       	rjmp	.+346    	; 0x2476 <Timer1_init+0x202>
    231c:	2b 85       	ldd	r18, Y+11	; 0x0b
    231e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2320:	2b 30       	cpi	r18, 0x0B	; 11
    2322:	31 05       	cpc	r19, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <Timer1_init+0xb4>
    2326:	80 c1       	rjmp	.+768    	; 0x2628 <Timer1_init+0x3b4>
    2328:	8b 85       	ldd	r24, Y+11	; 0x0b
    232a:	9c 85       	ldd	r25, Y+12	; 0x0c
    232c:	8c 30       	cpi	r24, 0x0C	; 12
    232e:	91 05       	cpc	r25, r1
    2330:	6c f4       	brge	.+26     	; 0x234c <Timer1_init+0xd8>
    2332:	2b 85       	ldd	r18, Y+11	; 0x0b
    2334:	3c 85       	ldd	r19, Y+12	; 0x0c
    2336:	29 30       	cpi	r18, 0x09	; 9
    2338:	31 05       	cpc	r19, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <Timer1_init+0xca>
    233c:	3b c1       	rjmp	.+630    	; 0x25b4 <Timer1_init+0x340>
    233e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2340:	9c 85       	ldd	r25, Y+12	; 0x0c
    2342:	8a 30       	cpi	r24, 0x0A	; 10
    2344:	91 05       	cpc	r25, r1
    2346:	0c f0       	brlt	.+2      	; 0x234a <Timer1_init+0xd6>
    2348:	52 c1       	rjmp	.+676    	; 0x25ee <Timer1_init+0x37a>
    234a:	17 c1       	rjmp	.+558    	; 0x257a <Timer1_init+0x306>
    234c:	2b 85       	ldd	r18, Y+11	; 0x0b
    234e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2350:	2e 30       	cpi	r18, 0x0E	; 14
    2352:	31 05       	cpc	r19, r1
    2354:	09 f4       	brne	.+2      	; 0x2358 <Timer1_init+0xe4>
    2356:	b0 c1       	rjmp	.+864    	; 0x26b8 <Timer1_init+0x444>
    2358:	8b 85       	ldd	r24, Y+11	; 0x0b
    235a:	9c 85       	ldd	r25, Y+12	; 0x0c
    235c:	8f 30       	cpi	r24, 0x0F	; 15
    235e:	91 05       	cpc	r25, r1
    2360:	09 f4       	brne	.+2      	; 0x2364 <Timer1_init+0xf0>
    2362:	c7 c1       	rjmp	.+910    	; 0x26f2 <Timer1_init+0x47e>
    2364:	2b 85       	ldd	r18, Y+11	; 0x0b
    2366:	3c 85       	ldd	r19, Y+12	; 0x0c
    2368:	2c 30       	cpi	r18, 0x0C	; 12
    236a:	31 05       	cpc	r19, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <Timer1_init+0xfc>
    236e:	79 c1       	rjmp	.+754    	; 0x2662 <Timer1_init+0x3ee>
    2370:	dc c1       	rjmp	.+952    	; 0x272a <Timer1_init+0x4b6>
	{
		case TIMER16BIT_NORMAL:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    2372:	af e4       	ldi	r26, 0x4F	; 79
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ef e4       	ldi	r30, 0x4F	; 79
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 60       	ori	r24, 0x08	; 8
    237e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    2380:	af e4       	ldi	r26, 0x4F	; 79
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	ef e4       	ldi	r30, 0x4F	; 79
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	84 60       	ori	r24, 0x04	; 4
    238c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    238e:	ae e4       	ldi	r26, 0x4E	; 78
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ee e4       	ldi	r30, 0x4E	; 78
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8f 7e       	andi	r24, 0xEF	; 239
    239a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    239c:	ae e4       	ldi	r26, 0x4E	; 78
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ee e4       	ldi	r30, 0x4E	; 78
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	87 7f       	andi	r24, 0xF7	; 247
    23a8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    23aa:	af e4       	ldi	r26, 0x4F	; 79
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ef e4       	ldi	r30, 0x4F	; 79
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8d 7f       	andi	r24, 0xFD	; 253
    23b6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    23b8:	af e4       	ldi	r26, 0x4F	; 79
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ef e4       	ldi	r30, 0x4F	; 79
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8e 7f       	andi	r24, 0xFE	; 254
    23c4:	8c 93       	st	X, r24
    23c6:	b1 c1       	rjmp	.+866    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    23c8:	ae e4       	ldi	r26, 0x4E	; 78
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ee e4       	ldi	r30, 0x4E	; 78
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7e       	andi	r24, 0xEF	; 239
    23d4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    23d6:	ae e4       	ldi	r26, 0x4E	; 78
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	ee e4       	ldi	r30, 0x4E	; 78
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	87 7f       	andi	r24, 0xF7	; 247
    23e2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    23e4:	af e4       	ldi	r26, 0x4F	; 79
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ef e4       	ldi	r30, 0x4F	; 79
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	8d 7f       	andi	r24, 0xFD	; 253
    23f0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    23f2:	af e4       	ldi	r26, 0x4F	; 79
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	ef e4       	ldi	r30, 0x4F	; 79
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	81 60       	ori	r24, 0x01	; 1
    23fe:	8c 93       	st	X, r24
    2400:	94 c1       	rjmp	.+808    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    2402:	ae e4       	ldi	r26, 0x4E	; 78
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ee e4       	ldi	r30, 0x4E	; 78
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8f 7e       	andi	r24, 0xEF	; 239
    240e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2410:	ae e4       	ldi	r26, 0x4E	; 78
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ee e4       	ldi	r30, 0x4E	; 78
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	87 7f       	andi	r24, 0xF7	; 247
    241c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    241e:	af e4       	ldi	r26, 0x4F	; 79
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	ef e4       	ldi	r30, 0x4F	; 79
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	82 60       	ori	r24, 0x02	; 2
    242a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    242c:	af e4       	ldi	r26, 0x4F	; 79
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ef e4       	ldi	r30, 0x4F	; 79
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8e 7f       	andi	r24, 0xFE	; 254
    2438:	8c 93       	st	X, r24
    243a:	77 c1       	rjmp	.+750    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    243c:	ae e4       	ldi	r26, 0x4E	; 78
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	ee e4       	ldi	r30, 0x4E	; 78
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	8f 7e       	andi	r24, 0xEF	; 239
    2448:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    244a:	ae e4       	ldi	r26, 0x4E	; 78
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	ee e4       	ldi	r30, 0x4E	; 78
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	87 7f       	andi	r24, 0xF7	; 247
    2456:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2458:	af e4       	ldi	r26, 0x4F	; 79
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ef e4       	ldi	r30, 0x4F	; 79
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	82 60       	ori	r24, 0x02	; 2
    2464:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    2466:	af e4       	ldi	r26, 0x4F	; 79
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ef e4       	ldi	r30, 0x4F	; 79
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	81 60       	ori	r24, 0x01	; 1
    2472:	8c 93       	st	X, r24
    2474:	5a c1       	rjmp	.+692    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_OCR1A:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    2476:	af e4       	ldi	r26, 0x4F	; 79
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	ef e4       	ldi	r30, 0x4F	; 79
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	88 60       	ori	r24, 0x08	; 8
    2482:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    2484:	af e4       	ldi	r26, 0x4F	; 79
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	ef e4       	ldi	r30, 0x4F	; 79
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	84 60       	ori	r24, 0x04	; 4
    2490:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    2492:	ae e4       	ldi	r26, 0x4E	; 78
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ee e4       	ldi	r30, 0x4E	; 78
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	8f 7e       	andi	r24, 0xEF	; 239
    249e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    24a0:	ae e4       	ldi	r26, 0x4E	; 78
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ee e4       	ldi	r30, 0x4E	; 78
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	88 60       	ori	r24, 0x08	; 8
    24ac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    24ae:	af e4       	ldi	r26, 0x4F	; 79
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8d 7f       	andi	r24, 0xFD	; 253
    24ba:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    24bc:	af e4       	ldi	r26, 0x4F	; 79
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ef e4       	ldi	r30, 0x4F	; 79
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8e 7f       	andi	r24, 0xFE	; 254
    24c8:	8c 93       	st	X, r24
    24ca:	2f c1       	rjmp	.+606    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    24cc:	ae e4       	ldi	r26, 0x4E	; 78
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	ee e4       	ldi	r30, 0x4E	; 78
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	8f 7e       	andi	r24, 0xEF	; 239
    24d8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    24da:	ae e4       	ldi	r26, 0x4E	; 78
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	ee e4       	ldi	r30, 0x4E	; 78
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	88 60       	ori	r24, 0x08	; 8
    24e6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    24e8:	af e4       	ldi	r26, 0x4F	; 79
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ef e4       	ldi	r30, 0x4F	; 79
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8d 7f       	andi	r24, 0xFD	; 253
    24f4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    24f6:	af e4       	ldi	r26, 0x4F	; 79
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	ef e4       	ldi	r30, 0x4F	; 79
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	8c 93       	st	X, r24
    2504:	12 c1       	rjmp	.+548    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    2506:	ae e4       	ldi	r26, 0x4E	; 78
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ee e4       	ldi	r30, 0x4E	; 78
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	8f 7e       	andi	r24, 0xEF	; 239
    2512:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2514:	ae e4       	ldi	r26, 0x4E	; 78
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ee e4       	ldi	r30, 0x4E	; 78
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	88 60       	ori	r24, 0x08	; 8
    2520:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2522:	af e4       	ldi	r26, 0x4F	; 79
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ef e4       	ldi	r30, 0x4F	; 79
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	82 60       	ori	r24, 0x02	; 2
    252e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2530:	af e4       	ldi	r26, 0x4F	; 79
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ef e4       	ldi	r30, 0x4F	; 79
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8e 7f       	andi	r24, 0xFE	; 254
    253c:	8c 93       	st	X, r24
    253e:	f5 c0       	rjmp	.+490    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    2540:	ae e4       	ldi	r26, 0x4E	; 78
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	ee e4       	ldi	r30, 0x4E	; 78
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8f 7e       	andi	r24, 0xEF	; 239
    254c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    254e:	ae e4       	ldi	r26, 0x4E	; 78
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ee e4       	ldi	r30, 0x4E	; 78
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	88 60       	ori	r24, 0x08	; 8
    255a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    255c:	af e4       	ldi	r26, 0x4F	; 79
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ef e4       	ldi	r30, 0x4F	; 79
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	82 60       	ori	r24, 0x02	; 2
    2568:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    256a:	af e4       	ldi	r26, 0x4F	; 79
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ef e4       	ldi	r30, 0x4F	; 79
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	81 60       	ori	r24, 0x01	; 1
    2576:	8c 93       	st	X, r24
    2578:	d8 c0       	rjmp	.+432    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    257a:	ae e4       	ldi	r26, 0x4E	; 78
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	ee e4       	ldi	r30, 0x4E	; 78
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	80 61       	ori	r24, 0x10	; 16
    2586:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2588:	ae e4       	ldi	r26, 0x4E	; 78
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	ee e4       	ldi	r30, 0x4E	; 78
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	87 7f       	andi	r24, 0xF7	; 247
    2594:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    2596:	af e4       	ldi	r26, 0x4F	; 79
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ef e4       	ldi	r30, 0x4F	; 79
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	8d 7f       	andi	r24, 0xFD	; 253
    25a2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    25a4:	af e4       	ldi	r26, 0x4F	; 79
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	ef e4       	ldi	r30, 0x4F	; 79
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	8e 7f       	andi	r24, 0xFE	; 254
    25b0:	8c 93       	st	X, r24
    25b2:	bb c0       	rjmp	.+374    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    25b4:	ae e4       	ldi	r26, 0x4E	; 78
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	ee e4       	ldi	r30, 0x4E	; 78
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 61       	ori	r24, 0x10	; 16
    25c0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    25c2:	ae e4       	ldi	r26, 0x4E	; 78
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ee e4       	ldi	r30, 0x4E	; 78
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	87 7f       	andi	r24, 0xF7	; 247
    25ce:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    25d0:	af e4       	ldi	r26, 0x4F	; 79
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ef e4       	ldi	r30, 0x4F	; 79
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8d 7f       	andi	r24, 0xFD	; 253
    25dc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    25de:	af e4       	ldi	r26, 0x4F	; 79
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	ef e4       	ldi	r30, 0x4F	; 79
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	8c 93       	st	X, r24
    25ec:	9e c0       	rjmp	.+316    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    25ee:	ae e4       	ldi	r26, 0x4E	; 78
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ee e4       	ldi	r30, 0x4E	; 78
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 61       	ori	r24, 0x10	; 16
    25fa:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    25fc:	ae e4       	ldi	r26, 0x4E	; 78
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	ee e4       	ldi	r30, 0x4E	; 78
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	87 7f       	andi	r24, 0xF7	; 247
    2608:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    260a:	af e4       	ldi	r26, 0x4F	; 79
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ef e4       	ldi	r30, 0x4F	; 79
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	82 60       	ori	r24, 0x02	; 2
    2616:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2618:	af e4       	ldi	r26, 0x4F	; 79
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	ef e4       	ldi	r30, 0x4F	; 79
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8e 7f       	andi	r24, 0xFE	; 254
    2624:	8c 93       	st	X, r24
    2626:	81 c0       	rjmp	.+258    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    2628:	ae e4       	ldi	r26, 0x4E	; 78
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ee e4       	ldi	r30, 0x4E	; 78
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 61       	ori	r24, 0x10	; 16
    2634:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2636:	ae e4       	ldi	r26, 0x4E	; 78
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ee e4       	ldi	r30, 0x4E	; 78
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	87 7f       	andi	r24, 0xF7	; 247
    2642:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2644:	af e4       	ldi	r26, 0x4F	; 79
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ef e4       	ldi	r30, 0x4F	; 79
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	82 60       	ori	r24, 0x02	; 2
    2650:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    2652:	af e4       	ldi	r26, 0x4F	; 79
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ef e4       	ldi	r30, 0x4F	; 79
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	81 60       	ori	r24, 0x01	; 1
    265e:	8c 93       	st	X, r24
    2660:	64 c0       	rjmp	.+200    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_ICR1:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    2662:	af e4       	ldi	r26, 0x4F	; 79
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ef e4       	ldi	r30, 0x4F	; 79
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	88 60       	ori	r24, 0x08	; 8
    266e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    2670:	af e4       	ldi	r26, 0x4F	; 79
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ef e4       	ldi	r30, 0x4F	; 79
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	84 60       	ori	r24, 0x04	; 4
    267c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    267e:	ae e4       	ldi	r26, 0x4E	; 78
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	ee e4       	ldi	r30, 0x4E	; 78
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	80 61       	ori	r24, 0x10	; 16
    268a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    268c:	ae e4       	ldi	r26, 0x4E	; 78
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	ee e4       	ldi	r30, 0x4E	; 78
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	88 60       	ori	r24, 0x08	; 8
    2698:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    269a:	af e4       	ldi	r26, 0x4F	; 79
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	ef e4       	ldi	r30, 0x4F	; 79
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	8d 7f       	andi	r24, 0xFD	; 253
    26a6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    26a8:	af e4       	ldi	r26, 0x4F	; 79
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	ef e4       	ldi	r30, 0x4F	; 79
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8e 7f       	andi	r24, 0xFE	; 254
    26b4:	8c 93       	st	X, r24
    26b6:	39 c0       	rjmp	.+114    	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    26b8:	ae e4       	ldi	r26, 0x4E	; 78
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ee e4       	ldi	r30, 0x4E	; 78
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 61       	ori	r24, 0x10	; 16
    26c4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    26c6:	ae e4       	ldi	r26, 0x4E	; 78
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	ee e4       	ldi	r30, 0x4E	; 78
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	88 60       	ori	r24, 0x08	; 8
    26d2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    26d4:	af e4       	ldi	r26, 0x4F	; 79
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	ef e4       	ldi	r30, 0x4F	; 79
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	82 60       	ori	r24, 0x02	; 2
    26e0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    26e2:	af e4       	ldi	r26, 0x4F	; 79
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	ef e4       	ldi	r30, 0x4F	; 79
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8e 7f       	andi	r24, 0xFE	; 254
    26ee:	8c 93       	st	X, r24
    26f0:	1c c0       	rjmp	.+56     	; 0x272a <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    26f2:	ae e4       	ldi	r26, 0x4E	; 78
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	ee e4       	ldi	r30, 0x4E	; 78
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	80 61       	ori	r24, 0x10	; 16
    26fe:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2700:	ae e4       	ldi	r26, 0x4E	; 78
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	ee e4       	ldi	r30, 0x4E	; 78
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	88 60       	ori	r24, 0x08	; 8
    270c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    270e:	af e4       	ldi	r26, 0x4F	; 79
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ef e4       	ldi	r30, 0x4F	; 79
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	82 60       	ori	r24, 0x02	; 2
    271a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    271c:	af e4       	ldi	r26, 0x4F	; 79
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ef e4       	ldi	r30, 0x4F	; 79
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	81 60       	ori	r24, 0x01	; 1
    2728:	8c 93       	st	X, r24
		break;
	}
	if (((*timerConfig).mode == TIMER16BIT_CTC_OCR1A)
    272a:	e9 81       	ldd	r30, Y+1	; 0x01
    272c:	fa 81       	ldd	r31, Y+2	; 0x02
    272e:	80 81       	ld	r24, Z
    2730:	8f 70       	andi	r24, 0x0F	; 15
    2732:	84 30       	cpi	r24, 0x04	; 4
    2734:	39 f0       	breq	.+14     	; 0x2744 <Timer1_init+0x4d0>
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	80 81       	ld	r24, Z
    273c:	8f 70       	andi	r24, 0x0F	; 15
    273e:	8c 30       	cpi	r24, 0x0C	; 12
    2740:	09 f0       	breq	.+2      	; 0x2744 <Timer1_init+0x4d0>
    2742:	f8 c0       	rjmp	.+496    	; 0x2934 <Timer1_init+0x6c0>
			|| ((*timerConfig).mode == TIMER16BIT_CTC_ICR1))
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    2744:	e9 81       	ldd	r30, Y+1	; 0x01
    2746:	fa 81       	ldd	r31, Y+2	; 0x02
    2748:	80 81       	ld	r24, Z
    274a:	82 95       	swap	r24
    274c:	86 95       	lsr	r24
    274e:	86 95       	lsr	r24
    2750:	83 70       	andi	r24, 0x03	; 3
    2752:	81 70       	andi	r24, 0x01	; 1
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	3a 87       	std	Y+10, r19	; 0x0a
    275a:	29 87       	std	Y+9, r18	; 0x09
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	d9 f0       	breq	.+54     	; 0x279a <Timer1_init+0x526>
    2764:	29 85       	ldd	r18, Y+9	; 0x09
    2766:	3a 85       	ldd	r19, Y+10	; 0x0a
    2768:	21 30       	cpi	r18, 0x01	; 1
    276a:	31 05       	cpc	r19, r1
    276c:	59 f5       	brne	.+86     	; 0x27c4 <Timer1_init+0x550>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE1A);
    276e:	a9 e5       	ldi	r26, 0x59	; 89
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e9 e5       	ldi	r30, 0x59	; 89
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	80 61       	ori	r24, 0x10	; 16
    277a:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B);
    277c:	a9 e5       	ldi	r26, 0x59	; 89
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e9 e5       	ldi	r30, 0x59	; 89
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	88 60       	ori	r24, 0x08	; 8
    2788:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    278a:	a9 e5       	ldi	r26, 0x59	; 89
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e9 e5       	ldi	r30, 0x59	; 89
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	8b 7f       	andi	r24, 0xFB	; 251
    2796:	8c 93       	st	X, r24
    2798:	15 c0       	rjmp	.+42     	; 0x27c4 <Timer1_init+0x550>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    279a:	a9 e5       	ldi	r26, 0x59	; 89
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e9 e5       	ldi	r30, 0x59	; 89
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	8f 7e       	andi	r24, 0xEF	; 239
    27a6:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    27a8:	a9 e5       	ldi	r26, 0x59	; 89
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e9 e5       	ldi	r30, 0x59	; 89
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	87 7f       	andi	r24, 0xF7	; 247
    27b4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    27b6:	a9 e5       	ldi	r26, 0x59	; 89
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e9 e5       	ldi	r30, 0x59	; 89
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	8b 7f       	andi	r24, 0xFB	; 251
    27c2:	8c 93       	st	X, r24
			break;
		}
		/* Select compare mode */
		switch ((*timerConfig).compareOutputMode)
    27c4:	e9 81       	ldd	r30, Y+1	; 0x01
    27c6:	fa 81       	ldd	r31, Y+2	; 0x02
    27c8:	80 81       	ld	r24, Z
    27ca:	82 95       	swap	r24
    27cc:	8f 70       	andi	r24, 0x0F	; 15
    27ce:	83 70       	andi	r24, 0x03	; 3
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	38 87       	std	Y+8, r19	; 0x08
    27d6:	2f 83       	std	Y+7, r18	; 0x07
    27d8:	8f 81       	ldd	r24, Y+7	; 0x07
    27da:	98 85       	ldd	r25, Y+8	; 0x08
    27dc:	81 30       	cpi	r24, 0x01	; 1
    27de:	91 05       	cpc	r25, r1
    27e0:	a1 f1       	breq	.+104    	; 0x284a <Timer1_init+0x5d6>
    27e2:	2f 81       	ldd	r18, Y+7	; 0x07
    27e4:	38 85       	ldd	r19, Y+8	; 0x08
    27e6:	22 30       	cpi	r18, 0x02	; 2
    27e8:	31 05       	cpc	r19, r1
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <Timer1_init+0x582>
    27ec:	8f 81       	ldd	r24, Y+7	; 0x07
    27ee:	98 85       	ldd	r25, Y+8	; 0x08
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	71 f0       	breq	.+28     	; 0x2810 <Timer1_init+0x59c>
    27f4:	a3 c1       	rjmp	.+838    	; 0x2b3c <Timer1_init+0x8c8>
    27f6:	2f 81       	ldd	r18, Y+7	; 0x07
    27f8:	38 85       	ldd	r19, Y+8	; 0x08
    27fa:	22 30       	cpi	r18, 0x02	; 2
    27fc:	31 05       	cpc	r19, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <Timer1_init+0x58e>
    2800:	4b c0       	rjmp	.+150    	; 0x2898 <Timer1_init+0x624>
    2802:	8f 81       	ldd	r24, Y+7	; 0x07
    2804:	98 85       	ldd	r25, Y+8	; 0x08
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <Timer1_init+0x59a>
    280c:	6c c0       	rjmp	.+216    	; 0x28e6 <Timer1_init+0x672>
    280e:	96 c1       	rjmp	.+812    	; 0x2b3c <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2810:	af e4       	ldi	r26, 0x4F	; 79
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ef e4       	ldi	r30, 0x4F	; 79
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 77       	andi	r24, 0x7F	; 127
    281c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    281e:	af e4       	ldi	r26, 0x4F	; 79
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ef e4       	ldi	r30, 0x4F	; 79
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 7d       	andi	r24, 0xDF	; 223
    282a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    282c:	af e4       	ldi	r26, 0x4F	; 79
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ef e4       	ldi	r30, 0x4F	; 79
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8f 7b       	andi	r24, 0xBF	; 191
    2838:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    283a:	af e4       	ldi	r26, 0x4F	; 79
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ef e4       	ldi	r30, 0x4F	; 79
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8f 7e       	andi	r24, 0xEF	; 239
    2846:	8c 93       	st	X, r24
    2848:	79 c1       	rjmp	.+754    	; 0x2b3c <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    284a:	af e4       	ldi	r26, 0x4F	; 79
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	ef e4       	ldi	r30, 0x4F	; 79
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8f 77       	andi	r24, 0x7F	; 127
    2856:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2858:	af e4       	ldi	r26, 0x4F	; 79
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ef e4       	ldi	r30, 0x4F	; 79
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	8f 7d       	andi	r24, 0xDF	; 223
    2864:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2866:	af e4       	ldi	r26, 0x4F	; 79
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	ef e4       	ldi	r30, 0x4F	; 79
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	80 64       	ori	r24, 0x40	; 64
    2872:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2874:	af e4       	ldi	r26, 0x4F	; 79
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	ef e4       	ldi	r30, 0x4F	; 79
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	80 61       	ori	r24, 0x10	; 16
    2880:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    288c:	83 e0       	ldi	r24, 0x03	; 3
    288e:	65 e0       	ldi	r22, 0x05	; 5
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
    2896:	52 c1       	rjmp	.+676    	; 0x2b3c <Timer1_init+0x8c8>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    2898:	af e4       	ldi	r26, 0x4F	; 79
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ef e4       	ldi	r30, 0x4F	; 79
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	80 68       	ori	r24, 0x80	; 128
    28a4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    28a6:	af e4       	ldi	r26, 0x4F	; 79
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	ef e4       	ldi	r30, 0x4F	; 79
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	80 62       	ori	r24, 0x20	; 32
    28b2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    28b4:	af e4       	ldi	r26, 0x4F	; 79
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ef e4       	ldi	r30, 0x4F	; 79
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	8f 7b       	andi	r24, 0xBF	; 191
    28c0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    28c2:	af e4       	ldi	r26, 0x4F	; 79
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ef e4       	ldi	r30, 0x4F	; 79
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7e       	andi	r24, 0xEF	; 239
    28ce:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    28d0:	83 e0       	ldi	r24, 0x03	; 3
    28d2:	64 e0       	ldi	r22, 0x04	; 4
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	65 e0       	ldi	r22, 0x05	; 5
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
    28e4:	2b c1       	rjmp	.+598    	; 0x2b3c <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    28e6:	af e4       	ldi	r26, 0x4F	; 79
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	ef e4       	ldi	r30, 0x4F	; 79
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	80 68       	ori	r24, 0x80	; 128
    28f2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    28f4:	af e4       	ldi	r26, 0x4F	; 79
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ef e4       	ldi	r30, 0x4F	; 79
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	80 62       	ori	r24, 0x20	; 32
    2900:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2902:	af e4       	ldi	r26, 0x4F	; 79
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ef e4       	ldi	r30, 0x4F	; 79
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	80 64       	ori	r24, 0x40	; 64
    290e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2910:	af e4       	ldi	r26, 0x4F	; 79
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	ef e4       	ldi	r30, 0x4F	; 79
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	80 61       	ori	r24, 0x10	; 16
    291c:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	64 e0       	ldi	r22, 0x04	; 4
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	65 e0       	ldi	r22, 0x05	; 5
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
    2932:	04 c1       	rjmp	.+520    	; 0x2b3c <Timer1_init+0x8c8>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	80 81       	ld	r24, Z
    293a:	82 95       	swap	r24
    293c:	86 95       	lsr	r24
    293e:	86 95       	lsr	r24
    2940:	83 70       	andi	r24, 0x03	; 3
    2942:	81 70       	andi	r24, 0x01	; 1
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	3e 83       	std	Y+6, r19	; 0x06
    294a:	2d 83       	std	Y+5, r18	; 0x05
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	d9 f0       	breq	.+54     	; 0x298a <Timer1_init+0x716>
    2954:	2d 81       	ldd	r18, Y+5	; 0x05
    2956:	3e 81       	ldd	r19, Y+6	; 0x06
    2958:	21 30       	cpi	r18, 0x01	; 1
    295a:	31 05       	cpc	r19, r1
    295c:	59 f5       	brne	.+86     	; 0x29b4 <Timer1_init+0x740>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE1A);
    295e:	a9 e5       	ldi	r26, 0x59	; 89
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e9 e5       	ldi	r30, 0x59	; 89
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8f 7e       	andi	r24, 0xEF	; 239
    296a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    296c:	a9 e5       	ldi	r26, 0x59	; 89
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e9 e5       	ldi	r30, 0x59	; 89
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	87 7f       	andi	r24, 0xF7	; 247
    2978:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE1);
    297a:	a9 e5       	ldi	r26, 0x59	; 89
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e9 e5       	ldi	r30, 0x59	; 89
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	84 60       	ori	r24, 0x04	; 4
    2986:	8c 93       	st	X, r24
    2988:	15 c0       	rjmp	.+42     	; 0x29b4 <Timer1_init+0x740>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    298a:	a9 e5       	ldi	r26, 0x59	; 89
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e9 e5       	ldi	r30, 0x59	; 89
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8f 7e       	andi	r24, 0xEF	; 239
    2996:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    2998:	a9 e5       	ldi	r26, 0x59	; 89
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e9 e5       	ldi	r30, 0x59	; 89
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	87 7f       	andi	r24, 0xF7	; 247
    29a4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    29a6:	a9 e5       	ldi	r26, 0x59	; 89
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e9 e5       	ldi	r30, 0x59	; 89
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	8b 7f       	andi	r24, 0xFB	; 251
    29b2:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    29b4:	e9 81       	ldd	r30, Y+1	; 0x01
    29b6:	fa 81       	ldd	r31, Y+2	; 0x02
    29b8:	80 81       	ld	r24, Z
    29ba:	82 95       	swap	r24
    29bc:	8f 70       	andi	r24, 0x0F	; 15
    29be:	83 70       	andi	r24, 0x03	; 3
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	3c 83       	std	Y+4, r19	; 0x04
    29c6:	2b 83       	std	Y+3, r18	; 0x03
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	81 30       	cpi	r24, 0x01	; 1
    29ce:	91 05       	cpc	r25, r1
    29d0:	a1 f1       	breq	.+104    	; 0x2a3a <Timer1_init+0x7c6>
    29d2:	2b 81       	ldd	r18, Y+3	; 0x03
    29d4:	3c 81       	ldd	r19, Y+4	; 0x04
    29d6:	22 30       	cpi	r18, 0x02	; 2
    29d8:	31 05       	cpc	r19, r1
    29da:	2c f4       	brge	.+10     	; 0x29e6 <Timer1_init+0x772>
    29dc:	8b 81       	ldd	r24, Y+3	; 0x03
    29de:	9c 81       	ldd	r25, Y+4	; 0x04
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	71 f0       	breq	.+28     	; 0x2a00 <Timer1_init+0x78c>
    29e4:	ab c0       	rjmp	.+342    	; 0x2b3c <Timer1_init+0x8c8>
    29e6:	2b 81       	ldd	r18, Y+3	; 0x03
    29e8:	3c 81       	ldd	r19, Y+4	; 0x04
    29ea:	22 30       	cpi	r18, 0x02	; 2
    29ec:	31 05       	cpc	r19, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <Timer1_init+0x77e>
    29f0:	58 c0       	rjmp	.+176    	; 0x2aa2 <Timer1_init+0x82e>
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	9c 81       	ldd	r25, Y+4	; 0x04
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	91 05       	cpc	r25, r1
    29fa:	09 f4       	brne	.+2      	; 0x29fe <Timer1_init+0x78a>
    29fc:	79 c0       	rjmp	.+242    	; 0x2af0 <Timer1_init+0x87c>
    29fe:	9e c0       	rjmp	.+316    	; 0x2b3c <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2a00:	af e4       	ldi	r26, 0x4F	; 79
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	ef e4       	ldi	r30, 0x4F	; 79
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	8f 77       	andi	r24, 0x7F	; 127
    2a0c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2a0e:	af e4       	ldi	r26, 0x4F	; 79
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ef e4       	ldi	r30, 0x4F	; 79
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	8f 7d       	andi	r24, 0xDF	; 223
    2a1a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2a1c:	af e4       	ldi	r26, 0x4F	; 79
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	ef e4       	ldi	r30, 0x4F	; 79
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8f 7b       	andi	r24, 0xBF	; 191
    2a28:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2a2a:	af e4       	ldi	r26, 0x4F	; 79
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	ef e4       	ldi	r30, 0x4F	; 79
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 7e       	andi	r24, 0xEF	; 239
    2a36:	8c 93       	st	X, r24
    2a38:	81 c0       	rjmp	.+258    	; 0x2b3c <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2a3a:	af e4       	ldi	r26, 0x4F	; 79
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ef e4       	ldi	r30, 0x4F	; 79
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 77       	andi	r24, 0x7F	; 127
    2a46:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2a48:	af e4       	ldi	r26, 0x4F	; 79
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	ef e4       	ldi	r30, 0x4F	; 79
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	8f 7d       	andi	r24, 0xDF	; 223
    2a54:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2a56:	af e4       	ldi	r26, 0x4F	; 79
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	ef e4       	ldi	r30, 0x4F	; 79
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 64       	ori	r24, 0x40	; 64
    2a62:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2a64:	af e4       	ldi	r26, 0x4F	; 79
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	ef e4       	ldi	r30, 0x4F	; 79
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 61       	ori	r24, 0x10	; 16
    2a70:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	64 e0       	ldi	r22, 0x04	; 4
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
				if ((*timerConfig).mode != TIMER16BIT_PHASE_FREQ_PWM_OCR1A
    2a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 70       	andi	r24, 0x0F	; 15
    2a84:	89 30       	cpi	r24, 0x09	; 9
    2a86:	39 f4       	brne	.+14     	; 0x2a96 <Timer1_init+0x822>
    2a88:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8f 70       	andi	r24, 0x0F	; 15
    2a90:	8f 30       	cpi	r24, 0x0F	; 15
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <Timer1_init+0x822>
    2a94:	53 c0       	rjmp	.+166    	; 0x2b3c <Timer1_init+0x8c8>
						|| (*timerConfig).mode != TIMER16BIT_FAST_PWM_OCR1A)
				{
					GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	65 e0       	ldi	r22, 0x05	; 5
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
    2aa0:	4d c0       	rjmp	.+154    	; 0x2b3c <Timer1_init+0x8c8>
				}
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    2aa2:	af e4       	ldi	r26, 0x4F	; 79
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	ef e4       	ldi	r30, 0x4F	; 79
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	80 68       	ori	r24, 0x80	; 128
    2aae:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2ab0:	af e4       	ldi	r26, 0x4F	; 79
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	ef e4       	ldi	r30, 0x4F	; 79
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 62       	ori	r24, 0x20	; 32
    2abc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2abe:	af e4       	ldi	r26, 0x4F	; 79
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	ef e4       	ldi	r30, 0x4F	; 79
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8f 7b       	andi	r24, 0xBF	; 191
    2aca:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2acc:	af e4       	ldi	r26, 0x4F	; 79
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	ef e4       	ldi	r30, 0x4F	; 79
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8f 7e       	andi	r24, 0xEF	; 239
    2ad8:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2ada:	83 e0       	ldi	r24, 0x03	; 3
    2adc:	64 e0       	ldi	r22, 0x04	; 4
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2ae4:	83 e0       	ldi	r24, 0x03	; 3
    2ae6:	65 e0       	ldi	r22, 0x05	; 5
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
    2aee:	26 c0       	rjmp	.+76     	; 0x2b3c <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    2af0:	af e4       	ldi	r26, 0x4F	; 79
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	ef e4       	ldi	r30, 0x4F	; 79
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	80 68       	ori	r24, 0x80	; 128
    2afc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2afe:	af e4       	ldi	r26, 0x4F	; 79
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	ef e4       	ldi	r30, 0x4F	; 79
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	80 62       	ori	r24, 0x20	; 32
    2b0a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2b0c:	af e4       	ldi	r26, 0x4F	; 79
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	ef e4       	ldi	r30, 0x4F	; 79
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	80 64       	ori	r24, 0x40	; 64
    2b18:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2b1a:	af e4       	ldi	r26, 0x4F	; 79
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	ef e4       	ldi	r30, 0x4F	; 79
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	80 61       	ori	r24, 0x10	; 16
    2b26:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	64 e0       	ldi	r22, 0x04	; 4
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2b32:	83 e0       	ldi	r24, 0x03	; 3
    2b34:	65 e0       	ldi	r22, 0x05	; 5
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
			break;
		}
	}
}
    2b3c:	2e 96       	adiw	r28, 0x0e	; 14
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <Timer1_setCallBack>:
 * 		normal mode or compare unit A interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBack(void (*Ptr2Function)(void))
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <Timer1_setCallBack+0x6>
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitA_Ptr = Ptr2Function;
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	90 93 7d 01 	sts	0x017D, r25
    2b64:	80 93 7c 01 	sts	0x017C, r24
}
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <Timer1_setCallBackUnitB>:
 * 		compare unit B interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBackUnitB(void (*Ptr2Function)(void))
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <Timer1_setCallBackUnitB+0x6>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitB_Ptr = Ptr2Function;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	90 93 7f 01 	sts	0x017F, r25
    2b88:	80 93 7e 01 	sts	0x017E, r24
}
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <Timer1_start>:
 * [In] compareValueB	: Indicates compare value for unit B.
 * [Return]				: Void.
 */
void Timer1_start(TIMER01_PRESCALER prescaler, uint16 start,
		uint16 compareValueA, uint16 compareValueB)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	27 97       	sbiw	r28, 0x07	; 7
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	7b 83       	std	Y+3, r23	; 0x03
    2bae:	6a 83       	std	Y+2, r22	; 0x02
    2bb0:	5d 83       	std	Y+5, r21	; 0x05
    2bb2:	4c 83       	std	Y+4, r20	; 0x04
    2bb4:	3f 83       	std	Y+7, r19	; 0x07
    2bb6:	2e 83       	std	Y+6, r18	; 0x06
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	87 70       	andi	r24, 0x07	; 7
    2bbc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start; /* Set timer starting value */
    2bbe:	ec e4       	ldi	r30, 0x4C	; 76
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
	/* Choose between compare unit A or compare unit B or both */
	OCR1A = compareValueA;
    2bca:	ea e4       	ldi	r30, 0x4A	; 74
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
	OCR1B = compareValueB;
    2bd6:	e8 e4       	ldi	r30, 0x48	; 72
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	8e 81       	ldd	r24, Y+6	; 0x06
    2bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
	/* If interrupt is enable in initialization, enable it for
	 * it's corresponding compare unit chosen */
	if (compareValueA != 0 && compareValueB == 0)
    2be2:	8c 81       	ldd	r24, Y+4	; 0x04
    2be4:	9d 81       	ldd	r25, Y+5	; 0x05
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	a9 f0       	breq	.+42     	; 0x2c14 <Timer1_start+0x7e>
    2bea:	8e 81       	ldd	r24, Y+6	; 0x06
    2bec:	9f 81       	ldd	r25, Y+7	; 0x07
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	89 f4       	brne	.+34     	; 0x2c14 <Timer1_start+0x7e>
	{
		if (BIT_IS_SET(TIMSK, OCIE1A))
    2bf2:	e9 e5       	ldi	r30, 0x59	; 89
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	80 71       	andi	r24, 0x10	; 16
    2bfe:	90 70       	andi	r25, 0x00	; 0
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	b9 f1       	breq	.+110    	; 0x2c72 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1B);
    2c04:	a9 e5       	ldi	r26, 0x59	; 89
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e9 e5       	ldi	r30, 0x59	; 89
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	87 7f       	andi	r24, 0xF7	; 247
    2c10:	8c 93       	st	X, r24
    2c12:	2f c0       	rjmp	.+94     	; 0x2c72 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB != 0)
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	9d 81       	ldd	r25, Y+5	; 0x05
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	a9 f4       	brne	.+42     	; 0x2c46 <Timer1_start+0xb0>
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	89 f0       	breq	.+34     	; 0x2c46 <Timer1_start+0xb0>
	{
		if (BIT_IS_SET(TIMSK, OCIE1B))
    2c24:	e9 e5       	ldi	r30, 0x59	; 89
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	88 70       	andi	r24, 0x08	; 8
    2c30:	90 70       	andi	r25, 0x00	; 0
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	f1 f0       	breq	.+60     	; 0x2c72 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1A);
    2c36:	a9 e5       	ldi	r26, 0x59	; 89
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e9 e5       	ldi	r30, 0x59	; 89
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	8f 7e       	andi	r24, 0xEF	; 239
    2c42:	8c 93       	st	X, r24
    2c44:	16 c0       	rjmp	.+44     	; 0x2c72 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB == 0)
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	91 f4       	brne	.+36     	; 0x2c72 <Timer1_start+0xdc>
    2c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c50:	9f 81       	ldd	r25, Y+7	; 0x07
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	71 f4       	brne	.+28     	; 0x2c72 <Timer1_start+0xdc>
	{
		CLEAR_BIT(TIMSK, OCIE1A);
    2c56:	a9 e5       	ldi	r26, 0x59	; 89
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e9 e5       	ldi	r30, 0x59	; 89
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8f 7e       	andi	r24, 0xEF	; 239
    2c62:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1B);
    2c64:	a9 e5       	ldi	r26, 0x59	; 89
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e9 e5       	ldi	r30, 0x59	; 89
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	87 7f       	andi	r24, 0xF7	; 247
    2c70:	8c 93       	st	X, r24
	}
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR1B, 0xF8, prescaler);
    2c72:	ae e4       	ldi	r26, 0x4E	; 78
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ee e4       	ldi	r30, 0x4E	; 78
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	98 2f       	mov	r25, r24
    2c7e:	98 7f       	andi	r25, 0xF8	; 248
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	89 2b       	or	r24, r25
    2c84:	8c 93       	st	X, r24
}
    2c86:	27 96       	adiw	r28, 0x07	; 7
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <Timer1_stop>:
 * 		Function that stops timer1 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_stop(void)
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR1B, 0xF8, 0x00); /* Clear pre-scaler */
    2ca0:	ae e4       	ldi	r26, 0x4E	; 78
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	ee e4       	ldi	r30, 0x4E	; 78
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 7f       	andi	r24, 0xF8	; 248
    2cac:	8c 93       	st	X, r24
}
    2cae:	cf 91       	pop	r28
    2cb0:	df 91       	pop	r29
    2cb2:	08 95       	ret

00002cb4 <Timer1_deInit>:
 * 		Function that clears all timer1 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_deInit(void)
{
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	2a 97       	sbiw	r28, 0x0a	; 10
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
	/* Clear timer1 registers */
	CLEAR_REG(TCCR1A);
    2cc8:	ef e4       	ldi	r30, 0x4F	; 79
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	ef e4       	ldi	r30, 0x4F	; 79
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    2cd4:	ee e4       	ldi	r30, 0x4E	; 78
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	90 81       	ld	r25, Z
    2cda:	ee e4       	ldi	r30, 0x4E	; 78
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	10 82       	st	Z, r1
	CLEAR_REG(TCNT1);
    2ce0:	ec e4       	ldi	r30, 0x4C	; 76
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	ec e4       	ldi	r30, 0x4C	; 76
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	11 82       	std	Z+1, r1	; 0x01
    2cee:	10 82       	st	Z, r1
	CLEAR_REG(OCR1A);
    2cf0:	ea e4       	ldi	r30, 0x4A	; 74
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	ea e4       	ldi	r30, 0x4A	; 74
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	11 82       	std	Z+1, r1	; 0x01
    2cfe:	10 82       	st	Z, r1
	CLEAR_REG(OCR1B);
    2d00:	e8 e4       	ldi	r30, 0x48	; 72
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	e8 e4       	ldi	r30, 0x48	; 72
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	11 82       	std	Z+1, r1	; 0x01
    2d0e:	10 82       	st	Z, r1
	CLEAR_REG(ICR1);
    2d10:	e6 e4       	ldi	r30, 0x46	; 70
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	e6 e4       	ldi	r30, 0x46	; 70
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	11 82       	std	Z+1, r1	; 0x01
    2d1e:	10 82       	st	Z, r1
	/* Disable timer1 interrupts */
	CLEAR_BIT(TIMSK, TICIE1);
    2d20:	a9 e5       	ldi	r26, 0x59	; 89
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e9 e5       	ldi	r30, 0x59	; 89
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	8f 7d       	andi	r24, 0xDF	; 223
    2d2c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    2d2e:	a9 e5       	ldi	r26, 0x59	; 89
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e9 e5       	ldi	r30, 0x59	; 89
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 7e       	andi	r24, 0xEF	; 239
    2d3a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    2d3c:	a9 e5       	ldi	r26, 0x59	; 89
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e9 e5       	ldi	r30, 0x59	; 89
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	87 7f       	andi	r24, 0xF7	; 247
    2d48:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE1);
    2d4a:	a9 e5       	ldi	r26, 0x59	; 89
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e9 e5       	ldi	r30, 0x59	; 89
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	8b 7f       	andi	r24, 0xFB	; 251
    2d56:	8c 93       	st	X, r24
	/* Clear timer1 flags */
	SET_BIT(TIFR, ICF1);
    2d58:	a8 e5       	ldi	r26, 0x58	; 88
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e8 e5       	ldi	r30, 0x58	; 88
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	80 62       	ori	r24, 0x20	; 32
    2d64:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1A);
    2d66:	a8 e5       	ldi	r26, 0x58	; 88
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e8 e5       	ldi	r30, 0x58	; 88
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	80 61       	ori	r24, 0x10	; 16
    2d72:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1B);
    2d74:	a8 e5       	ldi	r26, 0x58	; 88
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e8 e5       	ldi	r30, 0x58	; 88
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	88 60       	ori	r24, 0x08	; 8
    2d80:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV1);
    2d82:	a8 e5       	ldi	r26, 0x58	; 88
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e8 e5       	ldi	r30, 0x58	; 88
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	84 60       	ori	r24, 0x04	; 4
    2d8e:	8c 93       	st	X, r24
}
    2d90:	2a 96       	adiw	r28, 0x0a	; 10
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <Ultrasonic_init>:
 * 			3. Set trigger output pin.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void Ultrasonic_init(void)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	0f 92       	push	r0
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
	/* Define structure of ICU configurations */
	ICU_ConfigType ICU_Config = { TIMER01_PRESCALER_8, RISING };
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	88 7f       	andi	r24, 0xF8	; 248
    2db0:	82 60       	ori	r24, 0x02	; 2
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	88 60       	ori	r24, 0x08	; 8
    2db8:	89 83       	std	Y+1, r24	; 0x01
	/* Set ICU call-back function */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    2dba:	88 ef       	ldi	r24, 0xF8	; 248
    2dbc:	97 e1       	ldi	r25, 0x17	; 23
    2dbe:	0e 94 05 0b 	call	0x160a	; 0x160a <ICU_setCallBack>
	/* Set trigger pin as output */
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	67 e0       	ldi	r22, 0x07	; 7
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	0e 94 36 07 	call	0xe6c	; 0xe6c <GPIO_setupPinDirection>
	/* Initialize ICU */
	ICU_init(&ICU_Config);
    2dcc:	ce 01       	movw	r24, r28
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <ICU_init>
}
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <Ultrasonic_trigger>:
 * 		Sets trigger pin to (LOGIC HIGH) for 10 micro-seconds.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void Ultrasonic_trigger(void)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	68 97       	sbiw	r28, 0x18	; 24
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
	/* Set trigger pin as (LOGIC HIGH) */
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    2df0:	83 e0       	ldi	r24, 0x03	; 3
    2df2:	67 e0       	ldi	r22, 0x07	; 7
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a0 e2       	ldi	r26, 0x20	; 32
    2e00:	b1 e4       	ldi	r27, 0x41	; 65
    2e02:	8d 8b       	std	Y+21, r24	; 0x15
    2e04:	9e 8b       	std	Y+22, r25	; 0x16
    2e06:	af 8b       	std	Y+23, r26	; 0x17
    2e08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e10:	98 8d       	ldd	r25, Y+24	; 0x18
    2e12:	2b ea       	ldi	r18, 0xAB	; 171
    2e14:	3a ea       	ldi	r19, 0xAA	; 170
    2e16:	4a e2       	ldi	r20, 0x2A	; 42
    2e18:	50 e4       	ldi	r21, 0x40	; 64
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	89 8b       	std	Y+17, r24	; 0x11
    2e24:	9a 8b       	std	Y+18, r25	; 0x12
    2e26:	ab 8b       	std	Y+19, r26	; 0x13
    2e28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e2a:	69 89       	ldd	r22, Y+17	; 0x11
    2e2c:	7a 89       	ldd	r23, Y+18	; 0x12
    2e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e30:	9c 89       	ldd	r25, Y+20	; 0x14
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e8       	ldi	r20, 0x80	; 128
    2e38:	5f e3       	ldi	r21, 0x3F	; 63
    2e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3e:	88 23       	and	r24, r24
    2e40:	1c f4       	brge	.+6      	; 0x2e48 <Ultrasonic_trigger+0x6c>
		__ticks = 1;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	88 8b       	std	Y+16, r24	; 0x10
    2e46:	91 c0       	rjmp	.+290    	; 0x2f6a <Ultrasonic_trigger+0x18e>
	else if (__tmp > 255)
    2e48:	69 89       	ldd	r22, Y+17	; 0x11
    2e4a:	7a 89       	ldd	r23, Y+18	; 0x12
    2e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	53 e4       	ldi	r21, 0x43	; 67
    2e58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	0c f0       	brlt	.+2      	; 0x2e62 <Ultrasonic_trigger+0x86>
    2e60:	7b c0       	rjmp	.+246    	; 0x2f58 <Ultrasonic_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2e62:	6d 89       	ldd	r22, Y+21	; 0x15
    2e64:	7e 89       	ldd	r23, Y+22	; 0x16
    2e66:	8f 89       	ldd	r24, Y+23	; 0x17
    2e68:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	4a e7       	ldi	r20, 0x7A	; 122
    2e70:	54 e4       	ldi	r21, 0x44	; 68
    2e72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	8c 87       	std	Y+12, r24	; 0x0c
    2e7c:	9d 87       	std	Y+13, r25	; 0x0d
    2e7e:	ae 87       	std	Y+14, r26	; 0x0e
    2e80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e82:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e84:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4a ef       	ldi	r20, 0xFA	; 250
    2e90:	54 e4       	ldi	r21, 0x44	; 68
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	88 87       	std	Y+8, r24	; 0x08
    2e9c:	99 87       	std	Y+9, r25	; 0x09
    2e9e:	aa 87       	std	Y+10, r26	; 0x0a
    2ea0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ea2:	68 85       	ldd	r22, Y+8	; 0x08
    2ea4:	79 85       	ldd	r23, Y+9	; 0x09
    2ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb6:	88 23       	and	r24, r24
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <Ultrasonic_trigger+0xe8>
		__ticks = 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	9f 83       	std	Y+7, r25	; 0x07
    2ec0:	8e 83       	std	Y+6, r24	; 0x06
    2ec2:	3f c0       	rjmp	.+126    	; 0x2f42 <Ultrasonic_trigger+0x166>
	else if (__tmp > 65535)
    2ec4:	68 85       	ldd	r22, Y+8	; 0x08
    2ec6:	79 85       	ldd	r23, Y+9	; 0x09
    2ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	4c f5       	brge	.+82     	; 0x2f2e <Ultrasonic_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ede:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ee2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9f 83       	std	Y+7, r25	; 0x07
    2f02:	8e 83       	std	Y+6, r24	; 0x06
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <Ultrasonic_trigger+0x148>
    2f06:	88 ec       	ldi	r24, 0xC8	; 200
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9d 83       	std	Y+5, r25	; 0x05
    2f0c:	8c 83       	std	Y+4, r24	; 0x04
    2f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f10:	9d 81       	ldd	r25, Y+5	; 0x05
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <Ultrasonic_trigger+0x136>
    2f16:	9d 83       	std	Y+5, r25	; 0x05
    2f18:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	9f 83       	std	Y+7, r25	; 0x07
    2f22:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f24:	8e 81       	ldd	r24, Y+6	; 0x06
    2f26:	9f 81       	ldd	r25, Y+7	; 0x07
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	69 f7       	brne	.-38     	; 0x2f06 <Ultrasonic_trigger+0x12a>
    2f2c:	24 c0       	rjmp	.+72     	; 0x2f76 <Ultrasonic_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2e:	68 85       	ldd	r22, Y+8	; 0x08
    2f30:	79 85       	ldd	r23, Y+9	; 0x09
    2f32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	9f 83       	std	Y+7, r25	; 0x07
    2f40:	8e 83       	std	Y+6, r24	; 0x06
    2f42:	8e 81       	ldd	r24, Y+6	; 0x06
    2f44:	9f 81       	ldd	r25, Y+7	; 0x07
    2f46:	9b 83       	std	Y+3, r25	; 0x03
    2f48:	8a 83       	std	Y+2, r24	; 0x02
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <Ultrasonic_trigger+0x172>
    2f52:	9b 83       	std	Y+3, r25	; 0x03
    2f54:	8a 83       	std	Y+2, r24	; 0x02
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <Ultrasonic_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f58:	69 89       	ldd	r22, Y+17	; 0x11
    2f5a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	88 8b       	std	Y+16, r24	; 0x10
    2f6a:	88 89       	ldd	r24, Y+16	; 0x10
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8a 95       	dec	r24
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <Ultrasonic_trigger+0x194>
    2f74:	89 83       	std	Y+1, r24	; 0x01
	/* Wait 10 micro-seconds */
	_delay_us(10);
	/* Set trigger pin as (LOGIC LOW) */
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    2f76:	83 e0       	ldi	r24, 0x03	; 3
    2f78:	67 e0       	ldi	r22, 0x07	; 7
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_writePin>
}
    2f80:	68 96       	adiw	r28, 0x18	; 24
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <Ultrasonic_readDistance>:
 * 		ICU timer value and returns the calculated distance.
 * [Args]	: Void.
 * [Return]	: Measured distance value.
 */
uint16 Ultrasonic_readDistance(void)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <Ultrasonic_readDistance+0x6>
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
	/* Declare & initialize a variable that holds distance */
	uint16 distance = 0;
    2f9c:	1a 82       	std	Y+2, r1	; 0x02
    2f9e:	19 82       	std	Y+1, r1	; 0x01
	/* Trigger ultrasonic */
	Ultrasonic_trigger();
    2fa0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Ultrasonic_trigger>
	/* Calculate distance depending on ICU timer value */
	distance = ((float) 0.01731 * echoHighTime);
    2fa4:	80 91 81 01 	lds	r24, 0x0181
    2fa8:	90 91 82 01 	lds	r25, 0x0182
    2fac:	cc 01       	movw	r24, r24
    2fae:	a0 e0       	ldi	r26, 0x00	; 0
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	23 eb       	ldi	r18, 0xB3	; 179
    2fc4:	3d ec       	ldi	r19, 0xCD	; 205
    2fc6:	4d e8       	ldi	r20, 0x8D	; 141
    2fc8:	5c e3       	ldi	r21, 0x3C	; 60
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
	/* Return distance calculated to upper layer */
	return distance;
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <Ultrasonic_edgeProcessing>:
 * 		to last ICU timer value and resets number of edges detected.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void Ultrasonic_edgeProcessing(void)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	/* Increase edges count */
	edgeCount++;
    2ff8:	80 91 80 01 	lds	r24, 0x0180
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	80 93 80 01 	sts	0x0180, r24
	/* If the edge detected is a rising edge */
	if (edgeCount == 1)
    3002:	80 91 80 01 	lds	r24, 0x0180
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	31 f4       	brne	.+12     	; 0x3016 <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue(); /* Clear previous ICU timer value to start again from this point */
    300a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING); /* Set edge detection to (FALLING) */
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	0e 94 17 0b 	call	0x162e	; 0x162e <ICU_setEdgeDetectionType>
    3014:	0d c0       	rjmp	.+26     	; 0x3030 <Ultrasonic_edgeProcessing+0x40>
	}
	else
	{
		echoHighTime = ICU_getInputCaptureValue(); /* Set the new ICU timer value to echoHighTime */
    3016:	0e 94 41 0b 	call	0x1682	; 0x1682 <ICU_getInputCaptureValue>
    301a:	90 93 82 01 	sts	0x0182, r25
    301e:	80 93 81 01 	sts	0x0181, r24
		ICU_clearTimerValue(); /* Clear previous ICU timer value to start again from this point */
    3022:	0e 94 4c 0b 	call	0x1698	; 0x1698 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(RISING); /* Set edge detection to (RISING) */
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	0e 94 17 0b 	call	0x162e	; 0x162e <ICU_setEdgeDetectionType>
		edgeCount = 0; /* Reset number of detected edges */
    302c:	10 92 80 01 	sts	0x0180, r1
	}
}
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <__prologue_saves__>:
    3036:	2f 92       	push	r2
    3038:	3f 92       	push	r3
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	ca 1b       	sub	r28, r26
    3060:	db 0b       	sbc	r29, r27
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	09 94       	ijmp

0000306e <__epilogue_restores__>:
    306e:	2a 88       	ldd	r2, Y+18	; 0x12
    3070:	39 88       	ldd	r3, Y+17	; 0x11
    3072:	48 88       	ldd	r4, Y+16	; 0x10
    3074:	5f 84       	ldd	r5, Y+15	; 0x0f
    3076:	6e 84       	ldd	r6, Y+14	; 0x0e
    3078:	7d 84       	ldd	r7, Y+13	; 0x0d
    307a:	8c 84       	ldd	r8, Y+12	; 0x0c
    307c:	9b 84       	ldd	r9, Y+11	; 0x0b
    307e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3080:	b9 84       	ldd	r11, Y+9	; 0x09
    3082:	c8 84       	ldd	r12, Y+8	; 0x08
    3084:	df 80       	ldd	r13, Y+7	; 0x07
    3086:	ee 80       	ldd	r14, Y+6	; 0x06
    3088:	fd 80       	ldd	r15, Y+5	; 0x05
    308a:	0c 81       	ldd	r16, Y+4	; 0x04
    308c:	1b 81       	ldd	r17, Y+3	; 0x03
    308e:	aa 81       	ldd	r26, Y+2	; 0x02
    3090:	b9 81       	ldd	r27, Y+1	; 0x01
    3092:	ce 0f       	add	r28, r30
    3094:	d1 1d       	adc	r29, r1
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	ed 01       	movw	r28, r26
    30a2:	08 95       	ret

000030a4 <itoa>:
    30a4:	fb 01       	movw	r30, r22
    30a6:	9f 01       	movw	r18, r30
    30a8:	e8 94       	clt
    30aa:	42 30       	cpi	r20, 0x02	; 2
    30ac:	c4 f0       	brlt	.+48     	; 0x30de <itoa+0x3a>
    30ae:	45 32       	cpi	r20, 0x25	; 37
    30b0:	b4 f4       	brge	.+44     	; 0x30de <itoa+0x3a>
    30b2:	4a 30       	cpi	r20, 0x0A	; 10
    30b4:	29 f4       	brne	.+10     	; 0x30c0 <itoa+0x1c>
    30b6:	97 fb       	bst	r25, 7
    30b8:	1e f4       	brtc	.+6      	; 0x30c0 <itoa+0x1c>
    30ba:	90 95       	com	r25
    30bc:	81 95       	neg	r24
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	64 2f       	mov	r22, r20
    30c2:	77 27       	eor	r23, r23
    30c4:	0e 94 83 18 	call	0x3106	; 0x3106 <__udivmodhi4>
    30c8:	80 5d       	subi	r24, 0xD0	; 208
    30ca:	8a 33       	cpi	r24, 0x3A	; 58
    30cc:	0c f0       	brlt	.+2      	; 0x30d0 <itoa+0x2c>
    30ce:	89 5d       	subi	r24, 0xD9	; 217
    30d0:	81 93       	st	Z+, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	a1 f7       	brne	.-24     	; 0x30c0 <itoa+0x1c>
    30d8:	16 f4       	brtc	.+4      	; 0x30de <itoa+0x3a>
    30da:	5d e2       	ldi	r21, 0x2D	; 45
    30dc:	51 93       	st	Z+, r21
    30de:	10 82       	st	Z, r1
    30e0:	c9 01       	movw	r24, r18
    30e2:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <strrev>

000030e6 <strrev>:
    30e6:	dc 01       	movw	r26, r24
    30e8:	fc 01       	movw	r30, r24
    30ea:	67 2f       	mov	r22, r23
    30ec:	71 91       	ld	r23, Z+
    30ee:	77 23       	and	r23, r23
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <strrev+0x4>
    30f2:	32 97       	sbiw	r30, 0x02	; 2
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <strrev+0x18>
    30f6:	7c 91       	ld	r23, X
    30f8:	6d 93       	st	X+, r22
    30fa:	70 83       	st	Z, r23
    30fc:	62 91       	ld	r22, -Z
    30fe:	ae 17       	cp	r26, r30
    3100:	bf 07       	cpc	r27, r31
    3102:	c8 f3       	brcs	.-14     	; 0x30f6 <strrev+0x10>
    3104:	08 95       	ret

00003106 <__udivmodhi4>:
    3106:	aa 1b       	sub	r26, r26
    3108:	bb 1b       	sub	r27, r27
    310a:	51 e1       	ldi	r21, 0x11	; 17
    310c:	07 c0       	rjmp	.+14     	; 0x311c <__udivmodhi4_ep>

0000310e <__udivmodhi4_loop>:
    310e:	aa 1f       	adc	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	a6 17       	cp	r26, r22
    3114:	b7 07       	cpc	r27, r23
    3116:	10 f0       	brcs	.+4      	; 0x311c <__udivmodhi4_ep>
    3118:	a6 1b       	sub	r26, r22
    311a:	b7 0b       	sbc	r27, r23

0000311c <__udivmodhi4_ep>:
    311c:	88 1f       	adc	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	5a 95       	dec	r21
    3122:	a9 f7       	brne	.-22     	; 0x310e <__udivmodhi4_loop>
    3124:	80 95       	com	r24
    3126:	90 95       	com	r25
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	08 95       	ret

0000312e <_exit>:
    312e:	f8 94       	cli

00003130 <__stop_program>:
    3130:	ff cf       	rjmp	.-2      	; 0x3130 <__stop_program>
