
DoorLockerSecuritySystemProject_CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003614  000036a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800068  00800068  000036b0  2**0
                  ALLOC
  3 .stab         00003858  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002526  00000000  00000000  00006f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000942e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000956e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000096de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c212  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cfc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_7>
      20:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_8>
      24:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_9>
      28:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_10>
      2c:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 38       	cpi	r26, 0x80	; 128
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e1       	ldi	r30, 0x14	; 20
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <main>
      8a:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	08 f0       	brcs	.+2      	; 0xf0c <GPIO_readPin+0x1a>
     f0a:	85 c0       	rjmp	.+266    	; 0x1016 <GPIO_readPin+0x124>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	08 f0       	brcs	.+2      	; 0xf14 <GPIO_readPin+0x22>
     f12:	81 c0       	rjmp	.+258    	; 0x1016 <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	4c 81       	ldd	r20, Y+4	; 0x04
     f20:	5d 81       	ldd	r21, Y+5	; 0x05
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4c 81       	ldd	r20, Y+4	; 0x04
     f40:	5d 81       	ldd	r21, Y+5	; 0x05
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5b 83       	std	Y+3, r21	; 0x03
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
     f82:	1b 82       	std	Y+3, r1	; 0x03
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5b 83       	std	Y+3, r21	; 0x03
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
     fb2:	1b 82       	std	Y+3, r1	; 0x03
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5b 83       	std	Y+3, r21	; 0x03
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
     fe2:	1b 82       	std	Y+3, r1	; 0x03
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5b 83       	std	Y+3, r21	; 0x03
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1012:	1b 82       	std	Y+3, r1	; 0x03
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x12a>
				}
		}
	}
}
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
			break;
		}
	}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	98 f5       	brcc	.+102    	; 0x11bc <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3c 83       	std	Y+4, r19	; 0x04
    115e:	2b 83       	std	Y+3, r18	; 0x03
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	d1 f0       	breq	.+52     	; 0x119e <GPIO_readPort+0x5e>
    116a:	2b 81       	ldd	r18, Y+3	; 0x03
    116c:	3c 81       	ldd	r19, Y+4	; 0x04
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	2c f4       	brge	.+10     	; 0x117e <GPIO_readPort+0x3e>
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	61 f0       	breq	.+24     	; 0x1194 <GPIO_readPort+0x54>
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <GPIO_readPort+0x7c>
    117e:	2b 81       	ldd	r18, Y+3	; 0x03
    1180:	3c 81       	ldd	r19, Y+4	; 0x04
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <GPIO_readPort+0x68>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <GPIO_readPort+0x72>
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    1194:	e9 e3       	ldi	r30, 0x39	; 57
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	90 81       	ld	r25, Z
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	10 c0       	rjmp	.+32     	; 0x11be <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    119e:	e6 e3       	ldi	r30, 0x36	; 54
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	20 81       	ld	r18, Z
    11a4:	2a 83       	std	Y+2, r18	; 0x02
    11a6:	0b c0       	rjmp	.+22     	; 0x11be <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    11a8:	e3 e3       	ldi	r30, 0x33	; 51
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	30 81       	ld	r19, Z
    11ae:	3a 83       	std	Y+2, r19	; 0x02
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    11b2:	e0 e3       	ldi	r30, 0x30	; 48
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <GPIO_readPort+0x7e>
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <GPIO_readPort+0x82>
		}
	}
}
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	9d 83       	std	Y+5, r25	; 0x05
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <I2C_init>:
 * [Args] I2CConfig		: Contains division factor, device address, pre-scaler
 * 						  interrupt state and general call recognition.
 * [Return]				: Void.
 */
void I2C_init(const I2C_initConfig *I2CConfig)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <I2C_init+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <I2C_init+0x8>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <I2C_init+0xa>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
	/* Set I2C division factor for SCL frequency equation */
	TWBR = (*I2CConfig).divisionFactor;
    11e6:	a0 e2       	ldi	r26, 0x20	; 32
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	80 81       	ld	r24, Z
    11f0:	8c 93       	st	X, r24
	/* Enable I2C */
	SET_BIT(TWCR, TWEN);
    11f2:	a6 e5       	ldi	r26, 0x56	; 86
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e6 e5       	ldi	r30, 0x56	; 86
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	84 60       	ori	r24, 0x04	; 4
    11fe:	8c 93       	st	X, r24
	/* Select interrupt state */
	switch ((*I2CConfig).interruptEnable)
    1200:	e9 81       	ldd	r30, Y+1	; 0x01
    1202:	fa 81       	ldd	r31, Y+2	; 0x02
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	86 95       	lsr	r24
    1208:	86 95       	lsr	r24
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3e 83       	std	Y+6, r19	; 0x06
    1212:	2d 83       	std	Y+5, r18	; 0x05
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	69 f0       	breq	.+26     	; 0x1236 <I2C_init+0x62>
    121c:	2d 81       	ldd	r18, Y+5	; 0x05
    121e:	3e 81       	ldd	r19, Y+6	; 0x06
    1220:	21 30       	cpi	r18, 0x01	; 1
    1222:	31 05       	cpc	r19, r1
    1224:	79 f4       	brne	.+30     	; 0x1244 <I2C_init+0x70>
	{
		case LOGIC_HIGH:
			SET_BIT(TWCR, TWIE);
    1226:	a6 e5       	ldi	r26, 0x56	; 86
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e6 e5       	ldi	r30, 0x56	; 86
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	8c 93       	st	X, r24
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <I2C_init+0x70>
		break;
		case LOGIC_LOW:
			CLEAR_BIT(TWCR, TWIE);
    1236:	a6 e5       	ldi	r26, 0x56	; 86
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e6 e5       	ldi	r30, 0x56	; 86
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8e 7f       	andi	r24, 0xFE	; 254
    1242:	8c 93       	st	X, r24
		break;
	}
	/* Set I2C pre-scaler for SCL frequency equation */
	OVERWRITE_REG(TWDR, 0xFC, (*I2CConfig).prescaler);
    1244:	a3 e2       	ldi	r26, 0x23	; 35
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e3 e2       	ldi	r30, 0x23	; 35
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	98 2f       	mov	r25, r24
    1250:	9c 7f       	andi	r25, 0xFC	; 252
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	83 70       	andi	r24, 0x03	; 3
    125a:	89 2b       	or	r24, r25
    125c:	8c 93       	st	X, r24
	/* Set I2C address for current device for slave case */
	OVERWRITE_REG(TWAR, 0x01, (*I2CConfig).address);
    125e:	a2 e2       	ldi	r26, 0x22	; 34
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e2 e2       	ldi	r30, 0x22	; 34
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	98 2f       	mov	r25, r24
    126a:	91 70       	andi	r25, 0x01	; 1
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	81 81       	ldd	r24, Z+1	; 0x01
    1272:	8f 77       	andi	r24, 0x7F	; 127
    1274:	89 2b       	or	r24, r25
    1276:	8c 93       	st	X, r24
	/* Set general call recognition */
	switch ((*I2CConfig).GCREnable)
    1278:	e9 81       	ldd	r30, Y+1	; 0x01
    127a:	fa 81       	ldd	r31, Y+2	; 0x02
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	86 95       	lsr	r24
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3c 83       	std	Y+4, r19	; 0x04
    128c:	2b 83       	std	Y+3, r18	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	69 f0       	breq	.+26     	; 0x12b0 <I2C_init+0xdc>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	79 f4       	brne	.+30     	; 0x12be <I2C_init+0xea>
	{
		case LOGIC_HIGH:
			SET_BIT(TWAR, TWGCE);
    12a0:	a2 e2       	ldi	r26, 0x22	; 34
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e2       	ldi	r30, 0x22	; 34
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	81 60       	ori	r24, 0x01	; 1
    12ac:	8c 93       	st	X, r24
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <I2C_init+0xea>
		break;
		case LOGIC_LOW:
			CLEAR_BIT(TWAR, TWGCE);
    12b0:	a2 e2       	ldi	r26, 0x22	; 34
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e2       	ldi	r30, 0x22	; 34
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8e 7f       	andi	r24, 0xFE	; 254
    12bc:	8c 93       	st	X, r24
		break;
	}
}
    12be:	26 96       	adiw	r28, 0x06	; 6
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <I2C_start>:
 * 		Function that sends start bit through I2C.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void I2C_start(void)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    12d8:	a6 e5       	ldi	r26, 0x56	; 86
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e6 e5       	ldi	r30, 0x56	; 86
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	80 68       	ori	r24, 0x80	; 128
    12e4:	8c 93       	st	X, r24
	/* Send start bit */
	SET_BIT(TWCR, TWSTA);
    12e6:	a6 e5       	ldi	r26, 0x56	; 86
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 62       	ori	r24, 0x20	; 32
    12f2:	8c 93       	st	X, r24
	/* Wait for interrupt flag to be set, which means start bit was sent successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    12f4:	e6 e5       	ldi	r30, 0x56	; 86
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	dc f7       	brge	.-10     	; 0x12f4 <I2C_start+0x24>
}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <I2C_stop>:
 * 		Function that sends stop bit through I2C.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void I2C_stop(void)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    130c:	a6 e5       	ldi	r26, 0x56	; 86
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e6 e5       	ldi	r30, 0x56	; 86
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	8c 93       	st	X, r24
	/* Send stop bit */
	SET_BIT(TWCR, TWSTO);
    131a:	a6 e5       	ldi	r26, 0x56	; 86
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e6 e5       	ldi	r30, 0x56	; 86
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	80 61       	ori	r24, 0x10	; 16
    1326:	8c 93       	st	X, r24
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <I2C_writeByte>:
 * [Args]	:
 * [In] data		: Indicates data value.
 * [Return]			: Void.
 */
void I2C_writeByte(uint8 data)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	89 83       	std	Y+1, r24	; 0x01
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    133a:	a6 e5       	ldi	r26, 0x56	; 86
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e6 e5       	ldi	r30, 0x56	; 86
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 68       	ori	r24, 0x80	; 128
    1346:	8c 93       	st	X, r24
	/* Set data to be sent */
	TWDR = data;
    1348:	e3 e2       	ldi	r30, 0x23	; 35
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	80 83       	st	Z, r24
	/* Wait for interrupt flag to be set, which means data was sent successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1350:	e6 e5       	ldi	r30, 0x56	; 86
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	88 23       	and	r24, r24
    1358:	dc f7       	brge	.-10     	; 0x1350 <I2C_writeByte+0x22>
}
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <I2C_readByteWithACK>:
 * 		Function that returns received data through I2C and sends ACK.
 * [Args]		: Void
 * [Return]		: Received data through I2C.
 */
uint8 I2C_readByteWithACK(void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    136a:	a6 e5       	ldi	r26, 0x56	; 86
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e6 e5       	ldi	r30, 0x56	; 86
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 68       	ori	r24, 0x80	; 128
    1376:	8c 93       	st	X, r24
	/* Send acknowledge bit*/
	SET_BIT(TWCR, TWEA);
    1378:	a6 e5       	ldi	r26, 0x56	; 86
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e6 e5       	ldi	r30, 0x56	; 86
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	8c 93       	st	X, r24
	/* Wait for interrupt flag to be set, which means data was received successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1386:	e6 e5       	ldi	r30, 0x56	; 86
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	dc f7       	brge	.-10     	; 0x1386 <I2C_readByteWithACK+0x24>
	/* Read data */
	return TWDR;
    1390:	e3 e2       	ldi	r30, 0x23	; 35
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <I2C_readByteWithNACK>:
 * 		Function that returns received data through I2C and does not send ACK.
 * [Args]		: Void
 * [Return]		: Received data through I2C.
 */
uint8 I2C_readByteWithNACK(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    13a4:	a6 e5       	ldi	r26, 0x56	; 86
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e6 e5       	ldi	r30, 0x56	; 86
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8c 93       	st	X, r24
	/* Do not send acknowledge bit*/
	/* Wait for interrupt flag to be set, which means data was received successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    13b2:	e6 e5       	ldi	r30, 0x56	; 86
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	88 23       	and	r24, r24
    13ba:	dc f7       	brge	.-10     	; 0x13b2 <I2C_readByteWithNACK+0x16>
	/* Read data */
	return TWDR;
    13bc:	e3 e2       	ldi	r30, 0x23	; 35
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <I2C_getStatus>:
 * 		Function that return I2C status.
 * [Args]		: Void
 * [Return]		: I2C status.
 */
uint8 I2C_getStatus(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	/* Define a variable that will carry I2C status */
	uint8 status;
	/* Eliminate 3 LSBs and get 5 MSBs */
	status = TWSR & 0xF8;
    13d2:	e1 e2       	ldi	r30, 0x21	; 33
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 7f       	andi	r24, 0xF8	; 248
    13da:	89 83       	std	Y+1, r24	; 0x01
	/* Read status */
	return status;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <__vector_11>:
 * [Interrupt Vector]	: TIMER0_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer0.
 */
ISR(TIMER0_OVF_vect)
{
    13e6:	1f 92       	push	r1
    13e8:	0f 92       	push	r0
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	0f 92       	push	r0
    13ee:	11 24       	eor	r1, r1
    13f0:	2f 93       	push	r18
    13f2:	3f 93       	push	r19
    13f4:	4f 93       	push	r20
    13f6:	5f 93       	push	r21
    13f8:	6f 93       	push	r22
    13fa:	7f 93       	push	r23
    13fc:	8f 93       	push	r24
    13fe:	9f 93       	push	r25
    1400:	af 93       	push	r26
    1402:	bf 93       	push	r27
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1410:	80 91 68 00 	lds	r24, 0x0068
    1414:	90 91 69 00 	lds	r25, 0x0069
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	29 f0       	breq	.+10     	; 0x1426 <__vector_11+0x40>
	{
		(*g_timer0CallBack_Ptr)(); /* Execute callback function */
    141c:	e0 91 68 00 	lds	r30, 0x0068
    1420:	f0 91 69 00 	lds	r31, 0x0069
    1424:	09 95       	icall
	}
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_10>:
 * [Interrupt Vector]	: TIMER0_COMP_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer0.
 */
ISR(TIMER0_COMP_vect)
{
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1476:	80 91 68 00 	lds	r24, 0x0068
    147a:	90 91 69 00 	lds	r25, 0x0069
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	29 f0       	breq	.+10     	; 0x148c <__vector_10+0x40>
	{
		(*g_timer0CallBack_Ptr)(); /* Execute callback function */
    1482:	e0 91 68 00 	lds	r30, 0x0068
    1486:	f0 91 69 00 	lds	r31, 0x0069
    148a:	09 95       	icall
	}
}
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <__vector_9>:
 * [Interrupt Vector]	: TIMER1_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer1.
 */
ISR(TIMER1_OVF_vect)
{
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    14dc:	80 91 6a 00 	lds	r24, 0x006A
    14e0:	90 91 6b 00 	lds	r25, 0x006B
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <__vector_9+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    14e8:	e0 91 6a 00 	lds	r30, 0x006A
    14ec:	f0 91 6b 00 	lds	r31, 0x006B
    14f0:	09 95       	icall
	}
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_7>:
 * [Interrupt Vector]	: TIMER1_COMPA_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit A.
 */
ISR(TIMER1_COMPA_vect)
{
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	6f 93       	push	r22
    152c:	7f 93       	push	r23
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	af 93       	push	r26
    1534:	bf 93       	push	r27
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1542:	80 91 6a 00 	lds	r24, 0x006A
    1546:	90 91 6b 00 	lds	r25, 0x006B
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	29 f0       	breq	.+10     	; 0x1558 <__vector_7+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    154e:	e0 91 6a 00 	lds	r30, 0x006A
    1552:	f0 91 6b 00 	lds	r31, 0x006B
    1556:	09 95       	icall
	}
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_8>:
 * [Interrupt Vector]	: TIMER1_COMPB_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit B.
 */
ISR(TIMER1_COMPB_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitB_Ptr != NULL_PTR) /* If callback function pointer is not void */
    15a8:	80 91 6c 00 	lds	r24, 0x006C
    15ac:	90 91 6d 00 	lds	r25, 0x006D
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	29 f0       	breq	.+10     	; 0x15be <__vector_8+0x40>
	{
		(*g_timer1CallBackUnitB_Ptr)(); /* Execute callback function */
    15b4:	e0 91 6c 00 	lds	r30, 0x006C
    15b8:	f0 91 6d 00 	lds	r31, 0x006D
    15bc:	09 95       	icall
	}
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <Timer0_init>:
 * [In] timerConfig		: Contains selected mode, selected output compare mode and
 * 						  interrupt state.
 * [Return]				: Void.
 */
void Timer0_init(const Timer_initConfig *timerConfig)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	2d 97       	sbiw	r28, 0x0d	; 13
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR0);
    15fc:	e3 e5       	ldi	r30, 0x53	; 83
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	20 81       	ld	r18, Z
    1602:	e3 e5       	ldi	r30, 0x53	; 83
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    1608:	e9 81       	ldd	r30, Y+1	; 0x01
    160a:	fa 81       	ldd	r31, Y+2	; 0x02
    160c:	80 81       	ld	r24, Z
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3c 87       	std	Y+12, r19	; 0x0c
    1616:	2b 87       	std	Y+11, r18	; 0x0b
    1618:	8b 85       	ldd	r24, Y+11	; 0x0b
    161a:	9c 85       	ldd	r25, Y+12	; 0x0c
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	e9 f0       	breq	.+58     	; 0x165c <Timer0_init+0x78>
    1622:	2b 85       	ldd	r18, Y+11	; 0x0b
    1624:	3c 85       	ldd	r19, Y+12	; 0x0c
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <Timer0_init+0x52>
    162c:	8b 85       	ldd	r24, Y+11	; 0x0b
    162e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <Timer0_init+0x68>
    1634:	38 c0       	rjmp	.+112    	; 0x16a6 <Timer0_init+0xc2>
    1636:	2b 85       	ldd	r18, Y+11	; 0x0b
    1638:	3c 85       	ldd	r19, Y+12	; 0x0c
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	b1 f0       	breq	.+44     	; 0x166c <Timer0_init+0x88>
    1640:	8b 85       	ldd	r24, Y+11	; 0x0b
    1642:	9c 85       	ldd	r25, Y+12	; 0x0c
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	01 f1       	breq	.+64     	; 0x168a <Timer0_init+0xa6>
    164a:	2d c0       	rjmp	.+90     	; 0x16a6 <Timer0_init+0xc2>
	{
		case TIMER8BIT_NORMAL:
			SET_BIT(TCCR0, FOC0); /* Only enable in non-PWM mode */
    164c:	a3 e5       	ldi	r26, 0x53	; 83
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	8c 93       	st	X, r24
    165a:	25 c0       	rjmp	.+74     	; 0x16a6 <Timer0_init+0xc2>
		break;
		case TIMER8BIT_PHASE_PWM:
			SET_BIT(TCCR0, WGM00);
    165c:	a3 e5       	ldi	r26, 0x53	; 83
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e5       	ldi	r30, 0x53	; 83
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	8c 93       	st	X, r24
    166a:	1d c0       	rjmp	.+58     	; 0x16a6 <Timer0_init+0xc2>
		break;
		case TIMER8BIT_CTC:
			SET_BIT(TCCR0, FOC0); /* Only enable in non-PWM mode */
    166c:	a3 e5       	ldi	r26, 0x53	; 83
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e3 e5       	ldi	r30, 0x53	; 83
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    167a:	a3 e5       	ldi	r26, 0x53	; 83
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e5       	ldi	r30, 0x53	; 83
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 60       	ori	r24, 0x08	; 8
    1686:	8c 93       	st	X, r24
    1688:	0e c0       	rjmp	.+28     	; 0x16a6 <Timer0_init+0xc2>
		break;
		case TIMER8BIT_FAST_PWM:
			SET_BIT(TCCR0, WGM01);
    168a:	a3 e5       	ldi	r26, 0x53	; 83
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e3 e5       	ldi	r30, 0x53	; 83
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 60       	ori	r24, 0x08	; 8
    1696:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM00);
    1698:	a3 e5       	ldi	r26, 0x53	; 83
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e3 e5       	ldi	r30, 0x53	; 83
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	80 64       	ori	r24, 0x40	; 64
    16a4:	8c 93       	st	X, r24
		break;
	}
	if ((*timerConfig).mode == TIMER8BIT_CTC)
    16a6:	e9 81       	ldd	r30, Y+1	; 0x01
    16a8:	fa 81       	ldd	r31, Y+2	; 0x02
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 70       	andi	r24, 0x0F	; 15
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <Timer0_init+0xd0>
    16b2:	a1 c0       	rjmp	.+322    	; 0x17f6 <Timer0_init+0x212>
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	80 81       	ld	r24, Z
    16ba:	82 95       	swap	r24
    16bc:	86 95       	lsr	r24
    16be:	86 95       	lsr	r24
    16c0:	83 70       	andi	r24, 0x03	; 3
    16c2:	81 70       	andi	r24, 0x01	; 1
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3a 87       	std	Y+10, r19	; 0x0a
    16ca:	29 87       	std	Y+9, r18	; 0x09
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	a1 f0       	breq	.+40     	; 0x16fc <Timer0_init+0x118>
    16d4:	29 85       	ldd	r18, Y+9	; 0x09
    16d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d8:	21 30       	cpi	r18, 0x01	; 1
    16da:	31 05       	cpc	r19, r1
    16dc:	e9 f4       	brne	.+58     	; 0x1718 <Timer0_init+0x134>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE0);
    16de:	a9 e5       	ldi	r26, 0x59	; 89
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e9 e5       	ldi	r30, 0x59	; 89
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	82 60       	ori	r24, 0x02	; 2
    16ea:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    16ec:	a9 e5       	ldi	r26, 0x59	; 89
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e9 e5       	ldi	r30, 0x59	; 89
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8e 7f       	andi	r24, 0xFE	; 254
    16f8:	8c 93       	st	X, r24
    16fa:	0e c0       	rjmp	.+28     	; 0x1718 <Timer0_init+0x134>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE0);
    16fc:	a9 e5       	ldi	r26, 0x59	; 89
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e9 e5       	ldi	r30, 0x59	; 89
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    170a:	a9 e5       	ldi	r26, 0x59	; 89
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e9 e5       	ldi	r30, 0x59	; 89
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8e 7f       	andi	r24, 0xFE	; 254
    1716:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	80 81       	ld	r24, Z
    171e:	82 95       	swap	r24
    1720:	8f 70       	andi	r24, 0x0F	; 15
    1722:	83 70       	andi	r24, 0x03	; 3
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	38 87       	std	Y+8, r19	; 0x08
    172a:	2f 83       	std	Y+7, r18	; 0x07
    172c:	8f 81       	ldd	r24, Y+7	; 0x07
    172e:	98 85       	ldd	r25, Y+8	; 0x08
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	21 f1       	breq	.+72     	; 0x177e <Timer0_init+0x19a>
    1736:	2f 81       	ldd	r18, Y+7	; 0x07
    1738:	38 85       	ldd	r19, Y+8	; 0x08
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <Timer0_init+0x166>
    1740:	8f 81       	ldd	r24, Y+7	; 0x07
    1742:	98 85       	ldd	r25, Y+8	; 0x08
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	61 f0       	breq	.+24     	; 0x1760 <Timer0_init+0x17c>
    1748:	e3 c0       	rjmp	.+454    	; 0x1910 <Timer0_init+0x32c>
    174a:	2f 81       	ldd	r18, Y+7	; 0x07
    174c:	38 85       	ldd	r19, Y+8	; 0x08
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	49 f1       	breq	.+82     	; 0x17a6 <Timer0_init+0x1c2>
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	98 85       	ldd	r25, Y+8	; 0x08
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	c1 f1       	breq	.+112    	; 0x17ce <Timer0_init+0x1ea>
    175e:	d8 c0       	rjmp	.+432    	; 0x1910 <Timer0_init+0x32c>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR0, COM01);
    1760:	a3 e5       	ldi	r26, 0x53	; 83
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e3 e5       	ldi	r30, 0x53	; 83
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8f 7d       	andi	r24, 0xDF	; 223
    176c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    176e:	a3 e5       	ldi	r26, 0x53	; 83
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e3 e5       	ldi	r30, 0x53	; 83
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 7e       	andi	r24, 0xEF	; 239
    177a:	8c 93       	st	X, r24
    177c:	c9 c0       	rjmp	.+402    	; 0x1910 <Timer0_init+0x32c>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR0, COM01);
    177e:	a3 e5       	ldi	r26, 0x53	; 83
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e3 e5       	ldi	r30, 0x53	; 83
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8f 7d       	andi	r24, 0xDF	; 223
    178a:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    178c:	a3 e5       	ldi	r26, 0x53	; 83
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e3 e5       	ldi	r30, 0x53	; 83
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 61       	ori	r24, 0x10	; 16
    1798:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	63 e0       	ldi	r22, 0x03	; 3
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    17a4:	b5 c0       	rjmp	.+362    	; 0x1910 <Timer0_init+0x32c>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR0, COM01);
    17a6:	a3 e5       	ldi	r26, 0x53	; 83
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e3 e5       	ldi	r30, 0x53	; 83
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 62       	ori	r24, 0x20	; 32
    17b2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    17b4:	a3 e5       	ldi	r26, 0x53	; 83
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e3 e5       	ldi	r30, 0x53	; 83
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 7e       	andi	r24, 0xEF	; 239
    17c0:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	63 e0       	ldi	r22, 0x03	; 3
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    17cc:	a1 c0       	rjmp	.+322    	; 0x1910 <Timer0_init+0x32c>
			break;
			case SET_OC:
				SET_BIT(TCCR0, COM01);
    17ce:	a3 e5       	ldi	r26, 0x53	; 83
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e3 e5       	ldi	r30, 0x53	; 83
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 62       	ori	r24, 0x20	; 32
    17da:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    17dc:	a3 e5       	ldi	r26, 0x53	; 83
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e3 e5       	ldi	r30, 0x53	; 83
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 61       	ori	r24, 0x10	; 16
    17e8:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	63 e0       	ldi	r22, 0x03	; 3
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    17f4:	8d c0       	rjmp	.+282    	; 0x1910 <Timer0_init+0x32c>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	80 81       	ld	r24, Z
    17fc:	82 95       	swap	r24
    17fe:	86 95       	lsr	r24
    1800:	86 95       	lsr	r24
    1802:	83 70       	andi	r24, 0x03	; 3
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3e 83       	std	Y+6, r19	; 0x06
    180c:	2d 83       	std	Y+5, r18	; 0x05
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	a1 f0       	breq	.+40     	; 0x183e <Timer0_init+0x25a>
    1816:	2d 81       	ldd	r18, Y+5	; 0x05
    1818:	3e 81       	ldd	r19, Y+6	; 0x06
    181a:	21 30       	cpi	r18, 0x01	; 1
    181c:	31 05       	cpc	r19, r1
    181e:	e9 f4       	brne	.+58     	; 0x185a <Timer0_init+0x276>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE0);
    1820:	a9 e5       	ldi	r26, 0x59	; 89
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e9 e5       	ldi	r30, 0x59	; 89
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8d 7f       	andi	r24, 0xFD	; 253
    182c:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE0);
    182e:	a9 e5       	ldi	r26, 0x59	; 89
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e9 e5       	ldi	r30, 0x59	; 89
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	81 60       	ori	r24, 0x01	; 1
    183a:	8c 93       	st	X, r24
    183c:	0e c0       	rjmp	.+28     	; 0x185a <Timer0_init+0x276>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE0);
    183e:	a9 e5       	ldi	r26, 0x59	; 89
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e9 e5       	ldi	r30, 0x59	; 89
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8d 7f       	andi	r24, 0xFD	; 253
    184a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    184c:	a9 e5       	ldi	r26, 0x59	; 89
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e9 e5       	ldi	r30, 0x59	; 89
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8e 7f       	andi	r24, 0xFE	; 254
    1858:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    185a:	e9 81       	ldd	r30, Y+1	; 0x01
    185c:	fa 81       	ldd	r31, Y+2	; 0x02
    185e:	80 81       	ld	r24, Z
    1860:	82 95       	swap	r24
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	83 70       	andi	r24, 0x03	; 3
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3c 83       	std	Y+4, r19	; 0x04
    186c:	2b 83       	std	Y+3, r18	; 0x03
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	91 05       	cpc	r25, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <Timer0_init+0x296>
    1878:	4b c0       	rjmp	.+150    	; 0x1910 <Timer0_init+0x32c>
    187a:	2b 81       	ldd	r18, Y+3	; 0x03
    187c:	3c 81       	ldd	r19, Y+4	; 0x04
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	2c f4       	brge	.+10     	; 0x188e <Timer0_init+0x2aa>
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	61 f0       	breq	.+24     	; 0x18a4 <Timer0_init+0x2c0>
    188c:	41 c0       	rjmp	.+130    	; 0x1910 <Timer0_init+0x32c>
    188e:	2b 81       	ldd	r18, Y+3	; 0x03
    1890:	3c 81       	ldd	r19, Y+4	; 0x04
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	a9 f0       	breq	.+42     	; 0x18c2 <Timer0_init+0x2de>
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	91 05       	cpc	r25, r1
    18a0:	21 f1       	breq	.+72     	; 0x18ea <Timer0_init+0x306>
    18a2:	36 c0       	rjmp	.+108    	; 0x1910 <Timer0_init+0x32c>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR0, COM01);
    18a4:	a3 e5       	ldi	r26, 0x53	; 83
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e3 e5       	ldi	r30, 0x53	; 83
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8f 7d       	andi	r24, 0xDF	; 223
    18b0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    18b2:	a3 e5       	ldi	r26, 0x53	; 83
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e3 e5       	ldi	r30, 0x53	; 83
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7e       	andi	r24, 0xEF	; 239
    18be:	8c 93       	st	X, r24
    18c0:	27 c0       	rjmp	.+78     	; 0x1910 <Timer0_init+0x32c>
			break;
			case TOGGLE_OC:
			break;
			case CLEAR_OC:
				SET_BIT(TCCR0, COM01);
    18c2:	a3 e5       	ldi	r26, 0x53	; 83
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e3 e5       	ldi	r30, 0x53	; 83
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	80 62       	ori	r24, 0x20	; 32
    18ce:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    18d0:	a3 e5       	ldi	r26, 0x53	; 83
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e3 e5       	ldi	r30, 0x53	; 83
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8f 7e       	andi	r24, 0xEF	; 239
    18dc:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	63 e0       	ldi	r22, 0x03	; 3
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    18e8:	13 c0       	rjmp	.+38     	; 0x1910 <Timer0_init+0x32c>
			break;
			case SET_OC:
				SET_BIT(TCCR0, COM01);
    18ea:	a3 e5       	ldi	r26, 0x53	; 83
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e3 e5       	ldi	r30, 0x53	; 83
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 62       	ori	r24, 0x20	; 32
    18f6:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    18f8:	a3 e5       	ldi	r26, 0x53	; 83
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e3 e5       	ldi	r30, 0x53	; 83
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 61       	ori	r24, 0x10	; 16
    1904:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	63 e0       	ldi	r22, 0x03	; 3
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			break;
		}
	}
}
    1910:	2d 96       	adiw	r28, 0x0d	; 13
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <Timer0_setCallBack>:
 * 		for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_setCallBack(void (*Ptr2Function)(void))
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <Timer0_setCallBack+0x6>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
	g_timer0CallBack_Ptr = Ptr2Function;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	90 93 69 00 	sts	0x0069, r25
    1938:	80 93 68 00 	sts	0x0068, r24
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <Timer0_start>:
 * [In] start				: Indicates start value.
 * [In] compareValue		: Indicates compare value.
 * [Return]					: Void.
 */
void Timer0_start(TIMER01_PRESCALER prescaler, uint8 start, uint8 compareValue)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <Timer0_start+0x6>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	6a 83       	std	Y+2, r22	; 0x02
    1956:	4b 83       	std	Y+3, r20	; 0x03
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	87 70       	andi	r24, 0x07	; 7
    195c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = start; /* Set timer starting value */
    195e:	e2 e5       	ldi	r30, 0x52	; 82
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	80 83       	st	Z, r24
	OCR0 = compareValue; /* Set timer compare value */
    1966:	ec e5       	ldi	r30, 0x5C	; 92
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	80 83       	st	Z, r24
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR0, 0xF8, prescaler);
    196e:	a3 e5       	ldi	r26, 0x53	; 83
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e3 e5       	ldi	r30, 0x53	; 83
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	98 2f       	mov	r25, r24
    197a:	98 7f       	andi	r25, 0xF8	; 248
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	89 2b       	or	r24, r25
    1980:	8c 93       	st	X, r24
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <Timer0_stop>:
 * 		Function that stops timer0 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_stop(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR0, 0xF8, 0x00); /* Clear pre-scaler */
    1996:	a3 e5       	ldi	r26, 0x53	; 83
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e3 e5       	ldi	r30, 0x53	; 83
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 7f       	andi	r24, 0xF8	; 248
    19a2:	8c 93       	st	X, r24
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <Timer0_deInit>:
 * 		Function that clears all timer0 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_deInit(void)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <Timer0_deInit+0x6>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	/* Clear timer0 registers */
	CLEAR_REG(TCCR0);
    19b6:	e3 e5       	ldi	r30, 0x53	; 83
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	e3 e5       	ldi	r30, 0x53	; 83
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	10 82       	st	Z, r1
	CLEAR_REG(TCNT0);
    19c2:	e2 e5       	ldi	r30, 0x52	; 82
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	e2 e5       	ldi	r30, 0x52	; 82
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	10 82       	st	Z, r1
	CLEAR_REG(OCR0);
    19ce:	ec e5       	ldi	r30, 0x5C	; 92
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	ec e5       	ldi	r30, 0x5C	; 92
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	10 82       	st	Z, r1
	/* Disable timer0 interrupts */
	CLEAR_BIT(TIMSK, OCIE0);
    19da:	a9 e5       	ldi	r26, 0x59	; 89
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e9 e5       	ldi	r30, 0x59	; 89
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8d 7f       	andi	r24, 0xFD	; 253
    19e6:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE0);
    19e8:	a9 e5       	ldi	r26, 0x59	; 89
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e9 e5       	ldi	r30, 0x59	; 89
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8e 7f       	andi	r24, 0xFE	; 254
    19f4:	8c 93       	st	X, r24
	/* Clear timer0 flags */
	SET_BIT(TIFR, OCF0);
    19f6:	a8 e5       	ldi	r26, 0x58	; 88
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e5       	ldi	r30, 0x58	; 88
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	82 60       	ori	r24, 0x02	; 2
    1a02:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV0);
    1a04:	a8 e5       	ldi	r26, 0x58	; 88
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e5       	ldi	r30, 0x58	; 88
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	8c 93       	st	X, r24
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <Timer1_init>:
#endif

#if (TIMER1_ENABLE == TRUE)

void Timer1_init(const Timer_initConfig *timerConfig)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	2e 97       	sbiw	r28, 0x0e	; 14
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR1A);
    1a36:	ef e4       	ldi	r30, 0x4F	; 79
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	20 81       	ld	r18, Z
    1a3c:	ef e4       	ldi	r30, 0x4F	; 79
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    1a42:	ee e4       	ldi	r30, 0x4E	; 78
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	30 81       	ld	r19, Z
    1a48:	ee e4       	ldi	r30, 0x4E	; 78
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 70       	andi	r24, 0x0F	; 15
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3c 87       	std	Y+12, r19	; 0x0c
    1a5c:	2b 87       	std	Y+11, r18	; 0x0b
    1a5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a62:	87 30       	cpi	r24, 0x07	; 7
    1a64:	91 05       	cpc	r25, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <Timer1_init+0x4c>
    1a68:	40 c1       	rjmp	.+640    	; 0x1cea <Timer1_init+0x2cc>
    1a6a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a6c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a6e:	28 30       	cpi	r18, 0x08	; 8
    1a70:	31 05       	cpc	r19, r1
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <Timer1_init+0xa8>
    1a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <Timer1_init+0x62>
    1a7e:	b3 c0       	rjmp	.+358    	; 0x1be6 <Timer1_init+0x1c8>
    1a80:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a82:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a84:	24 30       	cpi	r18, 0x04	; 4
    1a86:	31 05       	cpc	r19, r1
    1a88:	8c f4       	brge	.+34     	; 0x1aac <Timer1_init+0x8e>
    1a8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <Timer1_init+0x78>
    1a94:	6e c0       	rjmp	.+220    	; 0x1b72 <Timer1_init+0x154>
    1a96:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a98:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	0c f0       	brlt	.+2      	; 0x1aa2 <Timer1_init+0x84>
    1aa0:	85 c0       	rjmp	.+266    	; 0x1bac <Timer1_init+0x18e>
    1aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	c9 f1       	breq	.+114    	; 0x1b1c <Timer1_init+0xfe>
    1aaa:	14 c2       	rjmp	.+1064   	; 0x1ed4 <Timer1_init+0x4b6>
    1aac:	2b 85       	ldd	r18, Y+11	; 0x0b
    1aae:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ab0:	25 30       	cpi	r18, 0x05	; 5
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <Timer1_init+0x9a>
    1ab6:	df c0       	rjmp	.+446    	; 0x1c76 <Timer1_init+0x258>
    1ab8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aba:	9c 85       	ldd	r25, Y+12	; 0x0c
    1abc:	86 30       	cpi	r24, 0x06	; 6
    1abe:	91 05       	cpc	r25, r1
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <Timer1_init+0xa6>
    1ac2:	f6 c0       	rjmp	.+492    	; 0x1cb0 <Timer1_init+0x292>
    1ac4:	ad c0       	rjmp	.+346    	; 0x1c20 <Timer1_init+0x202>
    1ac6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ac8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1aca:	2b 30       	cpi	r18, 0x0B	; 11
    1acc:	31 05       	cpc	r19, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <Timer1_init+0xb4>
    1ad0:	80 c1       	rjmp	.+768    	; 0x1dd2 <Timer1_init+0x3b4>
    1ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad6:	8c 30       	cpi	r24, 0x0C	; 12
    1ad8:	91 05       	cpc	r25, r1
    1ada:	6c f4       	brge	.+26     	; 0x1af6 <Timer1_init+0xd8>
    1adc:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ade:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ae0:	29 30       	cpi	r18, 0x09	; 9
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <Timer1_init+0xca>
    1ae6:	3b c1       	rjmp	.+630    	; 0x1d5e <Timer1_init+0x340>
    1ae8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aea:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aec:	8a 30       	cpi	r24, 0x0A	; 10
    1aee:	91 05       	cpc	r25, r1
    1af0:	0c f0       	brlt	.+2      	; 0x1af4 <Timer1_init+0xd6>
    1af2:	52 c1       	rjmp	.+676    	; 0x1d98 <Timer1_init+0x37a>
    1af4:	17 c1       	rjmp	.+558    	; 0x1d24 <Timer1_init+0x306>
    1af6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1af8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1afa:	2e 30       	cpi	r18, 0x0E	; 14
    1afc:	31 05       	cpc	r19, r1
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <Timer1_init+0xe4>
    1b00:	b0 c1       	rjmp	.+864    	; 0x1e62 <Timer1_init+0x444>
    1b02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b04:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b06:	8f 30       	cpi	r24, 0x0F	; 15
    1b08:	91 05       	cpc	r25, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <Timer1_init+0xf0>
    1b0c:	c7 c1       	rjmp	.+910    	; 0x1e9c <Timer1_init+0x47e>
    1b0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b10:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b12:	2c 30       	cpi	r18, 0x0C	; 12
    1b14:	31 05       	cpc	r19, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <Timer1_init+0xfc>
    1b18:	79 c1       	rjmp	.+754    	; 0x1e0c <Timer1_init+0x3ee>
    1b1a:	dc c1       	rjmp	.+952    	; 0x1ed4 <Timer1_init+0x4b6>
	{
		case TIMER16BIT_NORMAL:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    1b1c:	af e4       	ldi	r26, 0x4F	; 79
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ef e4       	ldi	r30, 0x4F	; 79
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	88 60       	ori	r24, 0x08	; 8
    1b28:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1b2a:	af e4       	ldi	r26, 0x4F	; 79
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ef e4       	ldi	r30, 0x4F	; 79
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	84 60       	ori	r24, 0x04	; 4
    1b36:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    1b38:	ae e4       	ldi	r26, 0x4E	; 78
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	ee e4       	ldi	r30, 0x4E	; 78
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	8f 7e       	andi	r24, 0xEF	; 239
    1b44:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1b46:	ae e4       	ldi	r26, 0x4E	; 78
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ee e4       	ldi	r30, 0x4E	; 78
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	87 7f       	andi	r24, 0xF7	; 247
    1b52:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1b54:	af e4       	ldi	r26, 0x4F	; 79
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ef e4       	ldi	r30, 0x4F	; 79
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8d 7f       	andi	r24, 0xFD	; 253
    1b60:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1b62:	af e4       	ldi	r26, 0x4F	; 79
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ef e4       	ldi	r30, 0x4F	; 79
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	8c 93       	st	X, r24
    1b70:	b1 c1       	rjmp	.+866    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1b72:	ae e4       	ldi	r26, 0x4E	; 78
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ee e4       	ldi	r30, 0x4E	; 78
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8f 7e       	andi	r24, 0xEF	; 239
    1b7e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1b80:	ae e4       	ldi	r26, 0x4E	; 78
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ee e4       	ldi	r30, 0x4E	; 78
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	87 7f       	andi	r24, 0xF7	; 247
    1b8c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1b8e:	af e4       	ldi	r26, 0x4F	; 79
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ef e4       	ldi	r30, 0x4F	; 79
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8d 7f       	andi	r24, 0xFD	; 253
    1b9a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1b9c:	af e4       	ldi	r26, 0x4F	; 79
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	ef e4       	ldi	r30, 0x4F	; 79
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	81 60       	ori	r24, 0x01	; 1
    1ba8:	8c 93       	st	X, r24
    1baa:	94 c1       	rjmp	.+808    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1bac:	ae e4       	ldi	r26, 0x4E	; 78
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ee e4       	ldi	r30, 0x4E	; 78
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7e       	andi	r24, 0xEF	; 239
    1bb8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1bba:	ae e4       	ldi	r26, 0x4E	; 78
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	ee e4       	ldi	r30, 0x4E	; 78
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	87 7f       	andi	r24, 0xF7	; 247
    1bc6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1bc8:	af e4       	ldi	r26, 0x4F	; 79
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	ef e4       	ldi	r30, 0x4F	; 79
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	82 60       	ori	r24, 0x02	; 2
    1bd4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1bd6:	af e4       	ldi	r26, 0x4F	; 79
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	ef e4       	ldi	r30, 0x4F	; 79
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8e 7f       	andi	r24, 0xFE	; 254
    1be2:	8c 93       	st	X, r24
    1be4:	77 c1       	rjmp	.+750    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1be6:	ae e4       	ldi	r26, 0x4E	; 78
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ee e4       	ldi	r30, 0x4E	; 78
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 7e       	andi	r24, 0xEF	; 239
    1bf2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1bf4:	ae e4       	ldi	r26, 0x4E	; 78
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ee e4       	ldi	r30, 0x4E	; 78
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	87 7f       	andi	r24, 0xF7	; 247
    1c00:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1c02:	af e4       	ldi	r26, 0x4F	; 79
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	ef e4       	ldi	r30, 0x4F	; 79
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1c10:	af e4       	ldi	r26, 0x4F	; 79
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	ef e4       	ldi	r30, 0x4F	; 79
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	81 60       	ori	r24, 0x01	; 1
    1c1c:	8c 93       	st	X, r24
    1c1e:	5a c1       	rjmp	.+692    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_OCR1A:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    1c20:	af e4       	ldi	r26, 0x4F	; 79
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	ef e4       	ldi	r30, 0x4F	; 79
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 60       	ori	r24, 0x08	; 8
    1c2c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1c2e:	af e4       	ldi	r26, 0x4F	; 79
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ef e4       	ldi	r30, 0x4F	; 79
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    1c3c:	ae e4       	ldi	r26, 0x4E	; 78
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ee e4       	ldi	r30, 0x4E	; 78
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7e       	andi	r24, 0xEF	; 239
    1c48:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1c4a:	ae e4       	ldi	r26, 0x4E	; 78
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ee e4       	ldi	r30, 0x4E	; 78
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	88 60       	ori	r24, 0x08	; 8
    1c56:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1c58:	af e4       	ldi	r26, 0x4F	; 79
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ef e4       	ldi	r30, 0x4F	; 79
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8d 7f       	andi	r24, 0xFD	; 253
    1c64:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1c66:	af e4       	ldi	r26, 0x4F	; 79
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ef e4       	ldi	r30, 0x4F	; 79
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8e 7f       	andi	r24, 0xFE	; 254
    1c72:	8c 93       	st	X, r24
    1c74:	2f c1       	rjmp	.+606    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1c76:	ae e4       	ldi	r26, 0x4E	; 78
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	ee e4       	ldi	r30, 0x4E	; 78
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 7e       	andi	r24, 0xEF	; 239
    1c82:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1c84:	ae e4       	ldi	r26, 0x4E	; 78
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ee e4       	ldi	r30, 0x4E	; 78
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 60       	ori	r24, 0x08	; 8
    1c90:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1c92:	af e4       	ldi	r26, 0x4F	; 79
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	ef e4       	ldi	r30, 0x4F	; 79
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8d 7f       	andi	r24, 0xFD	; 253
    1c9e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1ca0:	af e4       	ldi	r26, 0x4F	; 79
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	ef e4       	ldi	r30, 0x4F	; 79
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	81 60       	ori	r24, 0x01	; 1
    1cac:	8c 93       	st	X, r24
    1cae:	12 c1       	rjmp	.+548    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1cb0:	ae e4       	ldi	r26, 0x4E	; 78
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ee e4       	ldi	r30, 0x4E	; 78
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 7e       	andi	r24, 0xEF	; 239
    1cbc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1cbe:	ae e4       	ldi	r26, 0x4E	; 78
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ee e4       	ldi	r30, 0x4E	; 78
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	88 60       	ori	r24, 0x08	; 8
    1cca:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1ccc:	af e4       	ldi	r26, 0x4F	; 79
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ef e4       	ldi	r30, 0x4F	; 79
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	82 60       	ori	r24, 0x02	; 2
    1cd8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1cda:	af e4       	ldi	r26, 0x4F	; 79
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ef e4       	ldi	r30, 0x4F	; 79
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8e 7f       	andi	r24, 0xFE	; 254
    1ce6:	8c 93       	st	X, r24
    1ce8:	f5 c0       	rjmp	.+490    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1cea:	ae e4       	ldi	r26, 0x4E	; 78
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ee e4       	ldi	r30, 0x4E	; 78
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 7e       	andi	r24, 0xEF	; 239
    1cf6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1cf8:	ae e4       	ldi	r26, 0x4E	; 78
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ee e4       	ldi	r30, 0x4E	; 78
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 60       	ori	r24, 0x08	; 8
    1d04:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1d06:	af e4       	ldi	r26, 0x4F	; 79
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	ef e4       	ldi	r30, 0x4F	; 79
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	82 60       	ori	r24, 0x02	; 2
    1d12:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1d14:	af e4       	ldi	r26, 0x4F	; 79
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ef e4       	ldi	r30, 0x4F	; 79
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	81 60       	ori	r24, 0x01	; 1
    1d20:	8c 93       	st	X, r24
    1d22:	d8 c0       	rjmp	.+432    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1d24:	ae e4       	ldi	r26, 0x4E	; 78
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	ee e4       	ldi	r30, 0x4E	; 78
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 61       	ori	r24, 0x10	; 16
    1d30:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1d32:	ae e4       	ldi	r26, 0x4E	; 78
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	ee e4       	ldi	r30, 0x4E	; 78
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	87 7f       	andi	r24, 0xF7	; 247
    1d3e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1d40:	af e4       	ldi	r26, 0x4F	; 79
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	ef e4       	ldi	r30, 0x4F	; 79
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8d 7f       	andi	r24, 0xFD	; 253
    1d4c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1d4e:	af e4       	ldi	r26, 0x4F	; 79
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ef e4       	ldi	r30, 0x4F	; 79
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8e 7f       	andi	r24, 0xFE	; 254
    1d5a:	8c 93       	st	X, r24
    1d5c:	bb c0       	rjmp	.+374    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1d5e:	ae e4       	ldi	r26, 0x4E	; 78
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ee e4       	ldi	r30, 0x4E	; 78
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 61       	ori	r24, 0x10	; 16
    1d6a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1d6c:	ae e4       	ldi	r26, 0x4E	; 78
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ee e4       	ldi	r30, 0x4E	; 78
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	87 7f       	andi	r24, 0xF7	; 247
    1d78:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1d7a:	af e4       	ldi	r26, 0x4F	; 79
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ef e4       	ldi	r30, 0x4F	; 79
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8d 7f       	andi	r24, 0xFD	; 253
    1d86:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1d88:	af e4       	ldi	r26, 0x4F	; 79
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	ef e4       	ldi	r30, 0x4F	; 79
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	81 60       	ori	r24, 0x01	; 1
    1d94:	8c 93       	st	X, r24
    1d96:	9e c0       	rjmp	.+316    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1d98:	ae e4       	ldi	r26, 0x4E	; 78
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ee e4       	ldi	r30, 0x4E	; 78
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 61       	ori	r24, 0x10	; 16
    1da4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1da6:	ae e4       	ldi	r26, 0x4E	; 78
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ee e4       	ldi	r30, 0x4E	; 78
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	87 7f       	andi	r24, 0xF7	; 247
    1db2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1db4:	af e4       	ldi	r26, 0x4F	; 79
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ef e4       	ldi	r30, 0x4F	; 79
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1dc2:	af e4       	ldi	r26, 0x4F	; 79
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ef e4       	ldi	r30, 0x4F	; 79
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8e 7f       	andi	r24, 0xFE	; 254
    1dce:	8c 93       	st	X, r24
    1dd0:	81 c0       	rjmp	.+258    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1dd2:	ae e4       	ldi	r26, 0x4E	; 78
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ee e4       	ldi	r30, 0x4E	; 78
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 61       	ori	r24, 0x10	; 16
    1dde:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1de0:	ae e4       	ldi	r26, 0x4E	; 78
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ee e4       	ldi	r30, 0x4E	; 78
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	87 7f       	andi	r24, 0xF7	; 247
    1dec:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1dee:	af e4       	ldi	r26, 0x4F	; 79
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ef e4       	ldi	r30, 0x4F	; 79
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	82 60       	ori	r24, 0x02	; 2
    1dfa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1dfc:	af e4       	ldi	r26, 0x4F	; 79
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ef e4       	ldi	r30, 0x4F	; 79
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	81 60       	ori	r24, 0x01	; 1
    1e08:	8c 93       	st	X, r24
    1e0a:	64 c0       	rjmp	.+200    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_ICR1:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    1e0c:	af e4       	ldi	r26, 0x4F	; 79
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ef e4       	ldi	r30, 0x4F	; 79
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 60       	ori	r24, 0x08	; 8
    1e18:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1e1a:	af e4       	ldi	r26, 0x4F	; 79
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ef e4       	ldi	r30, 0x4F	; 79
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	84 60       	ori	r24, 0x04	; 4
    1e26:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    1e28:	ae e4       	ldi	r26, 0x4E	; 78
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ee e4       	ldi	r30, 0x4E	; 78
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 61       	ori	r24, 0x10	; 16
    1e34:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1e36:	ae e4       	ldi	r26, 0x4E	; 78
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	ee e4       	ldi	r30, 0x4E	; 78
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 60       	ori	r24, 0x08	; 8
    1e42:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1e44:	af e4       	ldi	r26, 0x4F	; 79
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	ef e4       	ldi	r30, 0x4F	; 79
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8d 7f       	andi	r24, 0xFD	; 253
    1e50:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1e52:	af e4       	ldi	r26, 0x4F	; 79
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	ef e4       	ldi	r30, 0x4F	; 79
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	8c 93       	st	X, r24
    1e60:	39 c0       	rjmp	.+114    	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1e62:	ae e4       	ldi	r26, 0x4E	; 78
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	ee e4       	ldi	r30, 0x4E	; 78
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 61       	ori	r24, 0x10	; 16
    1e6e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1e70:	ae e4       	ldi	r26, 0x4E	; 78
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ee e4       	ldi	r30, 0x4E	; 78
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	88 60       	ori	r24, 0x08	; 8
    1e7c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1e7e:	af e4       	ldi	r26, 0x4F	; 79
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ef e4       	ldi	r30, 0x4F	; 79
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	82 60       	ori	r24, 0x02	; 2
    1e8a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1e8c:	af e4       	ldi	r26, 0x4F	; 79
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ef e4       	ldi	r30, 0x4F	; 79
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8e 7f       	andi	r24, 0xFE	; 254
    1e98:	8c 93       	st	X, r24
    1e9a:	1c c0       	rjmp	.+56     	; 0x1ed4 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1e9c:	ae e4       	ldi	r26, 0x4E	; 78
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ee e4       	ldi	r30, 0x4E	; 78
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 61       	ori	r24, 0x10	; 16
    1ea8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1eaa:	ae e4       	ldi	r26, 0x4E	; 78
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ee e4       	ldi	r30, 0x4E	; 78
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 60       	ori	r24, 0x08	; 8
    1eb6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1eb8:	af e4       	ldi	r26, 0x4F	; 79
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ef e4       	ldi	r30, 0x4F	; 79
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1ec6:	af e4       	ldi	r26, 0x4F	; 79
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ef e4       	ldi	r30, 0x4F	; 79
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	8c 93       	st	X, r24
		break;
	}
	if (((*timerConfig).mode == TIMER16BIT_CTC_OCR1A)
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 70       	andi	r24, 0x0F	; 15
    1edc:	84 30       	cpi	r24, 0x04	; 4
    1ede:	39 f0       	breq	.+14     	; 0x1eee <Timer1_init+0x4d0>
    1ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 70       	andi	r24, 0x0F	; 15
    1ee8:	8c 30       	cpi	r24, 0x0C	; 12
    1eea:	09 f0       	breq	.+2      	; 0x1eee <Timer1_init+0x4d0>
    1eec:	f8 c0       	rjmp	.+496    	; 0x20de <Timer1_init+0x6c0>
			|| ((*timerConfig).mode == TIMER16BIT_CTC_ICR1))
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 95       	swap	r24
    1ef6:	86 95       	lsr	r24
    1ef8:	86 95       	lsr	r24
    1efa:	83 70       	andi	r24, 0x03	; 3
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3a 87       	std	Y+10, r19	; 0x0a
    1f04:	29 87       	std	Y+9, r18	; 0x09
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	d9 f0       	breq	.+54     	; 0x1f44 <Timer1_init+0x526>
    1f0e:	29 85       	ldd	r18, Y+9	; 0x09
    1f10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f12:	21 30       	cpi	r18, 0x01	; 1
    1f14:	31 05       	cpc	r19, r1
    1f16:	59 f5       	brne	.+86     	; 0x1f6e <Timer1_init+0x550>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE1A);
    1f18:	a9 e5       	ldi	r26, 0x59	; 89
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e9 e5       	ldi	r30, 0x59	; 89
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	80 61       	ori	r24, 0x10	; 16
    1f24:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B);
    1f26:	a9 e5       	ldi	r26, 0x59	; 89
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e9 e5       	ldi	r30, 0x59	; 89
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 60       	ori	r24, 0x08	; 8
    1f32:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1f34:	a9 e5       	ldi	r26, 0x59	; 89
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e9 e5       	ldi	r30, 0x59	; 89
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8b 7f       	andi	r24, 0xFB	; 251
    1f40:	8c 93       	st	X, r24
    1f42:	15 c0       	rjmp	.+42     	; 0x1f6e <Timer1_init+0x550>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    1f44:	a9 e5       	ldi	r26, 0x59	; 89
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e9 e5       	ldi	r30, 0x59	; 89
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 7e       	andi	r24, 0xEF	; 239
    1f50:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    1f52:	a9 e5       	ldi	r26, 0x59	; 89
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e9 e5       	ldi	r30, 0x59	; 89
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	87 7f       	andi	r24, 0xF7	; 247
    1f5e:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1f60:	a9 e5       	ldi	r26, 0x59	; 89
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e9 e5       	ldi	r30, 0x59	; 89
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8b 7f       	andi	r24, 0xFB	; 251
    1f6c:	8c 93       	st	X, r24
			break;
		}
		/* Select compare mode */
		switch ((*timerConfig).compareOutputMode)
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	80 81       	ld	r24, Z
    1f74:	82 95       	swap	r24
    1f76:	8f 70       	andi	r24, 0x0F	; 15
    1f78:	83 70       	andi	r24, 0x03	; 3
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	38 87       	std	Y+8, r19	; 0x08
    1f80:	2f 83       	std	Y+7, r18	; 0x07
    1f82:	8f 81       	ldd	r24, Y+7	; 0x07
    1f84:	98 85       	ldd	r25, Y+8	; 0x08
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	a1 f1       	breq	.+104    	; 0x1ff4 <Timer1_init+0x5d6>
    1f8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f8e:	38 85       	ldd	r19, Y+8	; 0x08
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <Timer1_init+0x582>
    1f96:	8f 81       	ldd	r24, Y+7	; 0x07
    1f98:	98 85       	ldd	r25, Y+8	; 0x08
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	71 f0       	breq	.+28     	; 0x1fba <Timer1_init+0x59c>
    1f9e:	a3 c1       	rjmp	.+838    	; 0x22e6 <Timer1_init+0x8c8>
    1fa0:	2f 81       	ldd	r18, Y+7	; 0x07
    1fa2:	38 85       	ldd	r19, Y+8	; 0x08
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <Timer1_init+0x58e>
    1faa:	4b c0       	rjmp	.+150    	; 0x2042 <Timer1_init+0x624>
    1fac:	8f 81       	ldd	r24, Y+7	; 0x07
    1fae:	98 85       	ldd	r25, Y+8	; 0x08
    1fb0:	83 30       	cpi	r24, 0x03	; 3
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <Timer1_init+0x59a>
    1fb6:	6c c0       	rjmp	.+216    	; 0x2090 <Timer1_init+0x672>
    1fb8:	96 c1       	rjmp	.+812    	; 0x22e6 <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1fba:	af e4       	ldi	r26, 0x4F	; 79
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	ef e4       	ldi	r30, 0x4F	; 79
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 77       	andi	r24, 0x7F	; 127
    1fc6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1fc8:	af e4       	ldi	r26, 0x4F	; 79
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	ef e4       	ldi	r30, 0x4F	; 79
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8f 7d       	andi	r24, 0xDF	; 223
    1fd4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1fd6:	af e4       	ldi	r26, 0x4F	; 79
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	ef e4       	ldi	r30, 0x4F	; 79
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	8f 7b       	andi	r24, 0xBF	; 191
    1fe2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1fe4:	af e4       	ldi	r26, 0x4F	; 79
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	ef e4       	ldi	r30, 0x4F	; 79
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 7e       	andi	r24, 0xEF	; 239
    1ff0:	8c 93       	st	X, r24
    1ff2:	79 c1       	rjmp	.+754    	; 0x22e6 <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1ff4:	af e4       	ldi	r26, 0x4F	; 79
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ef e4       	ldi	r30, 0x4F	; 79
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 77       	andi	r24, 0x7F	; 127
    2000:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2002:	af e4       	ldi	r26, 0x4F	; 79
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	ef e4       	ldi	r30, 0x4F	; 79
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8f 7d       	andi	r24, 0xDF	; 223
    200e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2010:	af e4       	ldi	r26, 0x4F	; 79
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ef e4       	ldi	r30, 0x4F	; 79
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	80 64       	ori	r24, 0x40	; 64
    201c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    201e:	af e4       	ldi	r26, 0x4F	; 79
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ef e4       	ldi	r30, 0x4F	; 79
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 61       	ori	r24, 0x10	; 16
    202a:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	64 e0       	ldi	r22, 0x04	; 4
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	65 e0       	ldi	r22, 0x05	; 5
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2040:	52 c1       	rjmp	.+676    	; 0x22e6 <Timer1_init+0x8c8>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    2042:	af e4       	ldi	r26, 0x4F	; 79
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ef e4       	ldi	r30, 0x4F	; 79
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 68       	ori	r24, 0x80	; 128
    204e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2050:	af e4       	ldi	r26, 0x4F	; 79
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	ef e4       	ldi	r30, 0x4F	; 79
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	80 62       	ori	r24, 0x20	; 32
    205c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    205e:	af e4       	ldi	r26, 0x4F	; 79
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	ef e4       	ldi	r30, 0x4F	; 79
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8f 7b       	andi	r24, 0xBF	; 191
    206a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    206c:	af e4       	ldi	r26, 0x4F	; 79
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ef e4       	ldi	r30, 0x4F	; 79
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8f 7e       	andi	r24, 0xEF	; 239
    2078:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	64 e0       	ldi	r22, 0x04	; 4
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	65 e0       	ldi	r22, 0x05	; 5
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    208e:	2b c1       	rjmp	.+598    	; 0x22e6 <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    2090:	af e4       	ldi	r26, 0x4F	; 79
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ef e4       	ldi	r30, 0x4F	; 79
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	80 68       	ori	r24, 0x80	; 128
    209c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    209e:	af e4       	ldi	r26, 0x4F	; 79
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	ef e4       	ldi	r30, 0x4F	; 79
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 62       	ori	r24, 0x20	; 32
    20aa:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    20ac:	af e4       	ldi	r26, 0x4F	; 79
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ef e4       	ldi	r30, 0x4F	; 79
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	80 64       	ori	r24, 0x40	; 64
    20b8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    20ba:	af e4       	ldi	r26, 0x4F	; 79
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	ef e4       	ldi	r30, 0x4F	; 79
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	80 61       	ori	r24, 0x10	; 16
    20c6:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	65 e0       	ldi	r22, 0x05	; 5
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    20dc:	04 c1       	rjmp	.+520    	; 0x22e6 <Timer1_init+0x8c8>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    20de:	e9 81       	ldd	r30, Y+1	; 0x01
    20e0:	fa 81       	ldd	r31, Y+2	; 0x02
    20e2:	80 81       	ld	r24, Z
    20e4:	82 95       	swap	r24
    20e6:	86 95       	lsr	r24
    20e8:	86 95       	lsr	r24
    20ea:	83 70       	andi	r24, 0x03	; 3
    20ec:	81 70       	andi	r24, 0x01	; 1
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	3e 83       	std	Y+6, r19	; 0x06
    20f4:	2d 83       	std	Y+5, r18	; 0x05
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	d9 f0       	breq	.+54     	; 0x2134 <Timer1_init+0x716>
    20fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2100:	3e 81       	ldd	r19, Y+6	; 0x06
    2102:	21 30       	cpi	r18, 0x01	; 1
    2104:	31 05       	cpc	r19, r1
    2106:	59 f5       	brne	.+86     	; 0x215e <Timer1_init+0x740>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE1A);
    2108:	a9 e5       	ldi	r26, 0x59	; 89
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e9 e5       	ldi	r30, 0x59	; 89
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8f 7e       	andi	r24, 0xEF	; 239
    2114:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    2116:	a9 e5       	ldi	r26, 0x59	; 89
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e9 e5       	ldi	r30, 0x59	; 89
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	87 7f       	andi	r24, 0xF7	; 247
    2122:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE1);
    2124:	a9 e5       	ldi	r26, 0x59	; 89
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e9 e5       	ldi	r30, 0x59	; 89
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	84 60       	ori	r24, 0x04	; 4
    2130:	8c 93       	st	X, r24
    2132:	15 c0       	rjmp	.+42     	; 0x215e <Timer1_init+0x740>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    2134:	a9 e5       	ldi	r26, 0x59	; 89
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e9 e5       	ldi	r30, 0x59	; 89
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8f 7e       	andi	r24, 0xEF	; 239
    2140:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    2142:	a9 e5       	ldi	r26, 0x59	; 89
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e9 e5       	ldi	r30, 0x59	; 89
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	87 7f       	andi	r24, 0xF7	; 247
    214e:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    2150:	a9 e5       	ldi	r26, 0x59	; 89
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e9 e5       	ldi	r30, 0x59	; 89
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8b 7f       	andi	r24, 0xFB	; 251
    215c:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	80 81       	ld	r24, Z
    2164:	82 95       	swap	r24
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	83 70       	andi	r24, 0x03	; 3
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	3c 83       	std	Y+4, r19	; 0x04
    2170:	2b 83       	std	Y+3, r18	; 0x03
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	a1 f1       	breq	.+104    	; 0x21e4 <Timer1_init+0x7c6>
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	22 30       	cpi	r18, 0x02	; 2
    2182:	31 05       	cpc	r19, r1
    2184:	2c f4       	brge	.+10     	; 0x2190 <Timer1_init+0x772>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	71 f0       	breq	.+28     	; 0x21aa <Timer1_init+0x78c>
    218e:	ab c0       	rjmp	.+342    	; 0x22e6 <Timer1_init+0x8c8>
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	22 30       	cpi	r18, 0x02	; 2
    2196:	31 05       	cpc	r19, r1
    2198:	09 f4       	brne	.+2      	; 0x219c <Timer1_init+0x77e>
    219a:	58 c0       	rjmp	.+176    	; 0x224c <Timer1_init+0x82e>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <Timer1_init+0x78a>
    21a6:	79 c0       	rjmp	.+242    	; 0x229a <Timer1_init+0x87c>
    21a8:	9e c0       	rjmp	.+316    	; 0x22e6 <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    21aa:	af e4       	ldi	r26, 0x4F	; 79
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ef e4       	ldi	r30, 0x4F	; 79
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    21b8:	af e4       	ldi	r26, 0x4F	; 79
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	ef e4       	ldi	r30, 0x4F	; 79
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	8f 7d       	andi	r24, 0xDF	; 223
    21c4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    21c6:	af e4       	ldi	r26, 0x4F	; 79
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	ef e4       	ldi	r30, 0x4F	; 79
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8f 7b       	andi	r24, 0xBF	; 191
    21d2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    21d4:	af e4       	ldi	r26, 0x4F	; 79
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	ef e4       	ldi	r30, 0x4F	; 79
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	8f 7e       	andi	r24, 0xEF	; 239
    21e0:	8c 93       	st	X, r24
    21e2:	81 c0       	rjmp	.+258    	; 0x22e6 <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    21e4:	af e4       	ldi	r26, 0x4F	; 79
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ef e4       	ldi	r30, 0x4F	; 79
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8f 77       	andi	r24, 0x7F	; 127
    21f0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    21f2:	af e4       	ldi	r26, 0x4F	; 79
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef e4       	ldi	r30, 0x4F	; 79
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8f 7d       	andi	r24, 0xDF	; 223
    21fe:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2200:	af e4       	ldi	r26, 0x4F	; 79
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ef e4       	ldi	r30, 0x4F	; 79
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 64       	ori	r24, 0x40	; 64
    220c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    220e:	af e4       	ldi	r26, 0x4F	; 79
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	ef e4       	ldi	r30, 0x4F	; 79
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 61       	ori	r24, 0x10	; 16
    221a:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	64 e0       	ldi	r22, 0x04	; 4
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				if ((*timerConfig).mode != TIMER16BIT_PHASE_FREQ_PWM_OCR1A
    2226:	e9 81       	ldd	r30, Y+1	; 0x01
    2228:	fa 81       	ldd	r31, Y+2	; 0x02
    222a:	80 81       	ld	r24, Z
    222c:	8f 70       	andi	r24, 0x0F	; 15
    222e:	89 30       	cpi	r24, 0x09	; 9
    2230:	39 f4       	brne	.+14     	; 0x2240 <Timer1_init+0x822>
    2232:	e9 81       	ldd	r30, Y+1	; 0x01
    2234:	fa 81       	ldd	r31, Y+2	; 0x02
    2236:	80 81       	ld	r24, Z
    2238:	8f 70       	andi	r24, 0x0F	; 15
    223a:	8f 30       	cpi	r24, 0x0F	; 15
    223c:	09 f4       	brne	.+2      	; 0x2240 <Timer1_init+0x822>
    223e:	53 c0       	rjmp	.+166    	; 0x22e6 <Timer1_init+0x8c8>
						|| (*timerConfig).mode != TIMER16BIT_FAST_PWM_OCR1A)
				{
					GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    224a:	4d c0       	rjmp	.+154    	; 0x22e6 <Timer1_init+0x8c8>
				}
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    224c:	af e4       	ldi	r26, 0x4F	; 79
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ef e4       	ldi	r30, 0x4F	; 79
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	80 68       	ori	r24, 0x80	; 128
    2258:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    225a:	af e4       	ldi	r26, 0x4F	; 79
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	ef e4       	ldi	r30, 0x4F	; 79
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	80 62       	ori	r24, 0x20	; 32
    2266:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2268:	af e4       	ldi	r26, 0x4F	; 79
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ef e4       	ldi	r30, 0x4F	; 79
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8f 7b       	andi	r24, 0xBF	; 191
    2274:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2276:	af e4       	ldi	r26, 0x4F	; 79
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	ef e4       	ldi	r30, 0x4F	; 79
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	8f 7e       	andi	r24, 0xEF	; 239
    2282:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	64 e0       	ldi	r22, 0x04	; 4
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	65 e0       	ldi	r22, 0x05	; 5
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2298:	26 c0       	rjmp	.+76     	; 0x22e6 <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    229a:	af e4       	ldi	r26, 0x4F	; 79
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	ef e4       	ldi	r30, 0x4F	; 79
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	80 68       	ori	r24, 0x80	; 128
    22a6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    22a8:	af e4       	ldi	r26, 0x4F	; 79
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ef e4       	ldi	r30, 0x4F	; 79
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 62       	ori	r24, 0x20	; 32
    22b4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    22b6:	af e4       	ldi	r26, 0x4F	; 79
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ef e4       	ldi	r30, 0x4F	; 79
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	80 64       	ori	r24, 0x40	; 64
    22c2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    22c4:	af e4       	ldi	r26, 0x4F	; 79
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ef e4       	ldi	r30, 0x4F	; 79
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 61       	ori	r24, 0x10	; 16
    22d0:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	65 e0       	ldi	r22, 0x05	; 5
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			break;
		}
	}
}
    22e6:	2e 96       	adiw	r28, 0x0e	; 14
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <Timer1_setCallBack>:
 * 		normal mode or compare unit A interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBack(void (*Ptr2Function)(void))
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <Timer1_setCallBack+0x6>
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitA_Ptr = Ptr2Function;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	90 93 6b 00 	sts	0x006B, r25
    230e:	80 93 6a 00 	sts	0x006A, r24
}
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <Timer1_setCallBackUnitB>:
 * 		compare unit B interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBackUnitB(void (*Ptr2Function)(void))
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <Timer1_setCallBackUnitB+0x6>
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitB_Ptr = Ptr2Function;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	90 93 6d 00 	sts	0x006D, r25
    2332:	80 93 6c 00 	sts	0x006C, r24
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <Timer1_start>:
 * [In] compareValueB	: Indicates compare value for unit B.
 * [Return]				: Void.
 */
void Timer1_start(TIMER01_PRESCALER prescaler, uint16 start,
		uint16 compareValueA, uint16 compareValueB)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	27 97       	sbiw	r28, 0x07	; 7
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	7b 83       	std	Y+3, r23	; 0x03
    2358:	6a 83       	std	Y+2, r22	; 0x02
    235a:	5d 83       	std	Y+5, r21	; 0x05
    235c:	4c 83       	std	Y+4, r20	; 0x04
    235e:	3f 83       	std	Y+7, r19	; 0x07
    2360:	2e 83       	std	Y+6, r18	; 0x06
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	87 70       	andi	r24, 0x07	; 7
    2366:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start; /* Set timer starting value */
    2368:	ec e4       	ldi	r30, 0x4C	; 76
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	80 83       	st	Z, r24
	/* Choose between compare unit A or compare unit B or both */
	OCR1A = compareValueA;
    2374:	ea e4       	ldi	r30, 0x4A	; 74
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	9d 81       	ldd	r25, Y+5	; 0x05
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
	OCR1B = compareValueB;
    2380:	e8 e4       	ldi	r30, 0x48	; 72
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8e 81       	ldd	r24, Y+6	; 0x06
    2386:	9f 81       	ldd	r25, Y+7	; 0x07
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
	/* If interrupt is enable in initialization, enable it for
	 * it's corresponding compare unit chosen */
	if (compareValueA != 0 && compareValueB == 0)
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	a9 f0       	breq	.+42     	; 0x23be <Timer1_start+0x7e>
    2394:	8e 81       	ldd	r24, Y+6	; 0x06
    2396:	9f 81       	ldd	r25, Y+7	; 0x07
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	89 f4       	brne	.+34     	; 0x23be <Timer1_start+0x7e>
	{
		if (BIT_IS_SET(TIMSK, OCIE1A))
    239c:	e9 e5       	ldi	r30, 0x59	; 89
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	80 71       	andi	r24, 0x10	; 16
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	b9 f1       	breq	.+110    	; 0x241c <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1B);
    23ae:	a9 e5       	ldi	r26, 0x59	; 89
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e9 e5       	ldi	r30, 0x59	; 89
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	87 7f       	andi	r24, 0xF7	; 247
    23ba:	8c 93       	st	X, r24
    23bc:	2f c0       	rjmp	.+94     	; 0x241c <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB != 0)
    23be:	8c 81       	ldd	r24, Y+4	; 0x04
    23c0:	9d 81       	ldd	r25, Y+5	; 0x05
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	a9 f4       	brne	.+42     	; 0x23f0 <Timer1_start+0xb0>
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	89 f0       	breq	.+34     	; 0x23f0 <Timer1_start+0xb0>
	{
		if (BIT_IS_SET(TIMSK, OCIE1B))
    23ce:	e9 e5       	ldi	r30, 0x59	; 89
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	88 70       	andi	r24, 0x08	; 8
    23da:	90 70       	andi	r25, 0x00	; 0
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	f1 f0       	breq	.+60     	; 0x241c <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1A);
    23e0:	a9 e5       	ldi	r26, 0x59	; 89
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e9 e5       	ldi	r30, 0x59	; 89
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	8f 7e       	andi	r24, 0xEF	; 239
    23ec:	8c 93       	st	X, r24
    23ee:	16 c0       	rjmp	.+44     	; 0x241c <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB == 0)
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	91 f4       	brne	.+36     	; 0x241c <Timer1_start+0xdc>
    23f8:	8e 81       	ldd	r24, Y+6	; 0x06
    23fa:	9f 81       	ldd	r25, Y+7	; 0x07
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	71 f4       	brne	.+28     	; 0x241c <Timer1_start+0xdc>
	{
		CLEAR_BIT(TIMSK, OCIE1A);
    2400:	a9 e5       	ldi	r26, 0x59	; 89
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e9 e5       	ldi	r30, 0x59	; 89
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	8f 7e       	andi	r24, 0xEF	; 239
    240c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1B);
    240e:	a9 e5       	ldi	r26, 0x59	; 89
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e9 e5       	ldi	r30, 0x59	; 89
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	87 7f       	andi	r24, 0xF7	; 247
    241a:	8c 93       	st	X, r24
	}
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR1B, 0xF8, prescaler);
    241c:	ae e4       	ldi	r26, 0x4E	; 78
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	ee e4       	ldi	r30, 0x4E	; 78
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	98 2f       	mov	r25, r24
    2428:	98 7f       	andi	r25, 0xF8	; 248
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	89 2b       	or	r24, r25
    242e:	8c 93       	st	X, r24
}
    2430:	27 96       	adiw	r28, 0x07	; 7
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <Timer1_stop>:
 * 		Function that stops timer1 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_stop(void)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR1B, 0xF8, 0x00); /* Clear pre-scaler */
    244a:	ae e4       	ldi	r26, 0x4E	; 78
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	ee e4       	ldi	r30, 0x4E	; 78
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 7f       	andi	r24, 0xF8	; 248
    2456:	8c 93       	st	X, r24
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <Timer1_deInit>:
 * 		Function that clears all timer1 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_deInit(void)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	2a 97       	sbiw	r28, 0x0a	; 10
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
	/* Clear timer1 registers */
	CLEAR_REG(TCCR1A);
    2472:	ef e4       	ldi	r30, 0x4F	; 79
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	ef e4       	ldi	r30, 0x4F	; 79
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    247e:	ee e4       	ldi	r30, 0x4E	; 78
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	90 81       	ld	r25, Z
    2484:	ee e4       	ldi	r30, 0x4E	; 78
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	10 82       	st	Z, r1
	CLEAR_REG(TCNT1);
    248a:	ec e4       	ldi	r30, 0x4C	; 76
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	ec e4       	ldi	r30, 0x4C	; 76
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	11 82       	std	Z+1, r1	; 0x01
    2498:	10 82       	st	Z, r1
	CLEAR_REG(OCR1A);
    249a:	ea e4       	ldi	r30, 0x4A	; 74
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	ea e4       	ldi	r30, 0x4A	; 74
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	11 82       	std	Z+1, r1	; 0x01
    24a8:	10 82       	st	Z, r1
	CLEAR_REG(OCR1B);
    24aa:	e8 e4       	ldi	r30, 0x48	; 72
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	e8 e4       	ldi	r30, 0x48	; 72
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	11 82       	std	Z+1, r1	; 0x01
    24b8:	10 82       	st	Z, r1
	CLEAR_REG(ICR1);
    24ba:	e6 e4       	ldi	r30, 0x46	; 70
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	e6 e4       	ldi	r30, 0x46	; 70
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	11 82       	std	Z+1, r1	; 0x01
    24c8:	10 82       	st	Z, r1
	/* Disable timer1 interrupts */
	CLEAR_BIT(TIMSK, TICIE1);
    24ca:	a9 e5       	ldi	r26, 0x59	; 89
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e9 e5       	ldi	r30, 0x59	; 89
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 7d       	andi	r24, 0xDF	; 223
    24d6:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    24d8:	a9 e5       	ldi	r26, 0x59	; 89
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e9 e5       	ldi	r30, 0x59	; 89
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8f 7e       	andi	r24, 0xEF	; 239
    24e4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    24e6:	a9 e5       	ldi	r26, 0x59	; 89
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e9 e5       	ldi	r30, 0x59	; 89
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	87 7f       	andi	r24, 0xF7	; 247
    24f2:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE1);
    24f4:	a9 e5       	ldi	r26, 0x59	; 89
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e9 e5       	ldi	r30, 0x59	; 89
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8b 7f       	andi	r24, 0xFB	; 251
    2500:	8c 93       	st	X, r24
	/* Clear timer1 flags */
	SET_BIT(TIFR, ICF1);
    2502:	a8 e5       	ldi	r26, 0x58	; 88
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e8 e5       	ldi	r30, 0x58	; 88
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	80 62       	ori	r24, 0x20	; 32
    250e:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1A);
    2510:	a8 e5       	ldi	r26, 0x58	; 88
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e8 e5       	ldi	r30, 0x58	; 88
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	80 61       	ori	r24, 0x10	; 16
    251c:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1B);
    251e:	a8 e5       	ldi	r26, 0x58	; 88
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e8 e5       	ldi	r30, 0x58	; 88
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	88 60       	ori	r24, 0x08	; 8
    252a:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV1);
    252c:	a8 e5       	ldi	r26, 0x58	; 88
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e8 e5       	ldi	r30, 0x58	; 88
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	84 60       	ori	r24, 0x04	; 4
    2538:	8c 93       	st	X, r24
}
    253a:	2a 96       	adiw	r28, 0x0a	; 10
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <USART_init>:
 * 			3. Sets UART baud rate.
 * [Args] USARTConfig	: Contains baud rate, character size, parity mode & stop bit.
 * [Return]				: Void.
 */
void USART_init(const USART_initConfig *USARTConfig)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	28 97       	sbiw	r28, 0x08	; 8
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
	/* Define a variable that will hold UBRR value*/
	uint16 UBRRValue = 0;
    2564:	1a 82       	std	Y+2, r1	; 0x02
    2566:	19 82       	std	Y+1, r1	; 0x01
	/* Clear previous USART initialization data */
	CLEAR_REG(UCSRA);
    2568:	eb e2       	ldi	r30, 0x2B	; 43
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	eb e2       	ldi	r30, 0x2B	; 43
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	10 82       	st	Z, r1
	CLEAR_REG(UCSRB);
    2574:	ea e2       	ldi	r30, 0x2A	; 42
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	ea e2       	ldi	r30, 0x2A	; 42
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	10 82       	st	Z, r1
	CLEAR_REG(UCSRC);
    2580:	e0 e4       	ldi	r30, 0x40	; 64
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	e0 e4       	ldi	r30, 0x40	; 64
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	10 82       	st	Z, r1
	OVERWRITE_REG(UBRRH, 0xF0, 0x00);
    258c:	a0 e4       	ldi	r26, 0x40	; 64
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e0 e4       	ldi	r30, 0x40	; 64
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 7f       	andi	r24, 0xF0	; 240
    2598:	8c 93       	st	X, r24
	CLEAR_REG(UBRRL);
    259a:	e9 e2       	ldi	r30, 0x29	; 41
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	e9 e2       	ldi	r30, 0x29	; 41
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	10 82       	st	Z, r1

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Enable double transmission speed */
	SET_BIT(UCSRA, U2X);
    25a6:	ab e2       	ldi	r26, 0x2B	; 43
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	eb e2       	ldi	r30, 0x2B	; 43
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	82 60       	ori	r24, 0x02	; 2
    25b2:	8c 93       	st	X, r24
	OVERWRITE_REG(UCSRB, 0x1F, 0xE0);

#endif

	/* Enable receiver & override receiver pin settings */
	SET_BIT(UCSRB, RXEN);
    25b4:	aa e2       	ldi	r26, 0x2A	; 42
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	ea e2       	ldi	r30, 0x2A	; 42
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 61       	ori	r24, 0x10	; 16
    25c0:	8c 93       	st	X, r24
	/* Enable transmitter & override transmitter pin settings */
	SET_BIT(UCSRB, TXEN);
    25c2:	aa e2       	ldi	r26, 0x2A	; 42
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ea e2       	ldi	r30, 0x2A	; 42
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	88 60       	ori	r24, 0x08	; 8
    25ce:	8c 93       	st	X, r24
	/* Set most significant bit of character size */
	OVERWRITE_REG(UCSRB, 0xFB, GET_BIT((*USARTConfig).characterSize, 2) << 2);
    25d0:	aa e2       	ldi	r26, 0x2A	; 42
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ea e2       	ldi	r30, 0x2A	; 42
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	98 2f       	mov	r25, r24
    25dc:	9b 7f       	andi	r25, 0xFB	; 251
    25de:	eb 81       	ldd	r30, Y+3	; 0x03
    25e0:	fc 81       	ldd	r31, Y+4	; 0x04
    25e2:	84 81       	ldd	r24, Z+4	; 0x04
    25e4:	87 70       	andi	r24, 0x07	; 7
    25e6:	84 70       	andi	r24, 0x04	; 4
    25e8:	89 2b       	or	r24, r25
    25ea:	8c 93       	st	X, r24
	/* Write in UCSRC */
	SET_BIT(UCSRC, URSEL);
    25ec:	a0 e4       	ldi	r26, 0x40	; 64
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e0 e4       	ldi	r30, 0x40	; 64
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	80 68       	ori	r24, 0x80	; 128
    25f8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UMSEL);

#endif

	/* Set parity mode */
	OVERWRITE_REG(UCSRC, 0xCF, (*USARTConfig).parityMode << 4);
    25fa:	a0 e4       	ldi	r26, 0x40	; 64
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e0 e4       	ldi	r30, 0x40	; 64
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	2f 7c       	andi	r18, 0xCF	; 207
    2608:	eb 81       	ldd	r30, Y+3	; 0x03
    260a:	fc 81       	ldd	r31, Y+4	; 0x04
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	86 95       	lsr	r24
    2610:	86 95       	lsr	r24
    2612:	86 95       	lsr	r24
    2614:	83 70       	andi	r24, 0x03	; 3
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	82 95       	swap	r24
    261c:	92 95       	swap	r25
    261e:	90 7f       	andi	r25, 0xF0	; 240
    2620:	98 27       	eor	r25, r24
    2622:	80 7f       	andi	r24, 0xF0	; 240
    2624:	98 27       	eor	r25, r24
    2626:	82 2b       	or	r24, r18
    2628:	8c 93       	st	X, r24
	/* Set stop bit */
	OVERWRITE_REG(UCSRC, 0xF7, GET_BIT((*USARTConfig).stopBit, 0) << 3);
    262a:	a0 e4       	ldi	r26, 0x40	; 64
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e0 e4       	ldi	r30, 0x40	; 64
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	28 2f       	mov	r18, r24
    2636:	27 7f       	andi	r18, 0xF7	; 247
    2638:	eb 81       	ldd	r30, Y+3	; 0x03
    263a:	fc 81       	ldd	r31, Y+4	; 0x04
    263c:	84 81       	ldd	r24, Z+4	; 0x04
    263e:	82 95       	swap	r24
    2640:	86 95       	lsr	r24
    2642:	87 70       	andi	r24, 0x07	; 7
    2644:	81 70       	andi	r24, 0x01	; 1
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	82 2b       	or	r24, r18
    265c:	8c 93       	st	X, r24
	/* Set two least significant bits of character size */
	OVERWRITE_REG(UCSRC, 0xF9, ((*USARTConfig).characterSize & 0x03) << 1);
    265e:	a0 e4       	ldi	r26, 0x40	; 64
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e0 e4       	ldi	r30, 0x40	; 64
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	28 2f       	mov	r18, r24
    266a:	29 7f       	andi	r18, 0xF9	; 249
    266c:	eb 81       	ldd	r30, Y+3	; 0x03
    266e:	fc 81       	ldd	r31, Y+4	; 0x04
    2670:	84 81       	ldd	r24, Z+4	; 0x04
    2672:	87 70       	andi	r24, 0x07	; 7
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	83 70       	andi	r24, 0x03	; 3
    267a:	90 70       	andi	r25, 0x00	; 0
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	82 2b       	or	r24, r18
    2682:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCPOL);

#endif

	/* Write in UBRRL & UBRRH */
	CLEAR_BIT(UCSRC, URSEL);
    2684:	a0 e4       	ldi	r26, 0x40	; 64
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e0 e4       	ldi	r30, 0x40	; 64
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	8f 77       	andi	r24, 0x7F	; 127
    2690:	8c 93       	st	X, r24

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Calculate the UBRR register value */
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 8UL))) - 1);
    2692:	eb 81       	ldd	r30, Y+3	; 0x03
    2694:	fc 81       	ldd	r31, Y+4	; 0x04
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	a2 81       	ldd	r26, Z+2	; 0x02
    269c:	b3 81       	ldd	r27, Z+3	; 0x03
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	aa 1f       	adc	r26, r26
    26a4:	bb 1f       	adc	r27, r27
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	aa 1f       	adc	r26, r26
    26ac:	bb 1f       	adc	r27, r27
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	aa 1f       	adc	r26, r26
    26b4:	bb 1f       	adc	r27, r27
    26b6:	9c 01       	movw	r18, r24
    26b8:	ad 01       	movw	r20, r26
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	92 e1       	ldi	r25, 0x12	; 18
    26be:	aa e7       	ldi	r26, 0x7A	; 122
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 af 1a 	call	0x355e	; 0x355e <__udivmodsi4>
    26ca:	da 01       	movw	r26, r20
    26cc:	c9 01       	movw	r24, r18
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 16UL))) - 1);

#endif

	/* Set 4 most significant bits of UBRRValue in UBRRH */
	UBRRH = UBRRValue >> 8;
    26d4:	e0 e4       	ldi	r30, 0x40	; 64
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	89 2f       	mov	r24, r25
    26de:	99 27       	eor	r25, r25
    26e0:	80 83       	st	Z, r24
	/* Set 8 least significant bits of UBRRValue in UBRRL */
	UBRRL = UBRRValue;
    26e2:	e9 e2       	ldi	r30, 0x29	; 41
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	80 83       	st	Z, r24
}
    26ea:	28 96       	adiw	r28, 0x08	; 8
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <USART_sendByte>:

void USART_sendByte(const uint8 data)

#endif

{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	89 83       	std	Y+1, r24	; 0x01
	UDR = (data & 0xFF);

#else

	/* Wait for data register empty flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    2708:	eb e2       	ldi	r30, 0x2B	; 43
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	80 72       	andi	r24, 0x20	; 32
    2714:	90 70       	andi	r25, 0x00	; 0
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	b9 f3       	breq	.-18     	; 0x2708 <USART_sendByte+0xc>
	/* Put the data in the UDR, flag is automatically cleared */
	UDR = data;
    271a:	ec e2       	ldi	r30, 0x2C	; 44
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	80 83       	st	Z, r24
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

#endif

}
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <USART_recieveByte>:

uint8 USART_recieveByte(void)

#endif

{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	return UDRValue;

#else

	/* Wait for receive complete flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, RXC));
    2732:	eb e2       	ldi	r30, 0x2B	; 43
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 23       	and	r24, r24
    273a:	dc f7       	brge	.-10     	; 0x2732 <USART_recieveByte+0x8>
	/* Read received data from UDR, flag is automatically cleared */
	return UDR;
    273c:	ec e2       	ldi	r30, 0x2C	; 44
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z

#endif

}
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <USART_sendString>:
 * 		Function that sends string through USART.
 * [Args] string	: Indicates string to be sent.
 * [Return]			: Void.
 */
void USART_sendString(const uint8 *string)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	00 d0       	rcall	.+0      	; 0x274e <USART_sendString+0x6>
    274e:	0f 92       	push	r0
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	9b 83       	std	Y+3, r25	; 0x03
    2756:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    2758:	19 82       	std	Y+1, r1	; 0x01
    275a:	0e c0       	rjmp	.+28     	; 0x2778 <USART_sendString+0x30>
	/* Send the string */
	while (string[i] != '\0')
	{
		USART_sendByte(string[i]);
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	9b 81       	ldd	r25, Y+3	; 0x03
    2766:	fc 01       	movw	r30, r24
    2768:	e2 0f       	add	r30, r18
    276a:	f3 1f       	adc	r31, r19
    276c:	80 81       	ld	r24, Z
    276e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
		i++;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	8f 5f       	subi	r24, 0xFF	; 255
    2776:	89 83       	std	Y+1, r24	; 0x01
void USART_sendString(const uint8 *string)
{
	/* Define a counter variable */
	uint8 i = 0;
	/* Send the string */
	while (string[i] != '\0')
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	9b 81       	ldd	r25, Y+3	; 0x03
    2782:	fc 01       	movw	r30, r24
    2784:	e2 0f       	add	r30, r18
    2786:	f3 1f       	adc	r31, r19
    2788:	80 81       	ld	r24, Z
    278a:	88 23       	and	r24, r24
    278c:	39 f7       	brne	.-50     	; 0x275c <USART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <USART_receiveString>:
 * [Args] 			: Void.
 * [Out] string		: Indicates the whole string that is received until (#) symbol.
 * [Return]			: Void.
 */
void USART_receiveString(uint8 *string)
{
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <USART_receiveString+0xa>
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	9b 83       	std	Y+3, r25	; 0x03
    27ac:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    27ae:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	string[i] = USART_recieveByte();
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	8c 01       	movw	r16, r24
    27bc:	02 0f       	add	r16, r18
    27be:	13 1f       	adc	r17, r19
    27c0:	0e 94 95 13 	call	0x272a	; 0x272a <USART_recieveByte>
    27c4:	f8 01       	movw	r30, r16
    27c6:	80 83       	st	Z, r24
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <USART_receiveString+0x4e>
	/* Receive the string until the (#) */
	while (string[i] != '#')
	{
		i++;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	89 83       	std	Y+1, r24	; 0x01
		string[i] = USART_recieveByte();
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	8c 01       	movw	r16, r24
    27dc:	02 0f       	add	r16, r18
    27de:	13 1f       	adc	r17, r19
    27e0:	0e 94 95 13 	call	0x272a	; 0x272a <USART_recieveByte>
    27e4:	f8 01       	movw	r30, r16
    27e6:	80 83       	st	Z, r24
	/* Define a counter variable */
	uint8 i = 0;
	/* Receive the first byte */
	string[i] = USART_recieveByte();
	/* Receive the string until the (#) */
	while (string[i] != '#')
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	fc 01       	movw	r30, r24
    27f4:	e2 0f       	add	r30, r18
    27f6:	f3 1f       	adc	r31, r19
    27f8:	80 81       	ld	r24, Z
    27fa:	83 32       	cpi	r24, 0x23	; 35
    27fc:	31 f7       	brne	.-52     	; 0x27ca <USART_receiveString+0x30>
	{
		i++;
		string[i] = USART_recieveByte();
	}
	/* Replace (#) with (\0) After receiving */
	string[i] = '\0';
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	10 82       	st	Z, r1
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	08 95       	ret

00002820 <Buzzer_init>:
 * 		Function that initializes buzzer pin.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Buzzer_init(void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62

#if (BUZZER_PIN_OUTPUT == TRUE)

	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_INPUT);

#endif

	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <Buzzer_on>:
 * 		Function that turns buzzer on.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Buzzer_on(void)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <Buzzer_off>:
 * 		Function that turns buzzer off.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Buzzer_off(void)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <DCMotor_init>:
 * 		Function that initialize DC motor pins.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void DCMotor_init(void)
{
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
	/* Configure bridge enable pin as output pin */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_ENABLE, PIN_OUTPUT);
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	63 e0       	ldi	r22, 0x03	; 3
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* Configure bridge direction pins as output pin */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN1, PIN_OUTPUT);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN2, PIN_OUTPUT);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* Stop the motor initially */
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <DCMotor_Rotate>:
 * [In] rotation	: Indicates rotation direction of the motor.
 * [In] speed		: Indicates speed percentage of the motor.
 * [Return]		: Void.
 */
void DCMotor_Rotate(ROTATION_STATE rotation, uint8 speed)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <DCMotor_Rotate+0x6>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <DCMotor_Rotate+0x8>
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 dutyCycle = 0;	/* Initialize duty-cycle value */
    28c4:	19 82       	std	Y+1, r1	; 0x01
	/* Convert recieved percentage into duty-cycle value */
	dutyCycle = (uint8) ((uint16) (speed * 250) / 100) + 5;
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	8a ef       	ldi	r24, 0xFA	; 250
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	ac 01       	movw	r20, r24
    28d2:	24 9f       	mul	r18, r20
    28d4:	c0 01       	movw	r24, r0
    28d6:	25 9f       	mul	r18, r21
    28d8:	90 0d       	add	r25, r0
    28da:	34 9f       	mul	r19, r20
    28dc:	90 0d       	add	r25, r0
    28de:	11 24       	eor	r1, r1
    28e0:	24 e6       	ldi	r18, 0x64	; 100
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	b9 01       	movw	r22, r18
    28e6:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__udivmodhi4>
    28ea:	cb 01       	movw	r24, r22
    28ec:	8b 5f       	subi	r24, 0xFB	; 251
    28ee:	89 83       	std	Y+1, r24	; 0x01
	/* Control the motor as required */
	switch (rotation)
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	3d 83       	std	Y+5, r19	; 0x05
    28f8:	2c 83       	std	Y+4, r18	; 0x04
    28fa:	4c 81       	ldd	r20, Y+4	; 0x04
    28fc:	5d 81       	ldd	r21, Y+5	; 0x05
    28fe:	41 30       	cpi	r20, 0x01	; 1
    2900:	51 05       	cpc	r21, r1
    2902:	b9 f0       	breq	.+46     	; 0x2932 <DCMotor_Rotate+0x80>
    2904:	8c 81       	ldd	r24, Y+4	; 0x04
    2906:	9d 81       	ldd	r25, Y+5	; 0x05
    2908:	82 30       	cpi	r24, 0x02	; 2
    290a:	91 05       	cpc	r25, r1
    290c:	11 f1       	breq	.+68     	; 0x2952 <DCMotor_Rotate+0xa0>
    290e:	2c 81       	ldd	r18, Y+4	; 0x04
    2910:	3d 81       	ldd	r19, Y+5	; 0x05
    2912:	21 15       	cp	r18, r1
    2914:	31 05       	cpc	r19, r1
    2916:	61 f5       	brne	.+88     	; 0x2970 <DCMotor_Rotate+0xbe>
	{
		case STOP:
			Timer0_stop(); /* Stop PWM speed control */
    2918:	0e 94 c7 0c 	call	0x198e	; 0x198e <Timer0_stop>
			/* Stop motor rotation */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	62 e0       	ldi	r22, 0x02	; 2
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2930:	1f c0       	rjmp	.+62     	; 0x2970 <DCMotor_Rotate+0xbe>
			return;
		case CLOCKWISE:
			Timer0_start(TIMER01_PRESCALER_8, 5, dutyCycle); /* Start timer & generate PWM */
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	65 e0       	ldi	r22, 0x05	; 5
    2936:	49 81       	ldd	r20, Y+1	; 0x01
    2938:	0e 94 a3 0c 	call	0x1946	; 0x1946 <Timer0_start>
			/* Rotate motor clock-wise direction */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_HIGH);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	61 e0       	ldi	r22, 0x01	; 1
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	62 e0       	ldi	r22, 0x02	; 2
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <DCMotor_Rotate+0xbe>
			return;
		case COUNTER_CLOCKWISE:
			Timer0_start(TIMER01_PRESCALER_8, 5, dutyCycle); /* Start timer & generate PWM */
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	65 e0       	ldi	r22, 0x05	; 5
    2956:	49 81       	ldd	r20, Y+1	; 0x01
    2958:	0e 94 a3 0c 	call	0x1946	; 0x1946 <Timer0_start>
			/* Rotate motor counter clock-wise direction */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_HIGH);
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			return;
	}
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <EEPROM_writeByte>:
 * [In] u16address			: Indicates EEPROM memory location address.
 * [In] u8data				: Indicates data that is sent.
 * [Return]					: Success or failure state.
 */
uint8 EEPROM_writeByte(uint16 u16address, uint8 u8data)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	00 d0       	rcall	.+0      	; 0x2986 <EEPROM_writeByte+0x6>
    2986:	00 d0       	rcall	.+0      	; 0x2988 <EEPROM_writeByte+0x8>
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	9a 83       	std	Y+2, r25	; 0x02
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit */
	I2C_start();
    2992:	0e 94 68 09 	call	0x12d0	; 0x12d0 <I2C_start>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_START)
    2996:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    299a:	88 30       	cpi	r24, 0x08	; 8
    299c:	11 f0       	breq	.+4      	; 0x29a2 <EEPROM_writeByte+0x22>
		return ERROR;
    299e:	1c 82       	std	Y+4, r1	; 0x04
    29a0:	28 c0       	rjmp	.+80     	; 0x29f2 <EEPROM_writeByte+0x72>
	/* Send the 3 MSBs of u16address in device address in addition
	 * to write bit & the rest of the data in word address */
	I2C_writeByte((uint8) (0xA0 | ((u16address & 0x0700) >> 7)));
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	80 70       	andi	r24, 0x00	; 0
    29a8:	97 70       	andi	r25, 0x07	; 7
    29aa:	88 0f       	add	r24, r24
    29ac:	89 2f       	mov	r24, r25
    29ae:	88 1f       	adc	r24, r24
    29b0:	99 0b       	sbc	r25, r25
    29b2:	91 95       	neg	r25
    29b4:	80 6a       	ori	r24, 0xA0	; 160
    29b6:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    29ba:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    29be:	88 31       	cpi	r24, 0x18	; 24
    29c0:	11 f0       	breq	.+4      	; 0x29c6 <EEPROM_writeByte+0x46>
		return ERROR;
    29c2:	1c 82       	std	Y+4, r1	; 0x04
    29c4:	16 c0       	rjmp	.+44     	; 0x29f2 <EEPROM_writeByte+0x72>
	/* Send memory location address */
	I2C_writeByte((uint8) (u16address & 0xFF));
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_DATA_ACK)
    29cc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    29d0:	88 32       	cpi	r24, 0x28	; 40
    29d2:	11 f0       	breq	.+4      	; 0x29d8 <EEPROM_writeByte+0x58>
		return ERROR;
    29d4:	1c 82       	std	Y+4, r1	; 0x04
    29d6:	0d c0       	rjmp	.+26     	; 0x29f2 <EEPROM_writeByte+0x72>
	/* Write the byte to EEPROM */
	I2C_writeByte(u8data);
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_DATA_ACK)
    29de:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    29e2:	88 32       	cpi	r24, 0x28	; 40
    29e4:	11 f0       	breq	.+4      	; 0x29ea <EEPROM_writeByte+0x6a>
		return ERROR;
    29e6:	1c 82       	std	Y+4, r1	; 0x04
    29e8:	04 c0       	rjmp	.+8      	; 0x29f2 <EEPROM_writeByte+0x72>
	/* Send stop bit */
	I2C_stop();
    29ea:	0e 94 82 09 	call	0x1304	; 0x1304 <I2C_stop>
	/* Generate a success if operation succeeded */
	return SUCCESS;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	8c 83       	std	Y+4, r24	; 0x04
    29f2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <EEPROM_readByte>:
 * [In] u16address			: Indicates EEPROM memory location address.
 * [Out] u8data				: Indicates data that is received.
 * [Return]					: Success or failure state.
 */
uint8 EEPROM_readByte(uint16 u16address, uint8 *u8data)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <EEPROM_readByte+0x6>
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <EEPROM_readByte+0x8>
    2a0a:	0f 92       	push	r0
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	7c 83       	std	Y+4, r23	; 0x04
    2a16:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit */
	I2C_start();
    2a18:	0e 94 68 09 	call	0x12d0	; 0x12d0 <I2C_start>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_START)
    2a1c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    2a20:	88 30       	cpi	r24, 0x08	; 8
    2a22:	11 f0       	breq	.+4      	; 0x2a28 <EEPROM_readByte+0x26>
		return ERROR;
    2a24:	1d 82       	std	Y+5, r1	; 0x05
    2a26:	44 c0       	rjmp	.+136    	; 0x2ab0 <EEPROM_readByte+0xae>
	/* Send the 3 MSBs of u16address in device address in addition
	 * to write bit & the rest of the data in word address */
	I2C_writeByte((uint8) ((0xA0) | ((u16address & 0x0700) >> 7)));
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	80 70       	andi	r24, 0x00	; 0
    2a2e:	97 70       	andi	r25, 0x07	; 7
    2a30:	88 0f       	add	r24, r24
    2a32:	89 2f       	mov	r24, r25
    2a34:	88 1f       	adc	r24, r24
    2a36:	99 0b       	sbc	r25, r25
    2a38:	91 95       	neg	r25
    2a3a:	80 6a       	ori	r24, 0xA0	; 160
    2a3c:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    2a40:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    2a44:	88 31       	cpi	r24, 0x18	; 24
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <EEPROM_readByte+0x4a>
		return ERROR;
    2a48:	1d 82       	std	Y+5, r1	; 0x05
    2a4a:	32 c0       	rjmp	.+100    	; 0x2ab0 <EEPROM_readByte+0xae>
	/* Send memory location address */
	I2C_writeByte((uint8) (u16address));
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_DATA_ACK)
    2a52:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    2a56:	88 32       	cpi	r24, 0x28	; 40
    2a58:	11 f0       	breq	.+4      	; 0x2a5e <EEPROM_readByte+0x5c>
		return ERROR;
    2a5a:	1d 82       	std	Y+5, r1	; 0x05
    2a5c:	29 c0       	rjmp	.+82     	; 0x2ab0 <EEPROM_readByte+0xae>
	/* Send repeated start bit */
	I2C_start();
    2a5e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <I2C_start>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_REP_START)
    2a62:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    2a66:	80 31       	cpi	r24, 0x10	; 16
    2a68:	11 f0       	breq	.+4      	; 0x2a6e <EEPROM_readByte+0x6c>
		return ERROR;
    2a6a:	1d 82       	std	Y+5, r1	; 0x05
    2a6c:	21 c0       	rjmp	.+66     	; 0x2ab0 <EEPROM_readByte+0xae>
	/* Send the 3 MSBs of u16address in device address in addition
	 * to read bit & the rest of the data in word address */
	I2C_writeByte((uint8) ((0xA0) | ((u16address & 0x0700) >> 7) | 1));
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	80 70       	andi	r24, 0x00	; 0
    2a74:	97 70       	andi	r25, 0x07	; 7
    2a76:	88 0f       	add	r24, r24
    2a78:	89 2f       	mov	r24, r25
    2a7a:	88 1f       	adc	r24, r24
    2a7c:	99 0b       	sbc	r25, r25
    2a7e:	91 95       	neg	r25
    2a80:	81 6a       	ori	r24, 0xA1	; 161
    2a82:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
    2a86:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    2a8a:	80 34       	cpi	r24, 0x40	; 64
    2a8c:	11 f0       	breq	.+4      	; 0x2a92 <EEPROM_readByte+0x90>
		return ERROR;
    2a8e:	1d 82       	std	Y+5, r1	; 0x05
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <EEPROM_readByte+0xae>
	/* Read the byte from memory without sending ACK */
	*u8data = I2C_readByteWithNACK();
    2a92:	0e 94 ce 09 	call	0x139c	; 0x139c <I2C_readByteWithNACK>
    2a96:	eb 81       	ldd	r30, Y+3	; 0x03
    2a98:	fc 81       	ldd	r31, Y+4	; 0x04
    2a9a:	80 83       	st	Z, r24
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MR_DATA_NACK)
    2a9c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <I2C_getStatus>
    2aa0:	88 35       	cpi	r24, 0x58	; 88
    2aa2:	11 f0       	breq	.+4      	; 0x2aa8 <EEPROM_readByte+0xa6>
		return ERROR;
    2aa4:	1d 82       	std	Y+5, r1	; 0x05
    2aa6:	04 c0       	rjmp	.+8      	; 0x2ab0 <EEPROM_readByte+0xae>
	/* Send stop bit */
	I2C_stop();
    2aa8:	0e 94 82 09 	call	0x1304	; 0x1304 <I2C_stop>
	/* Generate a success if operation succeeded */
	return SUCCESS;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	2d 97       	sbiw	r28, 0x0d	; 13
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
	/* Variables definations */
	uint8 counter = 0; /* A counter variable for loops */
    2ad6:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(SREG, 7); /* Enable global interrupt I-bit */
    2ad8:	af e5       	ldi	r26, 0x5F	; 95
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	ef e5       	ldi	r30, 0x5F	; 95
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	80 68       	ori	r24, 0x80	; 128
    2ae4:	8c 93       	st	X, r24
	/* Create an instance of timer0 initialization structure */
	Timer_initConfig Timer_config = { TIMER8BIT_FAST_PWM, CLEAR_OC,
	LOGIC_LOW };
    2ae6:	1a 82       	std	Y+2, r1	; 0x02
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	80 7f       	andi	r24, 0xF0	; 240
    2aec:	83 60       	ori	r24, 0x03	; 3
    2aee:	8a 83       	std	Y+2, r24	; 0x02
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	8f 7c       	andi	r24, 0xCF	; 207
    2af4:	80 62       	ori	r24, 0x20	; 32
    2af6:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialize timer0 for PWM signal to control motor speed */
	Timer0_init(&Timer_config);
    2af8:	ce 01       	movw	r24, r28
    2afa:	02 96       	adiw	r24, 0x02	; 2
    2afc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Timer0_init>
	/* Create an instance of timer1 initialization structure */
	Timer_initConfig timerConfig =
			{ TIMER16BIT_CTC_OCR1A, NORMAL_OC, LOGIC_HIGH };
    2b00:	1b 82       	std	Y+3, r1	; 0x03
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	80 7f       	andi	r24, 0xF0	; 240
    2b06:	84 60       	ori	r24, 0x04	; 4
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	80 64       	ori	r24, 0x40	; 64
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
	/* Initialize timer1 for compare mode to control DC motor mechanisms */
	Timer1_init(&timerConfig);
    2b10:	ce 01       	movw	r24, r28
    2b12:	03 96       	adiw	r24, 0x03	; 3
    2b14:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <Timer1_init>
	/* Set call-back function for timer1 */
	Timer1_setCallBack(timerSeconds);
    2b18:	85 e2       	ldi	r24, 0x25	; 37
    2b1a:	97 e1       	ldi	r25, 0x17	; 23
    2b1c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <Timer1_setCallBack>
	/* Initialize buzzer */
	Buzzer_init();
    2b20:	0e 94 10 14 	call	0x2820	; 0x2820 <Buzzer_init>
	/* Turn off buzzer initially */
	Buzzer_off();
    2b24:	0e 94 2d 14 	call	0x285a	; 0x285a <Buzzer_off>
	/* Initialize DC motor */
	DCMotor_init();
    2b28:	0e 94 39 14 	call	0x2872	; 0x2872 <DCMotor_init>
	/* Create an instance of I2C initialization structure */
	I2C_initConfig I2CConfig = { 2, 2, I2C_PRESCALER_1, LOGIC_LOW, LOGIC_LOW };
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	fe 01       	movw	r30, r28
    2b30:	34 96       	adiw	r30, 0x04	; 4
    2b32:	df 01       	movw	r26, r30
    2b34:	28 2f       	mov	r18, r24
    2b36:	1d 92       	st	X+, r1
    2b38:	2a 95       	dec	r18
    2b3a:	e9 f7       	brne	.-6      	; 0x2b36 <main+0x74>
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	8c 83       	std	Y+4, r24	; 0x04
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	80 78       	andi	r24, 0x80	; 128
    2b44:	82 60       	ori	r24, 0x02	; 2
    2b46:	8d 83       	std	Y+5, r24	; 0x05
	/* Initialize I2C */
	I2C_init(&I2CConfig);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	04 96       	adiw	r24, 0x04	; 4
    2b4c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <I2C_init>
	/* Create an instance of USART initialization structure */
	USART_initConfig USARTConfig = { 9600, USART_DATA_8BIT, PARITY_EVEN,
	LOGIC_LOW };
    2b50:	85 e0       	ldi	r24, 0x05	; 5
    2b52:	fe 01       	movw	r30, r28
    2b54:	37 96       	adiw	r30, 0x07	; 7
    2b56:	df 01       	movw	r26, r30
    2b58:	28 2f       	mov	r18, r24
    2b5a:	1d 92       	st	X+, r1
    2b5c:	2a 95       	dec	r18
    2b5e:	e9 f7       	brne	.-6      	; 0x2b5a <main+0x98>
    2b60:	80 e8       	ldi	r24, 0x80	; 128
    2b62:	95 e2       	ldi	r25, 0x25	; 37
    2b64:	a0 e0       	ldi	r26, 0x00	; 0
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	98 87       	std	Y+8, r25	; 0x08
    2b6c:	a9 87       	std	Y+9, r26	; 0x09
    2b6e:	ba 87       	std	Y+10, r27	; 0x0a
    2b70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b72:	88 7f       	andi	r24, 0xF8	; 248
    2b74:	83 60       	ori	r24, 0x03	; 3
    2b76:	8b 87       	std	Y+11, r24	; 0x0b
    2b78:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b7a:	87 7e       	andi	r24, 0xE7	; 231
    2b7c:	80 61       	ori	r24, 0x10	; 16
    2b7e:	8b 87       	std	Y+11, r24	; 0x0b
	/* Initialize USART */
	USART_init(&USARTConfig);
    2b80:	ce 01       	movw	r24, r28
    2b82:	07 96       	adiw	r24, 0x07	; 7
    2b84:	0e 94 a6 12 	call	0x254c	; 0x254c <USART_init>
	/* Scan for an existing password */
	scanPassword();
    2b88:	0e 94 f7 15 	call	0x2bee	; 0x2bee <scanPassword>
	/* Execute program loop */
	while (TRUE)
	{
		/* Wait for a command for HMI_ECU */
		USARTCommand = USART_recieveByte();
    2b8c:	0e 94 95 13 	call	0x272a	; 0x272a <USART_recieveByte>
    2b90:	80 93 7d 00 	sts	0x007D, r24
		/* Switch for incoming command */
		switch (USARTCommand)
    2b94:	80 91 7d 00 	lds	r24, 0x007D
    2b98:	a8 2f       	mov	r26, r24
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	bd 87       	std	Y+13, r27	; 0x0d
    2b9e:	ac 87       	std	Y+12, r26	; 0x0c
    2ba0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ba2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ba4:	23 30       	cpi	r18, 0x03	; 3
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	c9 f0       	breq	.+50     	; 0x2bdc <main+0x11a>
    2baa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bae:	84 30       	cpi	r24, 0x04	; 4
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	34 f4       	brge	.+12     	; 0x2bc0 <main+0xfe>
    2bb4:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bb6:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bb8:	a2 30       	cpi	r26, 0x02	; 2
    2bba:	b1 05       	cpc	r27, r1
    2bbc:	61 f0       	breq	.+24     	; 0x2bd6 <main+0x114>
    2bbe:	e6 cf       	rjmp	.-52     	; 0x2b8c <main+0xca>
    2bc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bc2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bc4:	24 30       	cpi	r18, 0x04	; 4
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	61 f0       	breq	.+24     	; 0x2be2 <main+0x120>
    2bca:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bce:	80 3f       	cpi	r24, 0xF0	; 240
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	51 f0       	breq	.+20     	; 0x2be8 <main+0x126>
    2bd4:	db cf       	rjmp	.-74     	; 0x2b8c <main+0xca>
		{
			/* A case indicating a new password needs to be checked and saved */
			case 0x02:
				definePassword();
    2bd6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <definePassword>
    2bda:	d8 cf       	rjmp	.-80     	; 0x2b8c <main+0xca>
			break;
				/* A case indicating an already stored password needs to be checked */
			case 0x03:
				checkPassword();
    2bdc:	0e 94 b3 18 	call	0x3166	; 0x3166 <checkPassword>
    2be0:	d5 cf       	rjmp	.-86     	; 0x2b8c <main+0xca>
			break;
				/* A case indicating a successful password entry */
			case 0x04:
				doorUnlock();
    2be2:	0e 94 72 19 	call	0x32e4	; 0x32e4 <doorUnlock>
    2be6:	d2 cf       	rjmp	.-92     	; 0x2b8c <main+0xca>
			break;
				/* A case indicating an error due to many wrong password entries */
			case 0xF0:
				breachDetection();
    2be8:	0e 94 08 1a 	call	0x3410	; 0x3410 <breachDetection>
    2bec:	cf cf       	rjmp	.-98     	; 0x2b8c <main+0xca>

00002bee <scanPassword>:
 * 		currentPassword array.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void scanPassword(void)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	6d 97       	sbiw	r28, 0x1d	; 29
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0; /* A counter variable for loops */
    2c02:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Read saved password in EEPROM and copy it to current password array */
	for (counter = 0; counter < 5; counter++)
    2c04:	1d 8e       	std	Y+29, r1	; 0x1d
    2c06:	84 c0       	rjmp	.+264    	; 0x2d10 <scanPassword+0x122>
	{
		EEPROM_readByte(0x0001 + counter, &currentPassword[counter]);
    2c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	ac 01       	movw	r20, r24
    2c12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 01       	movw	r18, r24
    2c1a:	28 58       	subi	r18, 0x88	; 136
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	ca 01       	movw	r24, r20
    2c20:	b9 01       	movw	r22, r18
    2c22:	0e 94 01 15 	call	0x2a02	; 0x2a02 <EEPROM_readByte>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e2       	ldi	r26, 0x20	; 32
    2c2c:	b1 e4       	ldi	r27, 0x41	; 65
    2c2e:	89 8f       	std	Y+25, r24	; 0x19
    2c30:	9a 8f       	std	Y+26, r25	; 0x1a
    2c32:	ab 8f       	std	Y+27, r26	; 0x1b
    2c34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a ef       	ldi	r20, 0xFA	; 250
    2c44:	54 e4       	ldi	r21, 0x44	; 68
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8d 8b       	std	Y+21, r24	; 0x15
    2c50:	9e 8b       	std	Y+22, r25	; 0x16
    2c52:	af 8b       	std	Y+23, r26	; 0x17
    2c54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c56:	6d 89       	ldd	r22, Y+21	; 0x15
    2c58:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <scanPassword+0x8a>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <scanPassword+0x108>
	else if (__tmp > 65535)
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	4c f5       	brge	.+82     	; 0x2ce2 <scanPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	69 8d       	ldd	r22, Y+25	; 0x19
    2c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9c 8b       	std	Y+20, r25	; 0x14
    2cb6:	8b 8b       	std	Y+19, r24	; 0x13
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <scanPassword+0xea>
    2cba:	88 ec       	ldi	r24, 0xC8	; 200
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <scanPassword+0xd8>
    2cca:	9a 8b       	std	Y+18, r25	; 0x12
    2ccc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cce:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9c 8b       	std	Y+20, r25	; 0x14
    2cd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	69 f7       	brne	.-38     	; 0x2cba <scanPassword+0xcc>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <scanPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	98 89       	ldd	r25, Y+16	; 0x10
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <scanPassword+0x114>
    2d06:	98 8b       	std	Y+16, r25	; 0x10
    2d08:	8f 87       	std	Y+15, r24	; 0x0f
 */
void scanPassword(void)
{
	uint8 counter = 0; /* A counter variable for loops */
	/* Read saved password in EEPROM and copy it to current password array */
	for (counter = 0; counter < 5; counter++)
    2d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0c:	8f 5f       	subi	r24, 0xFF	; 255
    2d0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d12:	85 30       	cpi	r24, 0x05	; 5
    2d14:	08 f4       	brcc	.+2      	; 0x2d18 <scanPassword+0x12a>
    2d16:	78 cf       	rjmp	.-272    	; 0x2c08 <scanPassword+0x1a>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	aa e7       	ldi	r26, 0x7A	; 122
    2d1e:	b4 e4       	ldi	r27, 0x44	; 68
    2d20:	8b 87       	std	Y+11, r24	; 0x0b
    2d22:	9c 87       	std	Y+12, r25	; 0x0c
    2d24:	ad 87       	std	Y+13, r26	; 0x0d
    2d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	4a ef       	ldi	r20, 0xFA	; 250
    2d36:	54 e4       	ldi	r21, 0x44	; 68
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	8f 83       	std	Y+7, r24	; 0x07
    2d42:	98 87       	std	Y+8, r25	; 0x08
    2d44:	a9 87       	std	Y+9, r26	; 0x09
    2d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5c:	88 23       	and	r24, r24
    2d5e:	2c f4       	brge	.+10     	; 0x2d6a <scanPassword+0x17c>
		__ticks = 1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	3f c0       	rjmp	.+126    	; 0x2de8 <scanPassword+0x1fa>
	else if (__tmp > 65535)
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	57 e4       	ldi	r21, 0x47	; 71
    2d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7e:	18 16       	cp	r1, r24
    2d80:	4c f5       	brge	.+82     	; 0x2dd4 <scanPassword+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	0f c0       	rjmp	.+30     	; 0x2dca <scanPassword+0x1dc>
    2dac:	88 ec       	ldi	r24, 0xC8	; 200
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <scanPassword+0x1ca>
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	69 f7       	brne	.-38     	; 0x2dac <scanPassword+0x1be>
    2dd2:	14 c0       	rjmp	.+40     	; 0x2dfc <scanPassword+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <scanPassword+0x206>
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}
	/* Wait for (1) second */
	_delay_ms(1000);
	/* Loop on the current password array */
	for (counter = 0; counter < 5; counter++)
    2dfc:	1d 8e       	std	Y+29, r1	; 0x1d
    2dfe:	19 c0       	rjmp	.+50     	; 0x2e32 <scanPassword+0x244>
	{
		/* If password was found in EEPROM */
		if (currentPassword[counter] != 0)
    2e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	fc 01       	movw	r30, r24
    2e08:	e8 58       	subi	r30, 0x88	; 136
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 81       	ld	r24, Z
    2e0e:	88 23       	and	r24, r24
    2e10:	39 f0       	breq	.+14     	; 0x2e20 <scanPassword+0x232>
		{
			/* Set password state to (1) */
			passwordState = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	80 93 7e 00 	sts	0x007E, r24
			/* Tell HMI_ECU that password was found */
			USART_sendByte(0xFF);
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
    2e1e:	0c c0       	rjmp	.+24     	; 0x2e38 <scanPassword+0x24a>
			break;
		}
		/* If password was not found */
		if (counter == 4)
    2e20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e22:	84 30       	cpi	r24, 0x04	; 4
    2e24:	19 f4       	brne	.+6      	; 0x2e2c <scanPassword+0x23e>
		{
			/* Tell HMI_ECU that password was not found */
			USART_sendByte(0x00);
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
		_delay_ms(10);
	}
	/* Wait for (1) second */
	_delay_ms(1000);
	/* Loop on the current password array */
	for (counter = 0; counter < 5; counter++)
    2e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e2e:	8f 5f       	subi	r24, 0xFF	; 255
    2e30:	8d 8f       	std	Y+29, r24	; 0x1d
    2e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e34:	85 30       	cpi	r24, 0x05	; 5
    2e36:	20 f3       	brcs	.-56     	; 0x2e00 <scanPassword+0x212>
		{
			/* Tell HMI_ECU that password was not found */
			USART_sendByte(0x00);
		}
	}
}
    2e38:	6d 96       	adiw	r28, 0x1d	; 29
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <timerSeconds>:
 * 		Function that starts counting seconds for door motor.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void timerSeconds(void)
{
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8 seconds = 0; /* Define a variable that holds timer seconds */
	seconds++; /* Increase a second each timer interrupt */
    2e52:	80 91 7f 00 	lds	r24, 0x007F
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	80 93 7f 00 	sts	0x007F, r24
	if (seconds == 15)
    2e5c:	80 91 7f 00 	lds	r24, 0x007F
    2e60:	8f 30       	cpi	r24, 0x0F	; 15
    2e62:	41 f4       	brne	.+16     	; 0x2e74 <timerSeconds+0x2a>
	{
		USART_sendByte(0x04); /* Tell HMI_ECU the states of the door*/
    2e64:	84 e0       	ldi	r24, 0x04	; 4
    2e66:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
		DCMotor_Rotate(STOP, 0); /* Stop motor rotation upon reaching 15 seconds */
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	60 e0       	ldi	r22, 0x00	; 0
    2e6e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <DCMotor_Rotate>
    2e72:	1b c0       	rjmp	.+54     	; 0x2eaa <timerSeconds+0x60>
	}
	else if (seconds == 18)
    2e74:	80 91 7f 00 	lds	r24, 0x007F
    2e78:	82 31       	cpi	r24, 0x12	; 18
    2e7a:	41 f4       	brne	.+16     	; 0x2e8c <timerSeconds+0x42>
	{
		USART_sendByte(0x04); /* Tell HMI_ECU the states of the door*/
    2e7c:	84 e0       	ldi	r24, 0x04	; 4
    2e7e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
		DCMotor_Rotate(COUNTER_CLOCKWISE, 100); /* Start motor rotation upon reaching 18 seconds */
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	64 e6       	ldi	r22, 0x64	; 100
    2e86:	0e 94 59 14 	call	0x28b2	; 0x28b2 <DCMotor_Rotate>
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <timerSeconds+0x60>
	}
	else if (seconds == 33)
    2e8c:	80 91 7f 00 	lds	r24, 0x007F
    2e90:	81 32       	cpi	r24, 0x21	; 33
    2e92:	59 f4       	brne	.+22     	; 0x2eaa <timerSeconds+0x60>
	{
		USART_sendByte(0x04); /* Tell HMI_ECU the states of the door*/
    2e94:	84 e0       	ldi	r24, 0x04	; 4
    2e96:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
		DCMotor_Rotate(STOP, 0); /* Stop motor rotation upon reaching 33 seconds */
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <DCMotor_Rotate>
		/* Stop counting for mechanism time */
		Timer1_stop();
    2ea2:	0e 94 21 12 	call	0x2442	; 0x2442 <Timer1_stop>
		/* Reset counter seconds to (0) */
		seconds = 0;
    2ea6:	10 92 7f 00 	sts	0x007F, r1
	}
}
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <definePassword>:
 * 		Function that compares a password and it's re-entry.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void definePassword(void)
{
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	6d 97       	sbiw	r28, 0x1d	; 29
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0; /* A counter variable for loops */
    2ec8:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
    2eca:	1d 8e       	std	Y+29, r1	; 0x1d
    2ecc:	0c c0       	rjmp	.+24     	; 0x2ee6 <definePassword+0x36>
	{
		receivedPassword[counter] = USART_recieveByte();
    2ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed0:	08 2f       	mov	r16, r24
    2ed2:	10 e0       	ldi	r17, 0x00	; 0
    2ed4:	0e 94 95 13 	call	0x272a	; 0x272a <USART_recieveByte>
    2ed8:	f8 01       	movw	r30, r16
    2eda:	e2 59       	subi	r30, 0x92	; 146
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 83       	st	Z, r24
 */
void definePassword(void)
{
	uint8 counter = 0; /* A counter variable for loops */
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
    2ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee2:	8f 5f       	subi	r24, 0xFF	; 255
    2ee4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee8:	85 30       	cpi	r24, 0x05	; 5
    2eea:	88 f3       	brcs	.-30     	; 0x2ece <definePassword+0x1e>
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Receive re-entered password through USART */
	for (counter = 0; counter < 5; counter++)
    2eec:	1d 8e       	std	Y+29, r1	; 0x1d
    2eee:	0c c0       	rjmp	.+24     	; 0x2f08 <definePassword+0x58>
	{
		receivedPasswordReenter[counter] = USART_recieveByte();
    2ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef2:	08 2f       	mov	r16, r24
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
    2ef6:	0e 94 95 13 	call	0x272a	; 0x272a <USART_recieveByte>
    2efa:	f8 01       	movw	r30, r16
    2efc:	ed 58       	subi	r30, 0x8D	; 141
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 83       	st	Z, r24
	for (counter = 0; counter < 5; counter++)
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Receive re-entered password through USART */
	for (counter = 0; counter < 5; counter++)
    2f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	8d 8f       	std	Y+29, r24	; 0x1d
    2f08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0a:	85 30       	cpi	r24, 0x05	; 5
    2f0c:	88 f3       	brcs	.-30     	; 0x2ef0 <definePassword+0x40>
	{
		receivedPasswordReenter[counter] = USART_recieveByte();
	}
	/* Compare both received passwords */
	for (counter = 0; counter < 5; counter++)
    2f0e:	1d 8e       	std	Y+29, r1	; 0x1d
    2f10:	1b c1       	rjmp	.+566    	; 0x3148 <definePassword+0x298>
	{
		/* If passwords matched or didn't, report status in either ways */
		if (receivedPassword[counter] != receivedPasswordReenter[counter])
    2f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	fc 01       	movw	r30, r24
    2f1a:	e2 59       	subi	r30, 0x92	; 146
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	20 81       	ld	r18, Z
    2f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	fc 01       	movw	r30, r24
    2f28:	ed 58       	subi	r30, 0x8D	; 141
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	28 17       	cp	r18, r24
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <definePassword+0x84>
    2f32:	76 c0       	rjmp	.+236    	; 0x3020 <definePassword+0x170>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e2       	ldi	r26, 0x20	; 32
    2f3a:	b1 e4       	ldi	r27, 0x41	; 65
    2f3c:	89 8f       	std	Y+25, r24	; 0x19
    2f3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f40:	ab 8f       	std	Y+27, r26	; 0x1b
    2f42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	69 8d       	ldd	r22, Y+25	; 0x19
    2f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a ef       	ldi	r20, 0xFA	; 250
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	8d 8b       	std	Y+21, r24	; 0x15
    2f5e:	9e 8b       	std	Y+22, r25	; 0x16
    2f60:	af 8b       	std	Y+23, r26	; 0x17
    2f62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f64:	6d 89       	ldd	r22, Y+21	; 0x15
    2f66:	7e 89       	ldd	r23, Y+22	; 0x16
    2f68:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	2c f4       	brge	.+10     	; 0x2f86 <definePassword+0xd6>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9c 8b       	std	Y+20, r25	; 0x14
    2f82:	8b 8b       	std	Y+19, r24	; 0x13
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <definePassword+0x154>
	else if (__tmp > 65535)
    2f86:	6d 89       	ldd	r22, Y+21	; 0x15
    2f88:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <definePassword+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9c 8b       	std	Y+20, r25	; 0x14
    2fc4:	8b 8b       	std	Y+19, r24	; 0x13
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <definePassword+0x136>
    2fc8:	88 ec       	ldi	r24, 0xC8	; 200
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9a 8b       	std	Y+18, r25	; 0x12
    2fce:	89 8b       	std	Y+17, r24	; 0x11
    2fd0:	89 89       	ldd	r24, Y+17	; 0x11
    2fd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <definePassword+0x124>
    2fd8:	9a 8b       	std	Y+18, r25	; 0x12
    2fda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fde:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	9c 8b       	std	Y+20, r25	; 0x14
    2fe4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	69 f7       	brne	.-38     	; 0x2fc8 <definePassword+0x118>
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <definePassword+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9c 8b       	std	Y+20, r25	; 0x14
    3002:	8b 8b       	std	Y+19, r24	; 0x13
    3004:	8b 89       	ldd	r24, Y+19	; 0x13
    3006:	9c 89       	ldd	r25, Y+20	; 0x14
    3008:	98 8b       	std	Y+16, r25	; 0x10
    300a:	8f 87       	std	Y+15, r24	; 0x0f
    300c:	8f 85       	ldd	r24, Y+15	; 0x0f
    300e:	98 89       	ldd	r25, Y+16	; 0x10
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <definePassword+0x160>
    3014:	98 8b       	std	Y+16, r25	; 0x10
    3016:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(10);
			USART_sendByte(0x00);
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
    301e:	98 c0       	rjmp	.+304    	; 0x3150 <definePassword+0x2a0>
			break;

		}
		if (counter == 4)
    3020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3022:	84 30       	cpi	r24, 0x04	; 4
    3024:	09 f0       	breq	.+2      	; 0x3028 <definePassword+0x178>
    3026:	8d c0       	rjmp	.+282    	; 0x3142 <definePassword+0x292>
		{
			for (counter = 0; counter < 5; counter++)
    3028:	1d 8e       	std	Y+29, r1	; 0x1d
    302a:	13 c0       	rjmp	.+38     	; 0x3052 <definePassword+0x1a2>
			{
				EEPROM_writeByte(0x0001 + counter, receivedPassword[counter]);
    302c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	ac 01       	movw	r20, r24
    3036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3038:	88 2f       	mov	r24, r24
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	fc 01       	movw	r30, r24
    303e:	e2 59       	subi	r30, 0x92	; 146
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	20 81       	ld	r18, Z
    3044:	ca 01       	movw	r24, r20
    3046:	62 2f       	mov	r22, r18
    3048:	0e 94 c0 14 	call	0x2980	; 0x2980 <EEPROM_writeByte>
			break;

		}
		if (counter == 4)
		{
			for (counter = 0; counter < 5; counter++)
    304c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	8d 8f       	std	Y+29, r24	; 0x1d
    3052:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3054:	85 30       	cpi	r24, 0x05	; 5
    3056:	50 f3       	brcs	.-44     	; 0x302c <definePassword+0x17c>
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	a0 e2       	ldi	r26, 0x20	; 32
    305e:	b1 e4       	ldi	r27, 0x41	; 65
    3060:	8b 87       	std	Y+11, r24	; 0x0b
    3062:	9c 87       	std	Y+12, r25	; 0x0c
    3064:	ad 87       	std	Y+13, r26	; 0x0d
    3066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3068:	6b 85       	ldd	r22, Y+11	; 0x0b
    306a:	7c 85       	ldd	r23, Y+12	; 0x0c
    306c:	8d 85       	ldd	r24, Y+13	; 0x0d
    306e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a ef       	ldi	r20, 0xFA	; 250
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8f 83       	std	Y+7, r24	; 0x07
    3082:	98 87       	std	Y+8, r25	; 0x08
    3084:	a9 87       	std	Y+9, r26	; 0x09
    3086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3088:	6f 81       	ldd	r22, Y+7	; 0x07
    308a:	78 85       	ldd	r23, Y+8	; 0x08
    308c:	89 85       	ldd	r24, Y+9	; 0x09
    308e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e8       	ldi	r20, 0x80	; 128
    3096:	5f e3       	ldi	r21, 0x3F	; 63
    3098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    309c:	88 23       	and	r24, r24
    309e:	2c f4       	brge	.+10     	; 0x30aa <definePassword+0x1fa>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	3f c0       	rjmp	.+126    	; 0x3128 <definePassword+0x278>
	else if (__tmp > 65535)
    30aa:	6f 81       	ldd	r22, Y+7	; 0x07
    30ac:	78 85       	ldd	r23, Y+8	; 0x08
    30ae:	89 85       	ldd	r24, Y+9	; 0x09
    30b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	3f ef       	ldi	r19, 0xFF	; 255
    30b6:	4f e7       	ldi	r20, 0x7F	; 127
    30b8:	57 e4       	ldi	r21, 0x47	; 71
    30ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30be:	18 16       	cp	r1, r24
    30c0:	4c f5       	brge	.+82     	; 0x3114 <definePassword+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e2       	ldi	r20, 0x20	; 32
    30d0:	51 e4       	ldi	r21, 0x41	; 65
    30d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	0f c0       	rjmp	.+30     	; 0x310a <definePassword+0x25a>
    30ec:	88 ec       	ldi	r24, 0xC8	; 200
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9c 83       	std	Y+4, r25	; 0x04
    30f2:	8b 83       	std	Y+3, r24	; 0x03
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <definePassword+0x248>
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3100:	8d 81       	ldd	r24, Y+5	; 0x05
    3102:	9e 81       	ldd	r25, Y+6	; 0x06
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	9e 83       	std	Y+6, r25	; 0x06
    3108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	9e 81       	ldd	r25, Y+6	; 0x06
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	69 f7       	brne	.-38     	; 0x30ec <definePassword+0x23c>
    3112:	14 c0       	rjmp	.+40     	; 0x313c <definePassword+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	9a 83       	std	Y+2, r25	; 0x02
    312e:	89 83       	std	Y+1, r24	; 0x01
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <definePassword+0x284>
    3138:	9a 83       	std	Y+2, r25	; 0x02
    313a:	89 83       	std	Y+1, r24	; 0x01
			{
				EEPROM_writeByte(0x0001 + counter, receivedPassword[counter]);
			}
			_delay_ms(10);
			USART_sendByte(0x02);
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
	for (counter = 0; counter < 5; counter++)
	{
		receivedPasswordReenter[counter] = USART_recieveByte();
	}
	/* Compare both received passwords */
	for (counter = 0; counter < 5; counter++)
    3142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	8d 8f       	std	Y+29, r24	; 0x1d
    3148:	8d 8d       	ldd	r24, Y+29	; 0x1d
    314a:	85 30       	cpi	r24, 0x05	; 5
    314c:	08 f4       	brcc	.+2      	; 0x3150 <definePassword+0x2a0>
    314e:	e1 ce       	rjmp	.-574    	; 0x2f12 <definePassword+0x62>
			}
			_delay_ms(10);
			USART_sendByte(0x02);
		}
	}
}
    3150:	6d 96       	adiw	r28, 0x1d	; 29
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	08 95       	ret

00003166 <checkPassword>:
 * 		in EEPROM match.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void checkPassword(void)
{
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	2f 97       	sbiw	r28, 0x0f	; 15
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0; /* A counter variable for loops */
    317e:	1f 86       	std	Y+15, r1	; 0x0f
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
    3180:	1f 86       	std	Y+15, r1	; 0x0f
    3182:	0c c0       	rjmp	.+24     	; 0x319c <checkPassword+0x36>
	{
		receivedPassword[counter] = USART_recieveByte();
    3184:	8f 85       	ldd	r24, Y+15	; 0x0f
    3186:	08 2f       	mov	r16, r24
    3188:	10 e0       	ldi	r17, 0x00	; 0
    318a:	0e 94 95 13 	call	0x272a	; 0x272a <USART_recieveByte>
    318e:	f8 01       	movw	r30, r16
    3190:	e2 59       	subi	r30, 0x92	; 146
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 83       	st	Z, r24
 */
void checkPassword(void)
{
	uint8 counter = 0; /* A counter variable for loops */
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
    3196:	8f 85       	ldd	r24, Y+15	; 0x0f
    3198:	8f 5f       	subi	r24, 0xFF	; 255
    319a:	8f 87       	std	Y+15, r24	; 0x0f
    319c:	8f 85       	ldd	r24, Y+15	; 0x0f
    319e:	85 30       	cpi	r24, 0x05	; 5
    31a0:	88 f3       	brcs	.-30     	; 0x3184 <checkPassword+0x1e>
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Check if received password matches the password in EEPROM */
	for (counter = 0; counter < 5; counter++)
    31a2:	1f 86       	std	Y+15, r1	; 0x0f
    31a4:	90 c0       	rjmp	.+288    	; 0x32c6 <checkPassword+0x160>
	{
		/* If passwords matched or didn't, report status in either ways */
		if (receivedPassword[counter] != currentPassword[counter])
    31a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a8:	88 2f       	mov	r24, r24
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	fc 01       	movw	r30, r24
    31ae:	e2 59       	subi	r30, 0x92	; 146
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	20 81       	ld	r18, Z
    31b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b6:	88 2f       	mov	r24, r24
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	fc 01       	movw	r30, r24
    31bc:	e8 58       	subi	r30, 0x88	; 136
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	28 17       	cp	r18, r24
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <checkPassword+0x62>
    31c6:	76 c0       	rjmp	.+236    	; 0x32b4 <checkPassword+0x14e>
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a0 e2       	ldi	r26, 0x20	; 32
    31ce:	b1 e4       	ldi	r27, 0x41	; 65
    31d0:	8b 87       	std	Y+11, r24	; 0x0b
    31d2:	9c 87       	std	Y+12, r25	; 0x0c
    31d4:	ad 87       	std	Y+13, r26	; 0x0d
    31d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31da:	7c 85       	ldd	r23, Y+12	; 0x0c
    31dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31de:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a ef       	ldi	r20, 0xFA	; 250
    31e6:	54 e4       	ldi	r21, 0x44	; 68
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8f 83       	std	Y+7, r24	; 0x07
    31f2:	98 87       	std	Y+8, r25	; 0x08
    31f4:	a9 87       	std	Y+9, r26	; 0x09
    31f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e8       	ldi	r20, 0x80	; 128
    3206:	5f e3       	ldi	r21, 0x3F	; 63
    3208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320c:	88 23       	and	r24, r24
    320e:	2c f4       	brge	.+10     	; 0x321a <checkPassword+0xb4>
		__ticks = 1;
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	3f c0       	rjmp	.+126    	; 0x3298 <checkPassword+0x132>
	else if (__tmp > 65535)
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	3f ef       	ldi	r19, 0xFF	; 255
    3226:	4f e7       	ldi	r20, 0x7F	; 127
    3228:	57 e4       	ldi	r21, 0x47	; 71
    322a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322e:	18 16       	cp	r1, r24
    3230:	4c f5       	brge	.+82     	; 0x3284 <checkPassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3232:	6b 85       	ldd	r22, Y+11	; 0x0b
    3234:	7c 85       	ldd	r23, Y+12	; 0x0c
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e2       	ldi	r20, 0x20	; 32
    3240:	51 e4       	ldi	r21, 0x41	; 65
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	0f c0       	rjmp	.+30     	; 0x327a <checkPassword+0x114>
    325c:	88 ec       	ldi	r24, 0xC8	; 200
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <checkPassword+0x102>
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327a:	8d 81       	ldd	r24, Y+5	; 0x05
    327c:	9e 81       	ldd	r25, Y+6	; 0x06
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	69 f7       	brne	.-38     	; 0x325c <checkPassword+0xf6>
    3282:	14 c0       	rjmp	.+40     	; 0x32ac <checkPassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3284:	6f 81       	ldd	r22, Y+7	; 0x07
    3286:	78 85       	ldd	r23, Y+8	; 0x08
    3288:	89 85       	ldd	r24, Y+9	; 0x09
    328a:	9a 85       	ldd	r25, Y+10	; 0x0a
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9e 83       	std	Y+6, r25	; 0x06
    3296:	8d 83       	std	Y+5, r24	; 0x05
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <checkPassword+0x13e>
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(10);
			USART_sendByte(0x00);
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
    32b2:	0d c0       	rjmp	.+26     	; 0x32ce <checkPassword+0x168>
			break;
		}
		if (counter == 4)
    32b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b6:	84 30       	cpi	r24, 0x04	; 4
    32b8:	19 f4       	brne	.+6      	; 0x32c0 <checkPassword+0x15a>
		{
			USART_sendByte(0x03);
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
	for (counter = 0; counter < 5; counter++)
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Check if received password matches the password in EEPROM */
	for (counter = 0; counter < 5; counter++)
    32c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c2:	8f 5f       	subi	r24, 0xFF	; 255
    32c4:	8f 87       	std	Y+15, r24	; 0x0f
    32c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c8:	85 30       	cpi	r24, 0x05	; 5
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <checkPassword+0x168>
    32cc:	6c cf       	rjmp	.-296    	; 0x31a6 <checkPassword+0x40>
		if (counter == 4)
		{
			USART_sendByte(0x03);
		}
	}
}
    32ce:	2f 96       	adiw	r28, 0x0f	; 15
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	08 95       	ret

000032e4 <doorUnlock>:
 * 		Function that executes door locking & unlocking mechanisms.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void doorUnlock(void)
{
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	2f 97       	sbiw	r28, 0x0f	; 15
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0; /* A counter variable for loops */
    32f8:	1f 86       	std	Y+15, r1	; 0x0f
	/* Rotate the motor clock wise */
	DCMotor_Rotate(CLOCKWISE, 100);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	64 e6       	ldi	r22, 0x64	; 100
    32fe:	0e 94 59 14 	call	0x28b2	; 0x28b2 <DCMotor_Rotate>
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	a0 e2       	ldi	r26, 0x20	; 32
    3308:	b1 e4       	ldi	r27, 0x41	; 65
    330a:	8b 87       	std	Y+11, r24	; 0x0b
    330c:	9c 87       	std	Y+12, r25	; 0x0c
    330e:	ad 87       	std	Y+13, r26	; 0x0d
    3310:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3312:	6b 85       	ldd	r22, Y+11	; 0x0b
    3314:	7c 85       	ldd	r23, Y+12	; 0x0c
    3316:	8d 85       	ldd	r24, Y+13	; 0x0d
    3318:	9e 85       	ldd	r25, Y+14	; 0x0e
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	4a ef       	ldi	r20, 0xFA	; 250
    3320:	54 e4       	ldi	r21, 0x44	; 68
    3322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	8f 83       	std	Y+7, r24	; 0x07
    332c:	98 87       	std	Y+8, r25	; 0x08
    332e:	a9 87       	std	Y+9, r26	; 0x09
    3330:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3332:	6f 81       	ldd	r22, Y+7	; 0x07
    3334:	78 85       	ldd	r23, Y+8	; 0x08
    3336:	89 85       	ldd	r24, Y+9	; 0x09
    3338:	9a 85       	ldd	r25, Y+10	; 0x0a
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e8       	ldi	r20, 0x80	; 128
    3340:	5f e3       	ldi	r21, 0x3F	; 63
    3342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3346:	88 23       	and	r24, r24
    3348:	2c f4       	brge	.+10     	; 0x3354 <doorUnlock+0x70>
		__ticks = 1;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	8d 83       	std	Y+5, r24	; 0x05
    3352:	3f c0       	rjmp	.+126    	; 0x33d2 <doorUnlock+0xee>
	else if (__tmp > 65535)
    3354:	6f 81       	ldd	r22, Y+7	; 0x07
    3356:	78 85       	ldd	r23, Y+8	; 0x08
    3358:	89 85       	ldd	r24, Y+9	; 0x09
    335a:	9a 85       	ldd	r25, Y+10	; 0x0a
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	3f ef       	ldi	r19, 0xFF	; 255
    3360:	4f e7       	ldi	r20, 0x7F	; 127
    3362:	57 e4       	ldi	r21, 0x47	; 71
    3364:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3368:	18 16       	cp	r1, r24
    336a:	4c f5       	brge	.+82     	; 0x33be <doorUnlock+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336c:	6b 85       	ldd	r22, Y+11	; 0x0b
    336e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3370:	8d 85       	ldd	r24, Y+13	; 0x0d
    3372:	9e 85       	ldd	r25, Y+14	; 0x0e
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e2       	ldi	r20, 0x20	; 32
    337a:	51 e4       	ldi	r21, 0x41	; 65
    337c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	bc 01       	movw	r22, r24
    3386:	cd 01       	movw	r24, r26
    3388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    3394:	0f c0       	rjmp	.+30     	; 0x33b4 <doorUnlock+0xd0>
    3396:	88 ec       	ldi	r24, 0xC8	; 200
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	9c 83       	std	Y+4, r25	; 0x04
    339c:	8b 83       	std	Y+3, r24	; 0x03
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	9c 81       	ldd	r25, Y+4	; 0x04
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <doorUnlock+0xbe>
    33a6:	9c 83       	std	Y+4, r25	; 0x04
    33a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	9e 81       	ldd	r25, Y+6	; 0x06
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	9e 83       	std	Y+6, r25	; 0x06
    33b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b4:	8d 81       	ldd	r24, Y+5	; 0x05
    33b6:	9e 81       	ldd	r25, Y+6	; 0x06
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	69 f7       	brne	.-38     	; 0x3396 <doorUnlock+0xb2>
    33bc:	14 c0       	rjmp	.+40     	; 0x33e6 <doorUnlock+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33be:	6f 81       	ldd	r22, Y+7	; 0x07
    33c0:	78 85       	ldd	r23, Y+8	; 0x08
    33c2:	89 85       	ldd	r24, Y+9	; 0x09
    33c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	9e 83       	std	Y+6, r25	; 0x06
    33d0:	8d 83       	std	Y+5, r24	; 0x05
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	9e 81       	ldd	r25, Y+6	; 0x06
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	f1 f7       	brne	.-4      	; 0x33de <doorUnlock+0xfa>
    33e2:	9a 83       	std	Y+2, r25	; 0x02
    33e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	/* Tell HMI_ECU the states of the door*/
	USART_sendByte(0x04);
    33e6:	84 e0       	ldi	r24, 0x04	; 4
    33e8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <USART_sendByte>
	/* Start counting for mechanism time */
	Timer1_start(TIMER01_PRESCALER_256, 0, 31259, 0);
    33ec:	84 e0       	ldi	r24, 0x04	; 4
    33ee:	60 e0       	ldi	r22, 0x00	; 0
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	4b e1       	ldi	r20, 0x1B	; 27
    33f4:	5a e7       	ldi	r21, 0x7A	; 122
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	0e 94 a0 11 	call	0x2340	; 0x2340 <Timer1_start>
}
    33fe:	2f 96       	adiw	r28, 0x0f	; 15
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <breachDetection>:
 * 		Function that is executes when user enters wrong password 3 times.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void breachDetection(void)
{
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	2f 97       	sbiw	r28, 0x0f	; 15
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0; /* A counter variable for loops */
    3424:	1f 86       	std	Y+15, r1	; 0x0f
	/* Turn on buzzer */
	Buzzer_on();
    3426:	0e 94 21 14 	call	0x2842	; 0x2842 <Buzzer_on>
	/* Wait for (60) seconds*/
	for (counter = 0; counter < 5; counter++)
    342a:	1f 86       	std	Y+15, r1	; 0x0f
    342c:	75 c0       	rjmp	.+234    	; 0x3518 <breachDetection+0x108>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e4       	ldi	r25, 0x40	; 64
    3432:	ac e1       	ldi	r26, 0x1C	; 28
    3434:	b6 e4       	ldi	r27, 0x46	; 70
    3436:	8b 87       	std	Y+11, r24	; 0x0b
    3438:	9c 87       	std	Y+12, r25	; 0x0c
    343a:	ad 87       	std	Y+13, r26	; 0x0d
    343c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3440:	7c 85       	ldd	r23, Y+12	; 0x0c
    3442:	8d 85       	ldd	r24, Y+13	; 0x0d
    3444:	9e 85       	ldd	r25, Y+14	; 0x0e
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	4a ef       	ldi	r20, 0xFA	; 250
    344c:	54 e4       	ldi	r21, 0x44	; 68
    344e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	98 87       	std	Y+8, r25	; 0x08
    345a:	a9 87       	std	Y+9, r26	; 0x09
    345c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e8       	ldi	r20, 0x80	; 128
    346c:	5f e3       	ldi	r21, 0x3F	; 63
    346e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3472:	88 23       	and	r24, r24
    3474:	2c f4       	brge	.+10     	; 0x3480 <breachDetection+0x70>
		__ticks = 1;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	9e 83       	std	Y+6, r25	; 0x06
    347c:	8d 83       	std	Y+5, r24	; 0x05
    347e:	3f c0       	rjmp	.+126    	; 0x34fe <breachDetection+0xee>
	else if (__tmp > 65535)
    3480:	6f 81       	ldd	r22, Y+7	; 0x07
    3482:	78 85       	ldd	r23, Y+8	; 0x08
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	3f ef       	ldi	r19, 0xFF	; 255
    348c:	4f e7       	ldi	r20, 0x7F	; 127
    348e:	57 e4       	ldi	r21, 0x47	; 71
    3490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3494:	18 16       	cp	r1, r24
    3496:	4c f5       	brge	.+82     	; 0x34ea <breachDetection+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	6b 85       	ldd	r22, Y+11	; 0x0b
    349a:	7c 85       	ldd	r23, Y+12	; 0x0c
    349c:	8d 85       	ldd	r24, Y+13	; 0x0d
    349e:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	0f c0       	rjmp	.+30     	; 0x34e0 <breachDetection+0xd0>
    34c2:	88 ec       	ldi	r24, 0xC8	; 200
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	9c 83       	std	Y+4, r25	; 0x04
    34c8:	8b 83       	std	Y+3, r24	; 0x03
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	9c 81       	ldd	r25, Y+4	; 0x04
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <breachDetection+0xbe>
    34d2:	9c 83       	std	Y+4, r25	; 0x04
    34d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d6:	8d 81       	ldd	r24, Y+5	; 0x05
    34d8:	9e 81       	ldd	r25, Y+6	; 0x06
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	69 f7       	brne	.-38     	; 0x34c2 <breachDetection+0xb2>
    34e8:	14 c0       	rjmp	.+40     	; 0x3512 <breachDetection+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	9a 83       	std	Y+2, r25	; 0x02
    3504:	89 83       	std	Y+1, r24	; 0x01
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <breachDetection+0xfa>
    350e:	9a 83       	std	Y+2, r25	; 0x02
    3510:	89 83       	std	Y+1, r24	; 0x01
    3512:	8f 85       	ldd	r24, Y+15	; 0x0f
    3514:	8f 5f       	subi	r24, 0xFF	; 255
    3516:	8f 87       	std	Y+15, r24	; 0x0f
    3518:	8f 85       	ldd	r24, Y+15	; 0x0f
    351a:	85 30       	cpi	r24, 0x05	; 5
    351c:	08 f4       	brcc	.+2      	; 0x3520 <breachDetection+0x110>
    351e:	87 cf       	rjmp	.-242    	; 0x342e <breachDetection+0x1e>
	{
		_delay_ms(10000);
	}
	/* Turn off buzzer */
	Buzzer_off();
    3520:	0e 94 2d 14 	call	0x285a	; 0x285a <Buzzer_off>
}
    3524:	2f 96       	adiw	r28, 0x0f	; 15
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <__udivmodhi4>:
    3536:	aa 1b       	sub	r26, r26
    3538:	bb 1b       	sub	r27, r27
    353a:	51 e1       	ldi	r21, 0x11	; 17
    353c:	07 c0       	rjmp	.+14     	; 0x354c <__udivmodhi4_ep>

0000353e <__udivmodhi4_loop>:
    353e:	aa 1f       	adc	r26, r26
    3540:	bb 1f       	adc	r27, r27
    3542:	a6 17       	cp	r26, r22
    3544:	b7 07       	cpc	r27, r23
    3546:	10 f0       	brcs	.+4      	; 0x354c <__udivmodhi4_ep>
    3548:	a6 1b       	sub	r26, r22
    354a:	b7 0b       	sbc	r27, r23

0000354c <__udivmodhi4_ep>:
    354c:	88 1f       	adc	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	5a 95       	dec	r21
    3552:	a9 f7       	brne	.-22     	; 0x353e <__udivmodhi4_loop>
    3554:	80 95       	com	r24
    3556:	90 95       	com	r25
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	08 95       	ret

0000355e <__udivmodsi4>:
    355e:	a1 e2       	ldi	r26, 0x21	; 33
    3560:	1a 2e       	mov	r1, r26
    3562:	aa 1b       	sub	r26, r26
    3564:	bb 1b       	sub	r27, r27
    3566:	fd 01       	movw	r30, r26
    3568:	0d c0       	rjmp	.+26     	; 0x3584 <__udivmodsi4_ep>

0000356a <__udivmodsi4_loop>:
    356a:	aa 1f       	adc	r26, r26
    356c:	bb 1f       	adc	r27, r27
    356e:	ee 1f       	adc	r30, r30
    3570:	ff 1f       	adc	r31, r31
    3572:	a2 17       	cp	r26, r18
    3574:	b3 07       	cpc	r27, r19
    3576:	e4 07       	cpc	r30, r20
    3578:	f5 07       	cpc	r31, r21
    357a:	20 f0       	brcs	.+8      	; 0x3584 <__udivmodsi4_ep>
    357c:	a2 1b       	sub	r26, r18
    357e:	b3 0b       	sbc	r27, r19
    3580:	e4 0b       	sbc	r30, r20
    3582:	f5 0b       	sbc	r31, r21

00003584 <__udivmodsi4_ep>:
    3584:	66 1f       	adc	r22, r22
    3586:	77 1f       	adc	r23, r23
    3588:	88 1f       	adc	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	1a 94       	dec	r1
    358e:	69 f7       	brne	.-38     	; 0x356a <__udivmodsi4_loop>
    3590:	60 95       	com	r22
    3592:	70 95       	com	r23
    3594:	80 95       	com	r24
    3596:	90 95       	com	r25
    3598:	9b 01       	movw	r18, r22
    359a:	ac 01       	movw	r20, r24
    359c:	bd 01       	movw	r22, r26
    359e:	cf 01       	movw	r24, r30
    35a0:	08 95       	ret

000035a2 <__prologue_saves__>:
    35a2:	2f 92       	push	r2
    35a4:	3f 92       	push	r3
    35a6:	4f 92       	push	r4
    35a8:	5f 92       	push	r5
    35aa:	6f 92       	push	r6
    35ac:	7f 92       	push	r7
    35ae:	8f 92       	push	r8
    35b0:	9f 92       	push	r9
    35b2:	af 92       	push	r10
    35b4:	bf 92       	push	r11
    35b6:	cf 92       	push	r12
    35b8:	df 92       	push	r13
    35ba:	ef 92       	push	r14
    35bc:	ff 92       	push	r15
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	ca 1b       	sub	r28, r26
    35cc:	db 0b       	sbc	r29, r27
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	09 94       	ijmp

000035da <__epilogue_restores__>:
    35da:	2a 88       	ldd	r2, Y+18	; 0x12
    35dc:	39 88       	ldd	r3, Y+17	; 0x11
    35de:	48 88       	ldd	r4, Y+16	; 0x10
    35e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ec:	b9 84       	ldd	r11, Y+9	; 0x09
    35ee:	c8 84       	ldd	r12, Y+8	; 0x08
    35f0:	df 80       	ldd	r13, Y+7	; 0x07
    35f2:	ee 80       	ldd	r14, Y+6	; 0x06
    35f4:	fd 80       	ldd	r15, Y+5	; 0x05
    35f6:	0c 81       	ldd	r16, Y+4	; 0x04
    35f8:	1b 81       	ldd	r17, Y+3	; 0x03
    35fa:	aa 81       	ldd	r26, Y+2	; 0x02
    35fc:	b9 81       	ldd	r27, Y+1	; 0x01
    35fe:	ce 0f       	add	r28, r30
    3600:	d1 1d       	adc	r29, r1
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	ed 01       	movw	r28, r26
    360e:	08 95       	ret

00003610 <_exit>:
    3610:	f8 94       	cli

00003612 <__stop_program>:
    3612:	ff cf       	rjmp	.-2      	; 0x3612 <__stop_program>
