
DoorLockerSecuritySystemProject_CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003618  000036ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800068  00800068  000036b4  2**0
                  ALLOC
  3 .stab         000031bc  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001810  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000081c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c001  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_7>
      20:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__vector_8>
      24:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__vector_9>
      28:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__vector_10>
      2c:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 37       	cpi	r26, 0x7F	; 127
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e1       	ldi	r30, 0x18	; 24
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a6 08 	call	0x114c	; 0x114c <main>
      8a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timerSeconds>:
 * 		Function that starts counting seconds for door motor.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void timerSeconds(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8 seconds = 0; /* Define a variable that holds timer seconds */
	seconds++; /* Increase a second each timer interrupt */
     b4e:	80 91 78 00 	lds	r24, 0x0078
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 78 00 	sts	0x0078, r24
	if (seconds == 15)
     b58:	80 91 78 00 	lds	r24, 0x0078
     b5c:	8f 30       	cpi	r24, 0x0F	; 15
     b5e:	41 f4       	brne	.+16     	; 0xb70 <timerSeconds+0x2a>
	{
		USART_sendByte(0x04); /* Tell HMI_ECU the states of the door*/
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
		DCMotor_Rotate(STOP, 0); /* Stop motor rotation upon reaching 15 seconds */
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 28 0b 	call	0x1650	; 0x1650 <DCMotor_Rotate>
     b6e:	1b c0       	rjmp	.+54     	; 0xba6 <timerSeconds+0x60>
	}
	else if (seconds == 18)
     b70:	80 91 78 00 	lds	r24, 0x0078
     b74:	82 31       	cpi	r24, 0x12	; 18
     b76:	41 f4       	brne	.+16     	; 0xb88 <timerSeconds+0x42>
	{
		USART_sendByte(0x04); /* Tell HMI_ECU the states of the door*/
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
		DCMotor_Rotate(COUNTER_CLOCKWISE, 100); /* Start motor rotation upon reaching 18 seconds */
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	64 e6       	ldi	r22, 0x64	; 100
     b82:	0e 94 28 0b 	call	0x1650	; 0x1650 <DCMotor_Rotate>
     b86:	0f c0       	rjmp	.+30     	; 0xba6 <timerSeconds+0x60>
	}
	else if (seconds == 33)
     b88:	80 91 78 00 	lds	r24, 0x0078
     b8c:	81 32       	cpi	r24, 0x21	; 33
     b8e:	59 f4       	brne	.+22     	; 0xba6 <timerSeconds+0x60>
	{
		USART_sendByte(0x04); /* Tell HMI_ECU the states of the door*/
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
		DCMotor_Rotate(STOP, 0); /* Stop motor rotation upon reaching 33 seconds */
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	0e 94 28 0b 	call	0x1650	; 0x1650 <DCMotor_Rotate>
		/* Stop counting for mechanism time */
		Timer1_stop();
     b9e:	0e 94 ae 18 	call	0x315c	; 0x315c <Timer1_stop>
		/* Reset counter seconds to (0) */
		seconds = 0;
     ba2:	10 92 78 00 	sts	0x0078, r1
	}
}
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <definePassword>:
 * 		Function that compares a password and it's re-entry.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void definePassword(void)
{
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	6c 97       	sbiw	r28, 0x1c	; 28
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
     bc4:	10 92 77 00 	sts	0x0077, r1
     bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <definePassword+0x3c>
	{
		receivedPassword[counter] = USART_recieveByte();
     bca:	80 91 77 00 	lds	r24, 0x0077
     bce:	08 2f       	mov	r16, r24
     bd0:	10 e0       	ldi	r17, 0x00	; 0
     bd2:	0e 94 22 1a 	call	0x3444	; 0x3444 <USART_recieveByte>
     bd6:	f8 01       	movw	r30, r16
     bd8:	e8 59       	subi	r30, 0x98	; 152
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	80 83       	st	Z, r24
 * [Return]	: Void.
 */
static void definePassword(void)
{
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
     bde:	80 91 77 00 	lds	r24, 0x0077
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	80 93 77 00 	sts	0x0077, r24
     be8:	80 91 77 00 	lds	r24, 0x0077
     bec:	85 30       	cpi	r24, 0x05	; 5
     bee:	68 f3       	brcs	.-38     	; 0xbca <definePassword+0x1e>
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Receive re-entered password through USART */
	for (counter = 0; counter < 5; counter++)
     bf0:	10 92 77 00 	sts	0x0077, r1
     bf4:	0f c0       	rjmp	.+30     	; 0xc14 <definePassword+0x68>
	{
		receivedPasswordReenter[counter] = USART_recieveByte();
     bf6:	80 91 77 00 	lds	r24, 0x0077
     bfa:	08 2f       	mov	r16, r24
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	0e 94 22 1a 	call	0x3444	; 0x3444 <USART_recieveByte>
     c02:	f8 01       	movw	r30, r16
     c04:	e3 59       	subi	r30, 0x93	; 147
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	80 83       	st	Z, r24
	for (counter = 0; counter < 5; counter++)
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Receive re-entered password through USART */
	for (counter = 0; counter < 5; counter++)
     c0a:	80 91 77 00 	lds	r24, 0x0077
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	80 93 77 00 	sts	0x0077, r24
     c14:	80 91 77 00 	lds	r24, 0x0077
     c18:	85 30       	cpi	r24, 0x05	; 5
     c1a:	68 f3       	brcs	.-38     	; 0xbf6 <definePassword+0x4a>
	{
		receivedPasswordReenter[counter] = USART_recieveByte();
	}
	/* Compare both received passwords */
	for (counter = 0; counter < 5; counter++)
     c1c:	10 92 77 00 	sts	0x0077, r1
     c20:	26 c1       	rjmp	.+588    	; 0xe6e <definePassword+0x2c2>
	{
		/* If passwords matched or didn't, report status in either ways */
		if (receivedPassword[counter] != receivedPasswordReenter[counter])
     c22:	80 91 77 00 	lds	r24, 0x0077
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	e8 59       	subi	r30, 0x98	; 152
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	20 81       	ld	r18, Z
     c32:	80 91 77 00 	lds	r24, 0x0077
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	fc 01       	movw	r30, r24
     c3c:	e3 59       	subi	r30, 0x93	; 147
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	80 81       	ld	r24, Z
     c42:	28 17       	cp	r18, r24
     c44:	09 f4       	brne	.+2      	; 0xc48 <definePassword+0x9c>
     c46:	76 c0       	rjmp	.+236    	; 0xd34 <definePassword+0x188>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e2       	ldi	r26, 0x20	; 32
     c4e:	b1 e4       	ldi	r27, 0x41	; 65
     c50:	89 8f       	std	Y+25, r24	; 0x19
     c52:	9a 8f       	std	Y+26, r25	; 0x1a
     c54:	ab 8f       	std	Y+27, r26	; 0x1b
     c56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c58:	69 8d       	ldd	r22, Y+25	; 0x19
     c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a ef       	ldi	r20, 0xFA	; 250
     c66:	54 e4       	ldi	r21, 0x44	; 68
     c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	8d 8b       	std	Y+21, r24	; 0x15
     c72:	9e 8b       	std	Y+22, r25	; 0x16
     c74:	af 8b       	std	Y+23, r26	; 0x17
     c76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c78:	6d 89       	ldd	r22, Y+21	; 0x15
     c7a:	7e 89       	ldd	r23, Y+22	; 0x16
     c7c:	8f 89       	ldd	r24, Y+23	; 0x17
     c7e:	98 8d       	ldd	r25, Y+24	; 0x18
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c8c:	88 23       	and	r24, r24
     c8e:	2c f4       	brge	.+10     	; 0xc9a <definePassword+0xee>
		__ticks = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9c 8b       	std	Y+20, r25	; 0x14
     c96:	8b 8b       	std	Y+19, r24	; 0x13
     c98:	3f c0       	rjmp	.+126    	; 0xd18 <definePassword+0x16c>
	else if (__tmp > 65535)
     c9a:	6d 89       	ldd	r22, Y+21	; 0x15
     c9c:	7e 89       	ldd	r23, Y+22	; 0x16
     c9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ca0:	98 8d       	ldd	r25, Y+24	; 0x18
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	4f e7       	ldi	r20, 0x7F	; 127
     ca8:	57 e4       	ldi	r21, 0x47	; 71
     caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cae:	18 16       	cp	r1, r24
     cb0:	4c f5       	brge	.+82     	; 0xd04 <definePassword+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb2:	69 8d       	ldd	r22, Y+25	; 0x19
     cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e2       	ldi	r20, 0x20	; 32
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	bc 01       	movw	r22, r24
     ccc:	cd 01       	movw	r24, r26
     cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9c 8b       	std	Y+20, r25	; 0x14
     cd8:	8b 8b       	std	Y+19, r24	; 0x13
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <definePassword+0x14e>
     cdc:	88 ec       	ldi	r24, 0xC8	; 200
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	9a 89       	ldd	r25, Y+18	; 0x12
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <definePassword+0x13c>
     cec:	9a 8b       	std	Y+18, r25	; 0x12
     cee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf0:	8b 89       	ldd	r24, Y+19	; 0x13
     cf2:	9c 89       	ldd	r25, Y+20	; 0x14
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	9c 8b       	std	Y+20, r25	; 0x14
     cf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	8b 89       	ldd	r24, Y+19	; 0x13
     cfc:	9c 89       	ldd	r25, Y+20	; 0x14
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	69 f7       	brne	.-38     	; 0xcdc <definePassword+0x130>
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <definePassword+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d04:	6d 89       	ldd	r22, Y+21	; 0x15
     d06:	7e 89       	ldd	r23, Y+22	; 0x16
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9c 8b       	std	Y+20, r25	; 0x14
     d16:	8b 8b       	std	Y+19, r24	; 0x13
     d18:	8b 89       	ldd	r24, Y+19	; 0x13
     d1a:	9c 89       	ldd	r25, Y+20	; 0x14
     d1c:	98 8b       	std	Y+16, r25	; 0x10
     d1e:	8f 87       	std	Y+15, r24	; 0x0f
     d20:	8f 85       	ldd	r24, Y+15	; 0x0f
     d22:	98 89       	ldd	r25, Y+16	; 0x10
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <definePassword+0x178>
     d28:	98 8b       	std	Y+16, r25	; 0x10
     d2a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(10);
			USART_sendByte(0x00);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
     d32:	a2 c0       	rjmp	.+324    	; 0xe78 <definePassword+0x2cc>
			break;

		}
		if (counter == 4)
     d34:	80 91 77 00 	lds	r24, 0x0077
     d38:	84 30       	cpi	r24, 0x04	; 4
     d3a:	09 f0       	breq	.+2      	; 0xd3e <definePassword+0x192>
     d3c:	93 c0       	rjmp	.+294    	; 0xe64 <definePassword+0x2b8>
		{
			for (counter = 0; counter < 5; counter++)
     d3e:	10 92 77 00 	sts	0x0077, r1
     d42:	17 c0       	rjmp	.+46     	; 0xd72 <definePassword+0x1c6>
			{
				EEPROM_writeByte(0x0001 + counter, receivedPassword[counter]);
     d44:	80 91 77 00 	lds	r24, 0x0077
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	ac 01       	movw	r20, r24
     d50:	80 91 77 00 	lds	r24, 0x0077
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	fc 01       	movw	r30, r24
     d5a:	e8 59       	subi	r30, 0x98	; 152
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	20 81       	ld	r18, Z
     d60:	ca 01       	movw	r24, r20
     d62:	62 2f       	mov	r22, r18
     d64:	0e 94 8f 0b 	call	0x171e	; 0x171e <EEPROM_writeByte>
			break;

		}
		if (counter == 4)
		{
			for (counter = 0; counter < 5; counter++)
     d68:	80 91 77 00 	lds	r24, 0x0077
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 77 00 	sts	0x0077, r24
     d72:	80 91 77 00 	lds	r24, 0x0077
     d76:	85 30       	cpi	r24, 0x05	; 5
     d78:	28 f3       	brcs	.-54     	; 0xd44 <definePassword+0x198>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a0 e2       	ldi	r26, 0x20	; 32
     d80:	b1 e4       	ldi	r27, 0x41	; 65
     d82:	8b 87       	std	Y+11, r24	; 0x0b
     d84:	9c 87       	std	Y+12, r25	; 0x0c
     d86:	ad 87       	std	Y+13, r26	; 0x0d
     d88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d90:	9e 85       	ldd	r25, Y+14	; 0x0e
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4a ef       	ldi	r20, 0xFA	; 250
     d98:	54 e4       	ldi	r21, 0x44	; 68
     d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8f 83       	std	Y+7, r24	; 0x07
     da4:	98 87       	std	Y+8, r25	; 0x08
     da6:	a9 87       	std	Y+9, r26	; 0x09
     da8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e8       	ldi	r20, 0x80	; 128
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dbe:	88 23       	and	r24, r24
     dc0:	2c f4       	brge	.+10     	; 0xdcc <definePassword+0x220>
		__ticks = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9e 83       	std	Y+6, r25	; 0x06
     dc8:	8d 83       	std	Y+5, r24	; 0x05
     dca:	3f c0       	rjmp	.+126    	; 0xe4a <definePassword+0x29e>
	else if (__tmp > 65535)
     dcc:	6f 81       	ldd	r22, Y+7	; 0x07
     dce:	78 85       	ldd	r23, Y+8	; 0x08
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	3f ef       	ldi	r19, 0xFF	; 255
     dd8:	4f e7       	ldi	r20, 0x7F	; 127
     dda:	57 e4       	ldi	r21, 0x47	; 71
     ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de0:	18 16       	cp	r1, r24
     de2:	4c f5       	brge	.+82     	; 0xe36 <definePassword+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de4:	6b 85       	ldd	r22, Y+11	; 0x0b
     de6:	7c 85       	ldd	r23, Y+12	; 0x0c
     de8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dea:	9e 85       	ldd	r25, Y+14	; 0x0e
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e2       	ldi	r20, 0x20	; 32
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <definePassword+0x280>
     e0e:	88 ec       	ldi	r24, 0xC8	; 200
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <definePassword+0x26e>
     e1e:	9c 83       	std	Y+4, r25	; 0x04
     e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	9e 81       	ldd	r25, Y+6	; 0x06
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	69 f7       	brne	.-38     	; 0xe0e <definePassword+0x262>
     e34:	14 c0       	rjmp	.+40     	; 0xe5e <definePassword+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e36:	6f 81       	ldd	r22, Y+7	; 0x07
     e38:	78 85       	ldd	r23, Y+8	; 0x08
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <definePassword+0x2aa>
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
			{
				EEPROM_writeByte(0x0001 + counter, receivedPassword[counter]);
			}
			_delay_ms(10);
			USART_sendByte(0x02);
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
	for (counter = 0; counter < 5; counter++)
	{
		receivedPasswordReenter[counter] = USART_recieveByte();
	}
	/* Compare both received passwords */
	for (counter = 0; counter < 5; counter++)
     e64:	80 91 77 00 	lds	r24, 0x0077
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	80 93 77 00 	sts	0x0077, r24
     e6e:	80 91 77 00 	lds	r24, 0x0077
     e72:	85 30       	cpi	r24, 0x05	; 5
     e74:	08 f4       	brcc	.+2      	; 0xe78 <definePassword+0x2cc>
     e76:	d5 ce       	rjmp	.-598    	; 0xc22 <definePassword+0x76>
			}
			_delay_ms(10);
			USART_sendByte(0x02);
		}
	}
}
     e78:	6c 96       	adiw	r28, 0x1c	; 28
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	08 95       	ret

00000e8e <checkPassword>:
 * 		in EEPROM match.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void checkPassword(void)
{
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	2e 97       	sbiw	r28, 0x0e	; 14
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
     ea6:	10 92 77 00 	sts	0x0077, r1
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <checkPassword+0x3c>
	{
		receivedPassword[counter] = USART_recieveByte();
     eac:	80 91 77 00 	lds	r24, 0x0077
     eb0:	08 2f       	mov	r16, r24
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	0e 94 22 1a 	call	0x3444	; 0x3444 <USART_recieveByte>
     eb8:	f8 01       	movw	r30, r16
     eba:	e8 59       	subi	r30, 0x98	; 152
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 83       	st	Z, r24
 * [Return]	: Void.
 */
static void checkPassword(void)
{
	/* Receive password through USART */
	for (counter = 0; counter < 5; counter++)
     ec0:	80 91 77 00 	lds	r24, 0x0077
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	80 93 77 00 	sts	0x0077, r24
     eca:	80 91 77 00 	lds	r24, 0x0077
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	68 f3       	brcs	.-38     	; 0xeac <checkPassword+0x1e>
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Check if received password matches the password in EEPROM */
	for (counter = 0; counter < 5; counter++)
     ed2:	10 92 77 00 	sts	0x0077, r1
     ed6:	95 c0       	rjmp	.+298    	; 0x1002 <checkPassword+0x174>
	{
		/* If passwords matched or didn't, report status in either ways */
		if (receivedPassword[counter] != currentPassword[counter])
     ed8:	80 91 77 00 	lds	r24, 0x0077
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	fc 01       	movw	r30, r24
     ee2:	e8 59       	subi	r30, 0x98	; 152
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	20 81       	ld	r18, Z
     ee8:	80 91 77 00 	lds	r24, 0x0077
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	fc 01       	movw	r30, r24
     ef2:	ee 58       	subi	r30, 0x8E	; 142
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	80 81       	ld	r24, Z
     ef8:	28 17       	cp	r18, r24
     efa:	09 f4       	brne	.+2      	; 0xefe <checkPassword+0x70>
     efc:	76 c0       	rjmp	.+236    	; 0xfea <checkPassword+0x15c>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a0 e2       	ldi	r26, 0x20	; 32
     f04:	b1 e4       	ldi	r27, 0x41	; 65
     f06:	8b 87       	std	Y+11, r24	; 0x0b
     f08:	9c 87       	std	Y+12, r25	; 0x0c
     f0a:	ad 87       	std	Y+13, r26	; 0x0d
     f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f10:	7c 85       	ldd	r23, Y+12	; 0x0c
     f12:	8d 85       	ldd	r24, Y+13	; 0x0d
     f14:	9e 85       	ldd	r25, Y+14	; 0x0e
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	4a ef       	ldi	r20, 0xFA	; 250
     f1c:	54 e4       	ldi	r21, 0x44	; 68
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	8f 83       	std	Y+7, r24	; 0x07
     f28:	98 87       	std	Y+8, r25	; 0x08
     f2a:	a9 87       	std	Y+9, r26	; 0x09
     f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f2e:	6f 81       	ldd	r22, Y+7	; 0x07
     f30:	78 85       	ldd	r23, Y+8	; 0x08
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e8       	ldi	r20, 0x80	; 128
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f42:	88 23       	and	r24, r24
     f44:	2c f4       	brge	.+10     	; 0xf50 <checkPassword+0xc2>
		__ticks = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	3f c0       	rjmp	.+126    	; 0xfce <checkPassword+0x140>
	else if (__tmp > 65535)
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	4f e7       	ldi	r20, 0x7F	; 127
     f5e:	57 e4       	ldi	r21, 0x47	; 71
     f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f64:	18 16       	cp	r1, r24
     f66:	4c f5       	brge	.+82     	; 0xfba <checkPassword+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <checkPassword+0x122>
     f92:	88 ec       	ldi	r24, 0xC8	; 200
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <checkPassword+0x110>
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	69 f7       	brne	.-38     	; 0xf92 <checkPassword+0x104>
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <checkPassword+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fba:	6f 81       	ldd	r22, Y+7	; 0x07
     fbc:	78 85       	ldd	r23, Y+8	; 0x08
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <checkPassword+0x14c>
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(10);
			USART_sendByte(0x00);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
     fe8:	11 c0       	rjmp	.+34     	; 0x100c <checkPassword+0x17e>
			break;
		}
		if (counter == 4)
     fea:	80 91 77 00 	lds	r24, 0x0077
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	19 f4       	brne	.+6      	; 0xff8 <checkPassword+0x16a>
		{
			USART_sendByte(0x03);
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
	for (counter = 0; counter < 5; counter++)
	{
		receivedPassword[counter] = USART_recieveByte();
	}
	/* Check if received password matches the password in EEPROM */
	for (counter = 0; counter < 5; counter++)
     ff8:	80 91 77 00 	lds	r24, 0x0077
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	80 93 77 00 	sts	0x0077, r24
    1002:	80 91 77 00 	lds	r24, 0x0077
    1006:	85 30       	cpi	r24, 0x05	; 5
    1008:	08 f4       	brcc	.+2      	; 0x100c <checkPassword+0x17e>
    100a:	66 cf       	rjmp	.-308    	; 0xed8 <checkPassword+0x4a>
		if (counter == 4)
		{
			USART_sendByte(0x03);
		}
	}
}
    100c:	2e 96       	adiw	r28, 0x0e	; 14
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	08 95       	ret

00001022 <doorUnlock>:
 * 		Function that executes door locking & unlocking mechanisms.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void doorUnlock(void)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	2e 97       	sbiw	r28, 0x0e	; 14
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
	/* Rotate the motor clock wise */
	DCMotor_Rotate(CLOCKWISE, 100);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	64 e6       	ldi	r22, 0x64	; 100
    103a:	0e 94 28 0b 	call	0x1650	; 0x1650 <DCMotor_Rotate>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e2       	ldi	r26, 0x20	; 32
    1044:	b1 e4       	ldi	r27, 0x41	; 65
    1046:	8b 87       	std	Y+11, r24	; 0x0b
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	ad 87       	std	Y+13, r26	; 0x0d
    104c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1050:	7c 85       	ldd	r23, Y+12	; 0x0c
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a ef       	ldi	r20, 0xFA	; 250
    105c:	54 e4       	ldi	r21, 0x44	; 68
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	8f 83       	std	Y+7, r24	; 0x07
    1068:	98 87       	std	Y+8, r25	; 0x08
    106a:	a9 87       	std	Y+9, r26	; 0x09
    106c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	2c f4       	brge	.+10     	; 0x1090 <doorUnlock+0x6e>
		__ticks = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	3f c0       	rjmp	.+126    	; 0x110e <doorUnlock+0xec>
	else if (__tmp > 65535)
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	4f e7       	ldi	r20, 0x7F	; 127
    109e:	57 e4       	ldi	r21, 0x47	; 71
    10a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a4:	18 16       	cp	r1, r24
    10a6:	4c f5       	brge	.+82     	; 0x10fa <doorUnlock+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <doorUnlock+0xce>
    10d2:	88 ec       	ldi	r24, 0xC8	; 200
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <doorUnlock+0xbc>
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <doorUnlock+0xb0>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <doorUnlock+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <doorUnlock+0xf8>
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	/* Tell HMI_ECU the states of the door*/
	USART_sendByte(0x04);
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
	/* Start counting for mechanism time */
	Timer1_start(TIMER01_PRESCALER_256, 0, 31259, 0);
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	4b e1       	ldi	r20, 0x1B	; 27
    1130:	5a e7       	ldi	r21, 0x7A	; 122
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	0e 94 2d 18 	call	0x305a	; 0x305a <Timer1_start>
}
    113a:	2e 96       	adiw	r28, 0x0e	; 14
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	e8 97       	sbiw	r28, 0x38	; 56
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG, 7); /* Enable global interrupt I-bit */
    1160:	af e5       	ldi	r26, 0x5F	; 95
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ef e5       	ldi	r30, 0x5F	; 95
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 68       	ori	r24, 0x80	; 128
    116c:	8c 93       	st	X, r24
	uint8 USARTCommand = 0x00; /* A variable to store incoming USART commands */
    116e:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 passwordState = 0; /* A variable that saves password in EEPROM state */
    1170:	1b a6       	std	Y+43, r1	; 0x2b
	/* Create an instance of timer0 initialization structure */
	Timer_initConfig Timer_config = { TIMER8BIT_FAST_PWM, CLEAR_OC,
	LOGIC_LOW };
    1172:	1d a6       	std	Y+45, r1	; 0x2d
    1174:	8d a5       	ldd	r24, Y+45	; 0x2d
    1176:	80 7f       	andi	r24, 0xF0	; 240
    1178:	83 60       	ori	r24, 0x03	; 3
    117a:	8d a7       	std	Y+45, r24	; 0x2d
    117c:	8d a5       	ldd	r24, Y+45	; 0x2d
    117e:	8f 7c       	andi	r24, 0xCF	; 207
    1180:	80 62       	ori	r24, 0x20	; 32
    1182:	8d a7       	std	Y+45, r24	; 0x2d
	/* Initialize timer0 for PWM signal to control motor speed */
	Timer0_init(&Timer_config);
    1184:	ce 01       	movw	r24, r28
    1186:	8d 96       	adiw	r24, 0x2d	; 45
    1188:	0e 94 7f 11 	call	0x22fe	; 0x22fe <Timer0_init>
	/* Create an instance of timer1 initialization structure */
	Timer_initConfig timerConfig =
			{ TIMER16BIT_CTC_OCR1A, NORMAL_OC, LOGIC_HIGH };
    118c:	1e a6       	std	Y+46, r1	; 0x2e
    118e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1190:	80 7f       	andi	r24, 0xF0	; 240
    1192:	84 60       	ori	r24, 0x04	; 4
    1194:	8e a7       	std	Y+46, r24	; 0x2e
    1196:	8e a5       	ldd	r24, Y+46	; 0x2e
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8e a7       	std	Y+46, r24	; 0x2e
	/* Initialize timer1 for compare mode to control DC motor mechanisms */
	Timer1_init(&timerConfig);
    119c:	ce 01       	movw	r24, r28
    119e:	8e 96       	adiw	r24, 0x2e	; 46
    11a0:	0e 94 9c 13 	call	0x2738	; 0x2738 <Timer1_init>
	/* Set call-back function for timer1 */
	Timer1_setCallBack(timerSeconds);
    11a4:	83 ea       	ldi	r24, 0xA3	; 163
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	0e 94 09 18 	call	0x3012	; 0x3012 <Timer1_setCallBack>
	/* Initialize buzzer */
	Buzzer_init();
    11ac:	0e 94 df 0a 	call	0x15be	; 0x15be <Buzzer_init>
	/* Turn off buzzer initially */
	Buzzer_off();
    11b0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Buzzer_off>
	/* Initialize DC motor */
	DCMotor_init();
    11b4:	0e 94 08 0b 	call	0x1610	; 0x1610 <DCMotor_init>
	/* Create an instance of I2C initialization structure */
	I2C_initConfig I2CConfig = { 2, 2, I2C_PRESCALER_1, LOGIC_LOW, LOGIC_LOW };
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	fe 01       	movw	r30, r28
    11bc:	bf 96       	adiw	r30, 0x2f	; 47
    11be:	df 01       	movw	r26, r30
    11c0:	28 2f       	mov	r18, r24
    11c2:	1d 92       	st	X+, r1
    11c4:	2a 95       	dec	r18
    11c6:	e9 f7       	brne	.-6      	; 0x11c2 <main+0x76>
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	8f a7       	std	Y+47, r24	; 0x2f
    11cc:	88 a9       	ldd	r24, Y+48	; 0x30
    11ce:	80 78       	andi	r24, 0x80	; 128
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	88 ab       	std	Y+48, r24	; 0x30
	/* Initialize I2C */
	I2C_init(&I2CConfig);
    11d4:	ce 01       	movw	r24, r28
    11d6:	8f 96       	adiw	r24, 0x2f	; 47
    11d8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <I2C_init>
	/* Create an instance of USART initialization structure */
	USART_initConfig USARTConfig = { 9600, USART_DATA_8BIT, PARITY_EVEN,
	LOGIC_LOW };
    11dc:	85 e0       	ldi	r24, 0x05	; 5
    11de:	fe 01       	movw	r30, r28
    11e0:	f2 96       	adiw	r30, 0x32	; 50
    11e2:	df 01       	movw	r26, r30
    11e4:	28 2f       	mov	r18, r24
    11e6:	1d 92       	st	X+, r1
    11e8:	2a 95       	dec	r18
    11ea:	e9 f7       	brne	.-6      	; 0x11e6 <main+0x9a>
    11ec:	80 e8       	ldi	r24, 0x80	; 128
    11ee:	95 e2       	ldi	r25, 0x25	; 37
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	8a ab       	std	Y+50, r24	; 0x32
    11f6:	9b ab       	std	Y+51, r25	; 0x33
    11f8:	ac ab       	std	Y+52, r26	; 0x34
    11fa:	bd ab       	std	Y+53, r27	; 0x35
    11fc:	8e a9       	ldd	r24, Y+54	; 0x36
    11fe:	88 7f       	andi	r24, 0xF8	; 248
    1200:	83 60       	ori	r24, 0x03	; 3
    1202:	8e ab       	std	Y+54, r24	; 0x36
    1204:	8e a9       	ldd	r24, Y+54	; 0x36
    1206:	87 7e       	andi	r24, 0xE7	; 231
    1208:	80 61       	ori	r24, 0x10	; 16
    120a:	8e ab       	std	Y+54, r24	; 0x36
	/* Initialize USART */
	USART_init(&USARTConfig);
    120c:	ce 01       	movw	r24, r28
    120e:	c2 96       	adiw	r24, 0x32	; 50
    1210:	0e 94 33 19 	call	0x3266	; 0x3266 <USART_init>
	/* Read saved password in EEPROM and copy it to current password array */
	for (counter = 0; counter < 5; counter++)
    1214:	10 92 77 00 	sts	0x0077, r1
    1218:	88 c0       	rjmp	.+272    	; 0x132a <main+0x1de>
	{
		EEPROM_readByte(0x0001 + counter, &currentPassword[counter]);
    121a:	80 91 77 00 	lds	r24, 0x0077
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	ac 01       	movw	r20, r24
    1226:	80 91 77 00 	lds	r24, 0x0077
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9c 01       	movw	r18, r24
    1230:	2e 58       	subi	r18, 0x8E	; 142
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	ca 01       	movw	r24, r20
    1236:	b9 01       	movw	r22, r18
    1238:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <EEPROM_readByte>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e2       	ldi	r26, 0x20	; 32
    1242:	b1 e4       	ldi	r27, 0x41	; 65
    1244:	8f a3       	std	Y+39, r24	; 0x27
    1246:	98 a7       	std	Y+40, r25	; 0x28
    1248:	a9 a7       	std	Y+41, r26	; 0x29
    124a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124c:	6f a1       	ldd	r22, Y+39	; 0x27
    124e:	78 a5       	ldd	r23, Y+40	; 0x28
    1250:	89 a5       	ldd	r24, Y+41	; 0x29
    1252:	9a a5       	ldd	r25, Y+42	; 0x2a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	4a ef       	ldi	r20, 0xFA	; 250
    125a:	54 e4       	ldi	r21, 0x44	; 68
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8b a3       	std	Y+35, r24	; 0x23
    1266:	9c a3       	std	Y+36, r25	; 0x24
    1268:	ad a3       	std	Y+37, r26	; 0x25
    126a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    126c:	6b a1       	ldd	r22, Y+35	; 0x23
    126e:	7c a1       	ldd	r23, Y+36	; 0x24
    1270:	8d a1       	ldd	r24, Y+37	; 0x25
    1272:	9e a1       	ldd	r25, Y+38	; 0x26
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	2c f4       	brge	.+10     	; 0x128e <main+0x142>
		__ticks = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9a a3       	std	Y+34, r25	; 0x22
    128a:	89 a3       	std	Y+33, r24	; 0x21
    128c:	3f c0       	rjmp	.+126    	; 0x130c <main+0x1c0>
	else if (__tmp > 65535)
    128e:	6b a1       	ldd	r22, Y+35	; 0x23
    1290:	7c a1       	ldd	r23, Y+36	; 0x24
    1292:	8d a1       	ldd	r24, Y+37	; 0x25
    1294:	9e a1       	ldd	r25, Y+38	; 0x26
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	4f e7       	ldi	r20, 0x7F	; 127
    129c:	57 e4       	ldi	r21, 0x47	; 71
    129e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	4c f5       	brge	.+82     	; 0x12f8 <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a6:	6f a1       	ldd	r22, Y+39	; 0x27
    12a8:	78 a5       	ldd	r23, Y+40	; 0x28
    12aa:	89 a5       	ldd	r24, Y+41	; 0x29
    12ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	51 e4       	ldi	r21, 0x41	; 65
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <main+0x1a2>
    12d0:	88 ec       	ldi	r24, 0xC8	; 200
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	98 a3       	std	Y+32, r25	; 0x20
    12d6:	8f 8f       	std	Y+31, r24	; 0x1f
    12d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12da:	98 a1       	ldd	r25, Y+32	; 0x20
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <main+0x190>
    12e0:	98 a3       	std	Y+32, r25	; 0x20
    12e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e4:	89 a1       	ldd	r24, Y+33	; 0x21
    12e6:	9a a1       	ldd	r25, Y+34	; 0x22
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	9a a3       	std	Y+34, r25	; 0x22
    12ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ee:	89 a1       	ldd	r24, Y+33	; 0x21
    12f0:	9a a1       	ldd	r25, Y+34	; 0x22
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	69 f7       	brne	.-38     	; 0x12d0 <main+0x184>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f8:	6b a1       	ldd	r22, Y+35	; 0x23
    12fa:	7c a1       	ldd	r23, Y+36	; 0x24
    12fc:	8d a1       	ldd	r24, Y+37	; 0x25
    12fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9a a3       	std	Y+34, r25	; 0x22
    130a:	89 a3       	std	Y+33, r24	; 0x21
    130c:	89 a1       	ldd	r24, Y+33	; 0x21
    130e:	9a a1       	ldd	r25, Y+34	; 0x22
    1310:	9e 8f       	std	Y+30, r25	; 0x1e
    1312:	8d 8f       	std	Y+29, r24	; 0x1d
    1314:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1316:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <main+0x1cc>
    131c:	9e 8f       	std	Y+30, r25	; 0x1e
    131e:	8d 8f       	std	Y+29, r24	; 0x1d
	USART_initConfig USARTConfig = { 9600, USART_DATA_8BIT, PARITY_EVEN,
	LOGIC_LOW };
	/* Initialize USART */
	USART_init(&USARTConfig);
	/* Read saved password in EEPROM and copy it to current password array */
	for (counter = 0; counter < 5; counter++)
    1320:	80 91 77 00 	lds	r24, 0x0077
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 77 00 	sts	0x0077, r24
    132a:	80 91 77 00 	lds	r24, 0x0077
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	08 f4       	brcc	.+2      	; 0x1334 <main+0x1e8>
    1332:	73 cf       	rjmp	.-282    	; 0x121a <main+0xce>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	aa e7       	ldi	r26, 0x7A	; 122
    133a:	b4 e4       	ldi	r27, 0x44	; 68
    133c:	89 8f       	std	Y+25, r24	; 0x19
    133e:	9a 8f       	std	Y+26, r25	; 0x1a
    1340:	ab 8f       	std	Y+27, r26	; 0x1b
    1342:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1344:	69 8d       	ldd	r22, Y+25	; 0x19
    1346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a ef       	ldi	r20, 0xFA	; 250
    1352:	54 e4       	ldi	r21, 0x44	; 68
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8d 8b       	std	Y+21, r24	; 0x15
    135e:	9e 8b       	std	Y+22, r25	; 0x16
    1360:	af 8b       	std	Y+23, r26	; 0x17
    1362:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1364:	6d 89       	ldd	r22, Y+21	; 0x15
    1366:	7e 89       	ldd	r23, Y+22	; 0x16
    1368:	8f 89       	ldd	r24, Y+23	; 0x17
    136a:	98 8d       	ldd	r25, Y+24	; 0x18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	2c f4       	brge	.+10     	; 0x1386 <main+0x23a>
		__ticks = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 8b       	std	Y+20, r25	; 0x14
    1382:	8b 8b       	std	Y+19, r24	; 0x13
    1384:	3f c0       	rjmp	.+126    	; 0x1404 <main+0x2b8>
	else if (__tmp > 65535)
    1386:	6d 89       	ldd	r22, Y+21	; 0x15
    1388:	7e 89       	ldd	r23, Y+22	; 0x16
    138a:	8f 89       	ldd	r24, Y+23	; 0x17
    138c:	98 8d       	ldd	r25, Y+24	; 0x18
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	57 e4       	ldi	r21, 0x47	; 71
    1396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139a:	18 16       	cp	r1, r24
    139c:	4c f5       	brge	.+82     	; 0x13f0 <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139e:	69 8d       	ldd	r22, Y+25	; 0x19
    13a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <main+0x29a>
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9a 8b       	std	Y+18, r25	; 0x12
    13ce:	89 8b       	std	Y+17, r24	; 0x11
    13d0:	89 89       	ldd	r24, Y+17	; 0x11
    13d2:	9a 89       	ldd	r25, Y+18	; 0x12
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <main+0x288>
    13d8:	9a 8b       	std	Y+18, r25	; 0x12
    13da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	8b 89       	ldd	r24, Y+19	; 0x13
    13de:	9c 89       	ldd	r25, Y+20	; 0x14
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	9c 8b       	std	Y+20, r25	; 0x14
    13e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	8b 89       	ldd	r24, Y+19	; 0x13
    13e8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f7       	brne	.-38     	; 0x13c8 <main+0x27c>
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <main+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	6d 89       	ldd	r22, Y+21	; 0x15
    13f2:	7e 89       	ldd	r23, Y+22	; 0x16
    13f4:	8f 89       	ldd	r24, Y+23	; 0x17
    13f6:	98 8d       	ldd	r25, Y+24	; 0x18
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9c 8b       	std	Y+20, r25	; 0x14
    1402:	8b 8b       	std	Y+19, r24	; 0x13
    1404:	8b 89       	ldd	r24, Y+19	; 0x13
    1406:	9c 89       	ldd	r25, Y+20	; 0x14
    1408:	98 8b       	std	Y+16, r25	; 0x10
    140a:	8f 87       	std	Y+15, r24	; 0x0f
    140c:	8f 85       	ldd	r24, Y+15	; 0x0f
    140e:	98 89       	ldd	r25, Y+16	; 0x10
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <main+0x2c4>
    1414:	98 8b       	std	Y+16, r25	; 0x10
    1416:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
	}
	/* Wait for (1) second */
	_delay_ms(1000);
	/* Loop on the current password array */
	for (counter = 0; counter < 5; counter++)
    1418:	10 92 77 00 	sts	0x0077, r1
    141c:	1c c0       	rjmp	.+56     	; 0x1456 <main+0x30a>
	{
		/* If password was found in EEPROM */
		if (currentPassword[counter] != 0)
    141e:	80 91 77 00 	lds	r24, 0x0077
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	fc 01       	movw	r30, r24
    1428:	ee 58       	subi	r30, 0x8E	; 142
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	31 f0       	breq	.+12     	; 0x143e <main+0x2f2>
		{
			/* Set password state to (1) */
			passwordState = 1;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	8b a7       	std	Y+43, r24	; 0x2b
			/* Tell HMI_ECU that password was found */
			USART_sendByte(0xFF);
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
    143c:	10 c0       	rjmp	.+32     	; 0x145e <main+0x312>
			break;
		}
		/* If password was not found */
		if (counter == 4)
    143e:	80 91 77 00 	lds	r24, 0x0077
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	19 f4       	brne	.+6      	; 0x144c <main+0x300>
		{
			/* Tell HMI_ECU that password was not found */
			USART_sendByte(0x00);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
		_delay_ms(10);
	}
	/* Wait for (1) second */
	_delay_ms(1000);
	/* Loop on the current password array */
	for (counter = 0; counter < 5; counter++)
    144c:	80 91 77 00 	lds	r24, 0x0077
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 77 00 	sts	0x0077, r24
    1456:	80 91 77 00 	lds	r24, 0x0077
    145a:	85 30       	cpi	r24, 0x05	; 5
    145c:	00 f3       	brcs	.-64     	; 0x141e <main+0x2d2>
	}
	/* Execute program loop */
	while (TRUE)
	{
		/* Wait for a command for HMI_ECU */
		USARTCommand = USART_recieveByte();
    145e:	0e 94 22 1a 	call	0x3444	; 0x3444 <USART_recieveByte>
    1462:	8c a7       	std	Y+44, r24	; 0x2c
		/* Switch for incoming command */
		switch (USARTCommand)
    1464:	8c a5       	ldd	r24, Y+44	; 0x2c
    1466:	a8 2f       	mov	r26, r24
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	b8 af       	std	Y+56, r27	; 0x38
    146c:	af ab       	std	Y+55, r26	; 0x37
    146e:	2f a9       	ldd	r18, Y+55	; 0x37
    1470:	38 ad       	ldd	r19, Y+56	; 0x38
    1472:	23 30       	cpi	r18, 0x03	; 3
    1474:	31 05       	cpc	r19, r1
    1476:	c9 f0       	breq	.+50     	; 0x14aa <main+0x35e>
    1478:	8f a9       	ldd	r24, Y+55	; 0x37
    147a:	98 ad       	ldd	r25, Y+56	; 0x38
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	91 05       	cpc	r25, r1
    1480:	34 f4       	brge	.+12     	; 0x148e <main+0x342>
    1482:	af a9       	ldd	r26, Y+55	; 0x37
    1484:	b8 ad       	ldd	r27, Y+56	; 0x38
    1486:	a2 30       	cpi	r26, 0x02	; 2
    1488:	b1 05       	cpc	r27, r1
    148a:	61 f0       	breq	.+24     	; 0x14a4 <main+0x358>
    148c:	e8 cf       	rjmp	.-48     	; 0x145e <main+0x312>
    148e:	2f a9       	ldd	r18, Y+55	; 0x37
    1490:	38 ad       	ldd	r19, Y+56	; 0x38
    1492:	24 30       	cpi	r18, 0x04	; 4
    1494:	31 05       	cpc	r19, r1
    1496:	61 f0       	breq	.+24     	; 0x14b0 <main+0x364>
    1498:	8f a9       	ldd	r24, Y+55	; 0x37
    149a:	98 ad       	ldd	r25, Y+56	; 0x38
    149c:	80 3f       	cpi	r24, 0xF0	; 240
    149e:	91 05       	cpc	r25, r1
    14a0:	51 f0       	breq	.+20     	; 0x14b6 <main+0x36a>
    14a2:	dd cf       	rjmp	.-70     	; 0x145e <main+0x312>
		{
			/* A case indicating a new password needs to be checked and saved */
			case 0x02:
				definePassword();
    14a4:	0e 94 d6 05 	call	0xbac	; 0xbac <definePassword>
    14a8:	da cf       	rjmp	.-76     	; 0x145e <main+0x312>
			break;
				/* A case indicating an already stored password needs to be checked */
			case 0x03:
				checkPassword();
    14aa:	0e 94 47 07 	call	0xe8e	; 0xe8e <checkPassword>
    14ae:	d7 cf       	rjmp	.-82     	; 0x145e <main+0x312>
			break;
				/* A case indicating a successful password entry */
			case 0x04:
				doorUnlock();
    14b0:	0e 94 11 08 	call	0x1022	; 0x1022 <doorUnlock>
    14b4:	d4 cf       	rjmp	.-88     	; 0x145e <main+0x312>
			break;
				/* A case indicating an error due to many wrong password entries */
			case 0xF0:
				/* Turn on buzzer */
				Buzzer_on();
    14b6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Buzzer_on>
				/* Wait for (60) seconds*/
				for (counter = 0; counter < 5; counter++)
    14ba:	10 92 77 00 	sts	0x0077, r1
    14be:	77 c0       	rjmp	.+238    	; 0x15ae <main+0x462>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e4       	ldi	r25, 0x40	; 64
    14c4:	ac e1       	ldi	r26, 0x1C	; 28
    14c6:	b6 e4       	ldi	r27, 0x46	; 70
    14c8:	8b 87       	std	Y+11, r24	; 0x0b
    14ca:	9c 87       	std	Y+12, r25	; 0x0c
    14cc:	ad 87       	std	Y+13, r26	; 0x0d
    14ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a ef       	ldi	r20, 0xFA	; 250
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8f 83       	std	Y+7, r24	; 0x07
    14ea:	98 87       	std	Y+8, r25	; 0x08
    14ec:	a9 87       	std	Y+9, r26	; 0x09
    14ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f0:	6f 81       	ldd	r22, Y+7	; 0x07
    14f2:	78 85       	ldd	r23, Y+8	; 0x08
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <main+0x3c6>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	8d 83       	std	Y+5, r24	; 0x05
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <main+0x444>
	else if (__tmp > 65535)
    1512:	6f 81       	ldd	r22, Y+7	; 0x07
    1514:	78 85       	ldd	r23, Y+8	; 0x08
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3f ef       	ldi	r19, 0xFF	; 255
    151e:	4f e7       	ldi	r20, 0x7F	; 127
    1520:	57 e4       	ldi	r21, 0x47	; 71
    1522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	6b 85       	ldd	r22, Y+11	; 0x0b
    152c:	7c 85       	ldd	r23, Y+12	; 0x0c
    152e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1530:	9e 85       	ldd	r25, Y+14	; 0x0e
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <main+0x426>
    1554:	88 ec       	ldi	r24, 0xC8	; 200
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9c 83       	std	Y+4, r25	; 0x04
    155a:	8b 83       	std	Y+3, r24	; 0x03
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <main+0x414>
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f7       	brne	.-38     	; 0x1554 <main+0x408>
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <main+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	6f 81       	ldd	r22, Y+7	; 0x07
    157e:	78 85       	ldd	r23, Y+8	; 0x08
    1580:	89 85       	ldd	r24, Y+9	; 0x09
    1582:	9a 85       	ldd	r25, Y+10	; 0x0a
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <main+0x450>
    15a0:	9a 83       	std	Y+2, r25	; 0x02
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	80 91 77 00 	lds	r24, 0x0077
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	80 93 77 00 	sts	0x0077, r24
    15ae:	80 91 77 00 	lds	r24, 0x0077
    15b2:	85 30       	cpi	r24, 0x05	; 5
    15b4:	08 f4       	brcc	.+2      	; 0x15b8 <main+0x46c>
    15b6:	84 cf       	rjmp	.-248    	; 0x14c0 <main+0x374>
				{
					_delay_ms(10000);
				}
				/* Turn off buzzer */
				Buzzer_off();
    15b8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Buzzer_off>
    15bc:	50 cf       	rjmp	.-352    	; 0x145e <main+0x312>

000015be <Buzzer_init>:
 * 		Function that initializes buzzer pin.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Buzzer_init(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62

#if (BUZZER_PIN_OUTPUT == TRUE)

	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_INPUT);

#endif

	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Buzzer_on>:
 * 		Function that turns buzzer on.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Buzzer_on(void)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <Buzzer_off>:
 * 		Function that turns buzzer off.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Buzzer_off(void)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
}
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <DCMotor_init>:
 * 		Function that initialize DC motor pins.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void DCMotor_init(void)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
	/* Configure bridge enable pin as output pin */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_ENABLE, PIN_OUTPUT);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	63 e0       	ldi	r22, 0x03	; 3
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
	/* Configure bridge direction pins as output pin */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN1, PIN_OUTPUT);
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN2, PIN_OUTPUT);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	62 e0       	ldi	r22, 0x02	; 2
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
	/* Stop the motor initially */
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	62 e0       	ldi	r22, 0x02	; 2
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <DCMotor_Rotate>:
 * [In] rotation	: Indicates rotation direction of the motor.
 * [In] speed		: Indicates speed percentage of the motor.
 * [Return]		: Void.
 */
void DCMotor_Rotate(ROTATION_STATE rotation, uint8 speed)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <DCMotor_Rotate+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DCMotor_Rotate+0x8>
    1658:	0f 92       	push	r0
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	6b 83       	std	Y+3, r22	; 0x03
	uint8 dutyCycle = 0;	/* Initialize duty-cycle value */
    1662:	19 82       	std	Y+1, r1	; 0x01
	/* Convert recieved percentage into duty-cycle value */
	dutyCycle = (uint8) ((uint16) (speed * 250) / 100) + 5;
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8a ef       	ldi	r24, 0xFA	; 250
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	ac 01       	movw	r20, r24
    1670:	24 9f       	mul	r18, r20
    1672:	c0 01       	movw	r24, r0
    1674:	25 9f       	mul	r18, r21
    1676:	90 0d       	add	r25, r0
    1678:	34 9f       	mul	r19, r20
    167a:	90 0d       	add	r25, r0
    167c:	11 24       	eor	r1, r1
    167e:	24 e6       	ldi	r18, 0x64	; 100
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	b9 01       	movw	r22, r18
    1684:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodhi4>
    1688:	cb 01       	movw	r24, r22
    168a:	8b 5f       	subi	r24, 0xFB	; 251
    168c:	89 83       	std	Y+1, r24	; 0x01
	/* Control the motor as required */
	switch (rotation)
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	3d 83       	std	Y+5, r19	; 0x05
    1696:	2c 83       	std	Y+4, r18	; 0x04
    1698:	4c 81       	ldd	r20, Y+4	; 0x04
    169a:	5d 81       	ldd	r21, Y+5	; 0x05
    169c:	41 30       	cpi	r20, 0x01	; 1
    169e:	51 05       	cpc	r21, r1
    16a0:	b9 f0       	breq	.+46     	; 0x16d0 <DCMotor_Rotate+0x80>
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	91 05       	cpc	r25, r1
    16aa:	11 f1       	breq	.+68     	; 0x16f0 <DCMotor_Rotate+0xa0>
    16ac:	2c 81       	ldd	r18, Y+4	; 0x04
    16ae:	3d 81       	ldd	r19, Y+5	; 0x05
    16b0:	21 15       	cp	r18, r1
    16b2:	31 05       	cpc	r19, r1
    16b4:	61 f5       	brne	.+88     	; 0x170e <DCMotor_Rotate+0xbe>
	{
		case STOP:
			Timer0_stop(); /* Stop PWM speed control */
    16b6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <Timer0_stop>
			/* Stop motor rotation */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
    16ce:	1f c0       	rjmp	.+62     	; 0x170e <DCMotor_Rotate+0xbe>
			return;
		case CLOCKWISE:
			Timer0_start(TIMER01_PRESCALER_8, 5, dutyCycle); /* Start timer & generate PWM */
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	65 e0       	ldi	r22, 0x05	; 5
    16d4:	49 81       	ldd	r20, Y+1	; 0x01
    16d6:	0e 94 30 13 	call	0x2660	; 0x2660 <Timer0_start>
			/* Rotate motor clock-wise direction */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_HIGH);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <DCMotor_Rotate+0xbe>
			return;
		case COUNTER_CLOCKWISE:
			Timer0_start(TIMER01_PRESCALER_8, 5, dutyCycle); /* Start timer & generate PWM */
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	65 e0       	ldi	r22, 0x05	; 5
    16f4:	49 81       	ldd	r20, Y+1	; 0x01
    16f6:	0e 94 30 13 	call	0x2660	; 0x2660 <Timer0_start>
			/* Rotate motor counter clock-wise direction */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_HIGH);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <GPIO_writePin>
			return;
	}
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <EEPROM_writeByte>:
 * [In] u16address			: Indicates EEPROM memory location address.
 * [In] u8data				: Indicates data that is sent.
 * [Return]					: Success or failure state.
 */
uint8 EEPROM_writeByte(uint16 u16address, uint8 u8data)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <EEPROM_writeByte+0x6>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <EEPROM_writeByte+0x8>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit */
	I2C_start();
    1730:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <I2C_start>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_START)
    1734:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    1738:	88 30       	cpi	r24, 0x08	; 8
    173a:	11 f0       	breq	.+4      	; 0x1740 <EEPROM_writeByte+0x22>
		return ERROR;
    173c:	1c 82       	std	Y+4, r1	; 0x04
    173e:	28 c0       	rjmp	.+80     	; 0x1790 <EEPROM_writeByte+0x72>
	/* Send the 3 MSBs of u16address in device address in addition
	 * to write bit & the rest of the data in word address */
	I2C_writeByte((uint8) (0xA0 | ((u16address & 0x0700) >> 7)));
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	80 70       	andi	r24, 0x00	; 0
    1746:	97 70       	andi	r25, 0x07	; 7
    1748:	88 0f       	add	r24, r24
    174a:	89 2f       	mov	r24, r25
    174c:	88 1f       	adc	r24, r24
    174e:	99 0b       	sbc	r25, r25
    1750:	91 95       	neg	r25
    1752:	80 6a       	ori	r24, 0xA0	; 160
    1754:	0e 94 24 10 	call	0x2048	; 0x2048 <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    1758:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    175c:	88 31       	cpi	r24, 0x18	; 24
    175e:	11 f0       	breq	.+4      	; 0x1764 <EEPROM_writeByte+0x46>
		return ERROR;
    1760:	1c 82       	std	Y+4, r1	; 0x04
    1762:	16 c0       	rjmp	.+44     	; 0x1790 <EEPROM_writeByte+0x72>
	/* Send memory location address */
	I2C_writeByte((uint8) (u16address & 0xFF));
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	0e 94 24 10 	call	0x2048	; 0x2048 <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_DATA_ACK)
    176a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    176e:	88 32       	cpi	r24, 0x28	; 40
    1770:	11 f0       	breq	.+4      	; 0x1776 <EEPROM_writeByte+0x58>
		return ERROR;
    1772:	1c 82       	std	Y+4, r1	; 0x04
    1774:	0d c0       	rjmp	.+26     	; 0x1790 <EEPROM_writeByte+0x72>
	/* Write the byte to EEPROM */
	I2C_writeByte(u8data);
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	0e 94 24 10 	call	0x2048	; 0x2048 <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_DATA_ACK)
    177c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    1780:	88 32       	cpi	r24, 0x28	; 40
    1782:	11 f0       	breq	.+4      	; 0x1788 <EEPROM_writeByte+0x6a>
		return ERROR;
    1784:	1c 82       	std	Y+4, r1	; 0x04
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <EEPROM_writeByte+0x72>
	/* Send stop bit */
	I2C_stop();
    1788:	0e 94 0f 10 	call	0x201e	; 0x201e <I2C_stop>
	/* Generate a success if operation succeeded */
	return SUCCESS;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	8c 83       	std	Y+4, r24	; 0x04
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <EEPROM_readByte>:
 * [In] u16address			: Indicates EEPROM memory location address.
 * [Out] u8data				: Indicates data that is received.
 * [Return]					: Success or failure state.
 */
uint8 EEPROM_readByte(uint16 u16address, uint8 *u8data)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <EEPROM_readByte+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <EEPROM_readByte+0x8>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	7c 83       	std	Y+4, r23	; 0x04
    17b4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit */
	I2C_start();
    17b6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <I2C_start>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_START)
    17ba:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    17be:	88 30       	cpi	r24, 0x08	; 8
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <EEPROM_readByte+0x26>
		return ERROR;
    17c2:	1d 82       	std	Y+5, r1	; 0x05
    17c4:	44 c0       	rjmp	.+136    	; 0x184e <EEPROM_readByte+0xae>
	/* Send the 3 MSBs of u16address in device address in addition
	 * to write bit & the rest of the data in word address */
	I2C_writeByte((uint8) ((0xA0) | ((u16address & 0x0700) >> 7)));
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ca:	80 70       	andi	r24, 0x00	; 0
    17cc:	97 70       	andi	r25, 0x07	; 7
    17ce:	88 0f       	add	r24, r24
    17d0:	89 2f       	mov	r24, r25
    17d2:	88 1f       	adc	r24, r24
    17d4:	99 0b       	sbc	r25, r25
    17d6:	91 95       	neg	r25
    17d8:	80 6a       	ori	r24, 0xA0	; 160
    17da:	0e 94 24 10 	call	0x2048	; 0x2048 <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    17de:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    17e2:	88 31       	cpi	r24, 0x18	; 24
    17e4:	11 f0       	breq	.+4      	; 0x17ea <EEPROM_readByte+0x4a>
		return ERROR;
    17e6:	1d 82       	std	Y+5, r1	; 0x05
    17e8:	32 c0       	rjmp	.+100    	; 0x184e <EEPROM_readByte+0xae>
	/* Send memory location address */
	I2C_writeByte((uint8) (u16address));
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	0e 94 24 10 	call	0x2048	; 0x2048 <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_DATA_ACK)
    17f0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    17f4:	88 32       	cpi	r24, 0x28	; 40
    17f6:	11 f0       	breq	.+4      	; 0x17fc <EEPROM_readByte+0x5c>
		return ERROR;
    17f8:	1d 82       	std	Y+5, r1	; 0x05
    17fa:	29 c0       	rjmp	.+82     	; 0x184e <EEPROM_readByte+0xae>
	/* Send repeated start bit */
	I2C_start();
    17fc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <I2C_start>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_REP_START)
    1800:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    1804:	80 31       	cpi	r24, 0x10	; 16
    1806:	11 f0       	breq	.+4      	; 0x180c <EEPROM_readByte+0x6c>
		return ERROR;
    1808:	1d 82       	std	Y+5, r1	; 0x05
    180a:	21 c0       	rjmp	.+66     	; 0x184e <EEPROM_readByte+0xae>
	/* Send the 3 MSBs of u16address in device address in addition
	 * to read bit & the rest of the data in word address */
	I2C_writeByte((uint8) ((0xA0) | ((u16address & 0x0700) >> 7) | 1));
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	80 70       	andi	r24, 0x00	; 0
    1812:	97 70       	andi	r25, 0x07	; 7
    1814:	88 0f       	add	r24, r24
    1816:	89 2f       	mov	r24, r25
    1818:	88 1f       	adc	r24, r24
    181a:	99 0b       	sbc	r25, r25
    181c:	91 95       	neg	r25
    181e:	81 6a       	ori	r24, 0xA1	; 161
    1820:	0e 94 24 10 	call	0x2048	; 0x2048 <I2C_writeByte>
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
    1824:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    1828:	80 34       	cpi	r24, 0x40	; 64
    182a:	11 f0       	breq	.+4      	; 0x1830 <EEPROM_readByte+0x90>
		return ERROR;
    182c:	1d 82       	std	Y+5, r1	; 0x05
    182e:	0f c0       	rjmp	.+30     	; 0x184e <EEPROM_readByte+0xae>
	/* Read the byte from memory without sending ACK */
	*u8data = I2C_readByteWithNACK();
    1830:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <I2C_readByteWithNACK>
    1834:	eb 81       	ldd	r30, Y+3	; 0x03
    1836:	fc 81       	ldd	r31, Y+4	; 0x04
    1838:	80 83       	st	Z, r24
	/* Generate an error if operation failed */
	if (I2C_getStatus() != I2C_MR_DATA_NACK)
    183a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <I2C_getStatus>
    183e:	88 35       	cpi	r24, 0x58	; 88
    1840:	11 f0       	breq	.+4      	; 0x1846 <EEPROM_readByte+0xa6>
		return ERROR;
    1842:	1d 82       	std	Y+5, r1	; 0x05
    1844:	04 c0       	rjmp	.+8      	; 0x184e <EEPROM_readByte+0xae>
	/* Send stop bit */
	I2C_stop();
    1846:	0e 94 0f 10 	call	0x201e	; 0x201e <I2C_stop>
	/* Generate a success if operation succeeded */
	return SUCCESS;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <GPIO_setupPinDirection+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <GPIO_setupPinDirection+0x8>
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	6a 83       	std	Y+2, r22	; 0x02
    1872:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	88 30       	cpi	r24, 0x08	; 8
    1878:	08 f0       	brcs	.+2      	; 0x187c <GPIO_setupPinDirection+0x1c>
    187a:	d5 c0       	rjmp	.+426    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	08 f0       	brcs	.+2      	; 0x1884 <GPIO_setupPinDirection+0x24>
    1882:	d1 c0       	rjmp	.+418    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3d 83       	std	Y+5, r19	; 0x05
    188c:	2c 83       	std	Y+4, r18	; 0x04
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	9d 81       	ldd	r25, Y+5	; 0x05
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <GPIO_setupPinDirection+0x3a>
    1898:	43 c0       	rjmp	.+134    	; 0x1920 <GPIO_setupPinDirection+0xc0>
    189a:	2c 81       	ldd	r18, Y+4	; 0x04
    189c:	3d 81       	ldd	r19, Y+5	; 0x05
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f4       	brge	.+10     	; 0x18ae <GPIO_setupPinDirection+0x4e>
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <GPIO_setupPinDirection+0x68>
    18ac:	bc c0       	rjmp	.+376    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
    18ae:	2c 81       	ldd	r18, Y+4	; 0x04
    18b0:	3d 81       	ldd	r19, Y+5	; 0x05
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <GPIO_setupPinDirection+0x5a>
    18b8:	5f c0       	rjmp	.+190    	; 0x1978 <GPIO_setupPinDirection+0x118>
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <GPIO_setupPinDirection+0x66>
    18c4:	85 c0       	rjmp	.+266    	; 0x19d0 <GPIO_setupPinDirection+0x170>
    18c6:	af c0       	rjmp	.+350    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	a1 f4       	brne	.+40     	; 0x18f6 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
    18ce:	aa e3       	ldi	r26, 0x3A	; 58
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ea e3       	ldi	r30, 0x3A	; 58
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_setupPinDirection+0x8c>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_setupPinDirection+0x88>
    18f0:	84 2b       	or	r24, r20
    18f2:	8c 93       	st	X, r24
    18f4:	98 c0       	rjmp	.+304    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
    18f6:	aa e3       	ldi	r26, 0x3A	; 58
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ea e3       	ldi	r30, 0x3A	; 58
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_setupPinDirection+0xb4>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_setupPinDirection+0xb0>
    1918:	80 95       	com	r24
    191a:	84 23       	and	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	83 c0       	rjmp	.+262    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	a1 f4       	brne	.+40     	; 0x194e <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
    1926:	a7 e3       	ldi	r26, 0x37	; 55
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e7 e3       	ldi	r30, 0x37	; 55
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPIO_setupPinDirection+0xe4>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <GPIO_setupPinDirection+0xe0>
    1948:	84 2b       	or	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	6c c0       	rjmp	.+216    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
    194e:	a7 e3       	ldi	r26, 0x37	; 55
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e7 e3       	ldi	r30, 0x37	; 55
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <GPIO_setupPinDirection+0x10c>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <GPIO_setupPinDirection+0x108>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	57 c0       	rjmp	.+174    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	a1 f4       	brne	.+40     	; 0x19a6 <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
    197e:	a4 e3       	ldi	r26, 0x34	; 52
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e4 e3       	ldi	r30, 0x34	; 52
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_setupPinDirection+0x13c>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_setupPinDirection+0x138>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	40 c0       	rjmp	.+128    	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
    19a6:	a4 e3       	ldi	r26, 0x34	; 52
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e4 e3       	ldi	r30, 0x34	; 52
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <GPIO_setupPinDirection+0x164>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <GPIO_setupPinDirection+0x160>
    19c8:	80 95       	com	r24
    19ca:	84 23       	and	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	2b c0       	rjmp	.+86     	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	a1 f4       	brne	.+40     	; 0x19fe <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
    19d6:	a1 e3       	ldi	r26, 0x31	; 49
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e1 e3       	ldi	r30, 0x31	; 49
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_setupPinDirection+0x194>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_setupPinDirection+0x190>
    19f8:	84 2b       	or	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
    19fe:	a1 e3       	ldi	r26, 0x31	; 49
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e1 e3       	ldi	r30, 0x31	; 49
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <GPIO_setupPinDirection+0x1bc>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <GPIO_setupPinDirection+0x1b8>
    1a20:	80 95       	com	r24
    1a22:	84 23       	and	r24, r20
    1a24:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <GPIO_writePin+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <GPIO_writePin+0x8>
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	6a 83       	std	Y+2, r22	; 0x02
    1a48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	88 30       	cpi	r24, 0x08	; 8
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <GPIO_writePin+0x1c>
    1a50:	d5 c0       	rjmp	.+426    	; 0x1bfc <GPIO_writePin+0x1c6>
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <GPIO_writePin+0x24>
    1a58:	d1 c0       	rjmp	.+418    	; 0x1bfc <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3d 83       	std	Y+5, r19	; 0x05
    1a62:	2c 83       	std	Y+4, r18	; 0x04
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <GPIO_writePin+0x3a>
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <GPIO_writePin+0xc0>
    1a70:	2c 81       	ldd	r18, Y+4	; 0x04
    1a72:	3d 81       	ldd	r19, Y+5	; 0x05
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <GPIO_writePin+0x4e>
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	71 f0       	breq	.+28     	; 0x1a9e <GPIO_writePin+0x68>
    1a82:	bc c0       	rjmp	.+376    	; 0x1bfc <GPIO_writePin+0x1c6>
    1a84:	2c 81       	ldd	r18, Y+4	; 0x04
    1a86:	3d 81       	ldd	r19, Y+5	; 0x05
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <GPIO_writePin+0x5a>
    1a8e:	5f c0       	rjmp	.+190    	; 0x1b4e <GPIO_writePin+0x118>
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <GPIO_writePin+0x66>
    1a9a:	85 c0       	rjmp	.+266    	; 0x1ba6 <GPIO_writePin+0x170>
    1a9c:	af c0       	rjmp	.+350    	; 0x1bfc <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	a1 f4       	brne	.+40     	; 0x1acc <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
    1aa4:	ab e3       	ldi	r26, 0x3B	; 59
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	eb e3       	ldi	r30, 0x3B	; 59
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <GPIO_writePin+0x8c>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <GPIO_writePin+0x88>
    1ac6:	84 2b       	or	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	98 c0       	rjmp	.+304    	; 0x1bfc <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
    1acc:	ab e3       	ldi	r26, 0x3B	; 59
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	eb e3       	ldi	r30, 0x3B	; 59
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <GPIO_writePin+0xb4>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <GPIO_writePin+0xb0>
    1aee:	80 95       	com	r24
    1af0:	84 23       	and	r24, r20
    1af2:	8c 93       	st	X, r24
    1af4:	83 c0       	rjmp	.+262    	; 0x1bfc <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	a1 f4       	brne	.+40     	; 0x1b24 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
    1afc:	a8 e3       	ldi	r26, 0x38	; 56
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e8 e3       	ldi	r30, 0x38	; 56
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	48 2f       	mov	r20, r24
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	02 2e       	mov	r0, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <GPIO_writePin+0xe4>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	0a 94       	dec	r0
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <GPIO_writePin+0xe0>
    1b1e:	84 2b       	or	r24, r20
    1b20:	8c 93       	st	X, r24
    1b22:	6c c0       	rjmp	.+216    	; 0x1bfc <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
    1b24:	a8 e3       	ldi	r26, 0x38	; 56
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e8 e3       	ldi	r30, 0x38	; 56
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <GPIO_writePin+0x10c>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <GPIO_writePin+0x108>
    1b46:	80 95       	com	r24
    1b48:	84 23       	and	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	57 c0       	rjmp	.+174    	; 0x1bfc <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	a1 f4       	brne	.+40     	; 0x1b7c <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
    1b54:	a5 e3       	ldi	r26, 0x35	; 53
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e5 e3       	ldi	r30, 0x35	; 53
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <GPIO_writePin+0x13c>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <GPIO_writePin+0x138>
    1b76:	84 2b       	or	r24, r20
    1b78:	8c 93       	st	X, r24
    1b7a:	40 c0       	rjmp	.+128    	; 0x1bfc <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
    1b7c:	a5 e3       	ldi	r26, 0x35	; 53
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e3       	ldi	r30, 0x35	; 53
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 2e       	mov	r0, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <GPIO_writePin+0x164>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	0a 94       	dec	r0
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <GPIO_writePin+0x160>
    1b9e:	80 95       	com	r24
    1ba0:	84 23       	and	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	2b c0       	rjmp	.+86     	; 0x1bfc <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	a1 f4       	brne	.+40     	; 0x1bd4 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
    1bac:	a2 e3       	ldi	r26, 0x32	; 50
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e2 e3       	ldi	r30, 0x32	; 50
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <GPIO_writePin+0x194>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <GPIO_writePin+0x190>
    1bce:	84 2b       	or	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
    1bd4:	a2 e3       	ldi	r26, 0x32	; 50
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e2 e3       	ldi	r30, 0x32	; 50
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GPIO_writePin+0x1bc>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <GPIO_writePin+0x1b8>
    1bf6:	80 95       	com	r24
    1bf8:	84 23       	and	r24, r20
    1bfa:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_readPin+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <GPIO_readPin+0x8>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <GPIO_readPin+0xa>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	88 30       	cpi	r24, 0x08	; 8
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <GPIO_readPin+0x1a>
    1c24:	85 c0       	rjmp	.+266    	; 0x1d30 <GPIO_readPin+0x124>
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	84 30       	cpi	r24, 0x04	; 4
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <GPIO_readPin+0x22>
    1c2c:	81 c0       	rjmp	.+258    	; 0x1d30 <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3d 83       	std	Y+5, r19	; 0x05
    1c36:	2c 83       	std	Y+4, r18	; 0x04
    1c38:	4c 81       	ldd	r20, Y+4	; 0x04
    1c3a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c3c:	41 30       	cpi	r20, 0x01	; 1
    1c3e:	51 05       	cpc	r21, r1
    1c40:	79 f1       	breq	.+94     	; 0x1ca0 <GPIO_readPin+0x94>
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	9d 81       	ldd	r25, Y+5	; 0x05
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	91 05       	cpc	r25, r1
    1c4a:	34 f4       	brge	.+12     	; 0x1c58 <GPIO_readPin+0x4c>
    1c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c50:	21 15       	cp	r18, r1
    1c52:	31 05       	cpc	r19, r1
    1c54:	69 f0       	breq	.+26     	; 0x1c70 <GPIO_readPin+0x64>
    1c56:	6c c0       	rjmp	.+216    	; 0x1d30 <GPIO_readPin+0x124>
    1c58:	4c 81       	ldd	r20, Y+4	; 0x04
    1c5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c5c:	42 30       	cpi	r20, 0x02	; 2
    1c5e:	51 05       	cpc	r21, r1
    1c60:	b9 f1       	breq	.+110    	; 0x1cd0 <GPIO_readPin+0xc4>
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	9d 81       	ldd	r25, Y+5	; 0x05
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <GPIO_readPin+0x62>
    1c6c:	49 c0       	rjmp	.+146    	; 0x1d00 <GPIO_readPin+0xf4>
    1c6e:	60 c0       	rjmp	.+192    	; 0x1d30 <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
    1c70:	e9 e3       	ldi	r30, 0x39	; 57
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a9 01       	movw	r20, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_readPin+0x7c>
    1c84:	55 95       	asr	r21
    1c86:	47 95       	ror	r20
    1c88:	8a 95       	dec	r24
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_readPin+0x78>
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	81 70       	andi	r24, 0x01	; 1
    1c90:	90 70       	andi	r25, 0x00	; 0
    1c92:	88 23       	and	r24, r24
    1c94:	19 f0       	breq	.+6      	; 0x1c9c <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    1c96:	51 e0       	ldi	r21, 0x01	; 1
    1c98:	5b 83       	std	Y+3, r21	; 0x03
    1c9a:	4b c0       	rjmp	.+150    	; 0x1d32 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1c9c:	1b 82       	std	Y+3, r1	; 0x03
    1c9e:	49 c0       	rjmp	.+146    	; 0x1d32 <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
    1ca0:	e6 e3       	ldi	r30, 0x36	; 54
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a9 01       	movw	r20, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <GPIO_readPin+0xac>
    1cb4:	55 95       	asr	r21
    1cb6:	47 95       	ror	r20
    1cb8:	8a 95       	dec	r24
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <GPIO_readPin+0xa8>
    1cbc:	ca 01       	movw	r24, r20
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	90 70       	andi	r25, 0x00	; 0
    1cc2:	88 23       	and	r24, r24
    1cc4:	19 f0       	breq	.+6      	; 0x1ccc <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    1cc6:	51 e0       	ldi	r21, 0x01	; 1
    1cc8:	5b 83       	std	Y+3, r21	; 0x03
    1cca:	33 c0       	rjmp	.+102    	; 0x1d32 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1ccc:	1b 82       	std	Y+3, r1	; 0x03
    1cce:	31 c0       	rjmp	.+98     	; 0x1d32 <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
    1cd0:	e3 e3       	ldi	r30, 0x33	; 51
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <GPIO_readPin+0xdc>
    1ce4:	55 95       	asr	r21
    1ce6:	47 95       	ror	r20
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <GPIO_readPin+0xd8>
    1cec:	ca 01       	movw	r24, r20
    1cee:	81 70       	andi	r24, 0x01	; 1
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	88 23       	and	r24, r24
    1cf4:	19 f0       	breq	.+6      	; 0x1cfc <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    1cf6:	51 e0       	ldi	r21, 0x01	; 1
    1cf8:	5b 83       	std	Y+3, r21	; 0x03
    1cfa:	1b c0       	rjmp	.+54     	; 0x1d32 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1cfc:	1b 82       	std	Y+3, r1	; 0x03
    1cfe:	19 c0       	rjmp	.+50     	; 0x1d32 <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
    1d00:	e0 e3       	ldi	r30, 0x30	; 48
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <GPIO_readPin+0x10c>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <GPIO_readPin+0x108>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	90 70       	andi	r25, 0x00	; 0
    1d22:	88 23       	and	r24, r24
    1d24:	19 f0       	breq	.+6      	; 0x1d2c <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    1d26:	51 e0       	ldi	r21, 0x01	; 1
    1d28:	5b 83       	std	Y+3, r21	; 0x03
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1d2c:	1b 82       	std	Y+3, r1	; 0x03
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <GPIO_readPin+0x126>
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <GPIO_readPin+0x12a>
				}
		}
	}
}
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	8e 83       	std	Y+6, r24	; 0x06
    1d36:	8e 81       	ldd	r24, Y+6	; 0x06
    1d38:	26 96       	adiw	r28, 0x06	; 6
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <GPIO_setupPortDirection+0x6>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <GPIO_setupPortDirection+0x8>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	84 30       	cpi	r24, 0x04	; 4
    1d5e:	90 f5       	brcc	.+100    	; 0x1dc4 <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	3c 83       	std	Y+4, r19	; 0x04
    1d68:	2b 83       	std	Y+3, r18	; 0x03
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	91 05       	cpc	r25, r1
    1d72:	d1 f0       	breq	.+52     	; 0x1da8 <GPIO_setupPortDirection+0x5e>
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <GPIO_setupPortDirection+0x3e>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <GPIO_setupPortDirection+0x54>
    1d86:	1e c0       	rjmp	.+60     	; 0x1dc4 <GPIO_setupPortDirection+0x7a>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	22 30       	cpi	r18, 0x02	; 2
    1d8e:	31 05       	cpc	r19, r1
    1d90:	81 f0       	breq	.+32     	; 0x1db2 <GPIO_setupPortDirection+0x68>
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <GPIO_setupPortDirection+0x72>
    1d9c:	13 c0       	rjmp	.+38     	; 0x1dc4 <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    1d9e:	ea e3       	ldi	r30, 0x3A	; 58
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	80 83       	st	Z, r24
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    1da8:	e7 e3       	ldi	r30, 0x37	; 55
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
    1db0:	09 c0       	rjmp	.+18     	; 0x1dc4 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    1db2:	e4 e3       	ldi	r30, 0x34	; 52
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	80 83       	st	Z, r24
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <GPIO_writePort+0x6>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <GPIO_writePort+0x8>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	90 f5       	brcc	.+100    	; 0x1e4c <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	3c 83       	std	Y+4, r19	; 0x04
    1df0:	2b 83       	std	Y+3, r18	; 0x03
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 05       	cpc	r25, r1
    1dfa:	d1 f0       	breq	.+52     	; 0x1e30 <GPIO_writePort+0x5e>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <GPIO_writePort+0x3e>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	61 f0       	breq	.+24     	; 0x1e26 <GPIO_writePort+0x54>
    1e0e:	1e c0       	rjmp	.+60     	; 0x1e4c <GPIO_writePort+0x7a>
    1e10:	2b 81       	ldd	r18, Y+3	; 0x03
    1e12:	3c 81       	ldd	r19, Y+4	; 0x04
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	31 05       	cpc	r19, r1
    1e18:	81 f0       	breq	.+32     	; 0x1e3a <GPIO_writePort+0x68>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	91 05       	cpc	r25, r1
    1e22:	81 f0       	breq	.+32     	; 0x1e44 <GPIO_writePort+0x72>
    1e24:	13 c0       	rjmp	.+38     	; 0x1e4c <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    1e26:	eb e3       	ldi	r30, 0x3B	; 59
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	80 83       	st	Z, r24
    1e2e:	0e c0       	rjmp	.+28     	; 0x1e4c <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    1e30:	e8 e3       	ldi	r30, 0x38	; 56
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
    1e38:	09 c0       	rjmp	.+18     	; 0x1e4c <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    1e3a:	e5 e3       	ldi	r30, 0x35	; 53
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    1e44:	e2 e3       	ldi	r30, 0x32	; 50
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <GPIO_readPort+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <GPIO_readPort+0x8>
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	84 30       	cpi	r24, 0x04	; 4
    1e6e:	98 f5       	brcc	.+102    	; 0x1ed6 <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	3c 83       	std	Y+4, r19	; 0x04
    1e78:	2b 83       	std	Y+3, r18	; 0x03
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	91 05       	cpc	r25, r1
    1e82:	d1 f0       	breq	.+52     	; 0x1eb8 <GPIO_readPort+0x5e>
    1e84:	2b 81       	ldd	r18, Y+3	; 0x03
    1e86:	3c 81       	ldd	r19, Y+4	; 0x04
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <GPIO_readPort+0x3e>
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	61 f0       	breq	.+24     	; 0x1eae <GPIO_readPort+0x54>
    1e96:	1f c0       	rjmp	.+62     	; 0x1ed6 <GPIO_readPort+0x7c>
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	81 f0       	breq	.+32     	; 0x1ec2 <GPIO_readPort+0x68>
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	83 30       	cpi	r24, 0x03	; 3
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	81 f0       	breq	.+32     	; 0x1ecc <GPIO_readPort+0x72>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    1eae:	e9 e3       	ldi	r30, 0x39	; 57
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	90 81       	ld	r25, Z
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	10 c0       	rjmp	.+32     	; 0x1ed8 <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    1eb8:	e6 e3       	ldi	r30, 0x36	; 54
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	20 81       	ld	r18, Z
    1ebe:	2a 83       	std	Y+2, r18	; 0x02
    1ec0:	0b c0       	rjmp	.+22     	; 0x1ed8 <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    1ec2:	e3 e3       	ldi	r30, 0x33	; 51
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	30 81       	ld	r19, Z
    1ec8:	3a 83       	std	Y+2, r19	; 0x02
    1eca:	06 c0       	rjmp	.+12     	; 0x1ed8 <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    1ecc:	e0 e3       	ldi	r30, 0x30	; 48
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <GPIO_readPort+0x7e>
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <GPIO_readPort+0x82>
		}
	}
}
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	9d 83       	std	Y+5, r25	; 0x05
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <I2C_init>:
 * [Args] I2CConfig		: Contains division factor, device address, pre-scaler
 * 						  interrupt state and general call recognition.
 * [Return]				: Void.
 */
void I2C_init(const I2C_initConfig *I2CConfig)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <I2C_init+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <I2C_init+0x8>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <I2C_init+0xa>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
	/* Set I2C division factor for SCL frequency equation */
	TWBR = (*I2CConfig).divisionFactor;
    1f00:	a0 e2       	ldi	r26, 0x20	; 32
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e9 81       	ldd	r30, Y+1	; 0x01
    1f06:	fa 81       	ldd	r31, Y+2	; 0x02
    1f08:	80 81       	ld	r24, Z
    1f0a:	8c 93       	st	X, r24
	/* Enable I2C */
	SET_BIT(TWCR, TWEN);
    1f0c:	a6 e5       	ldi	r26, 0x56	; 86
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e6 e5       	ldi	r30, 0x56	; 86
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	84 60       	ori	r24, 0x04	; 4
    1f18:	8c 93       	st	X, r24
	/* Select interrupt state */
	switch ((*I2CConfig).interruptEnable)
    1f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	86 95       	lsr	r24
    1f22:	86 95       	lsr	r24
    1f24:	81 70       	andi	r24, 0x01	; 1
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3e 83       	std	Y+6, r19	; 0x06
    1f2c:	2d 83       	std	Y+5, r18	; 0x05
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f0       	breq	.+26     	; 0x1f50 <I2C_init+0x62>
    1f36:	2d 81       	ldd	r18, Y+5	; 0x05
    1f38:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3a:	21 30       	cpi	r18, 0x01	; 1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	79 f4       	brne	.+30     	; 0x1f5e <I2C_init+0x70>
	{
		case LOGIC_HIGH:
			SET_BIT(TWCR, TWIE);
    1f40:	a6 e5       	ldi	r26, 0x56	; 86
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e6 e5       	ldi	r30, 0x56	; 86
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	81 60       	ori	r24, 0x01	; 1
    1f4c:	8c 93       	st	X, r24
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <I2C_init+0x70>
		break;
		case LOGIC_LOW:
			CLEAR_BIT(TWCR, TWIE);
    1f50:	a6 e5       	ldi	r26, 0x56	; 86
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e6 e5       	ldi	r30, 0x56	; 86
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	8e 7f       	andi	r24, 0xFE	; 254
    1f5c:	8c 93       	st	X, r24
		break;
	}
	/* Set I2C pre-scaler for SCL frequency equation */
	OVERWRITE_REG(TWDR, 0xFC, (*I2CConfig).prescaler);
    1f5e:	a3 e2       	ldi	r26, 0x23	; 35
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e3 e2       	ldi	r30, 0x23	; 35
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	98 2f       	mov	r25, r24
    1f6a:	9c 7f       	andi	r25, 0xFC	; 252
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	83 70       	andi	r24, 0x03	; 3
    1f74:	89 2b       	or	r24, r25
    1f76:	8c 93       	st	X, r24
	/* Set I2C address for current device for slave case */
	OVERWRITE_REG(TWAR, 0x01, (*I2CConfig).address);
    1f78:	a2 e2       	ldi	r26, 0x22	; 34
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e2 e2       	ldi	r30, 0x22	; 34
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	98 2f       	mov	r25, r24
    1f84:	91 70       	andi	r25, 0x01	; 1
    1f86:	e9 81       	ldd	r30, Y+1	; 0x01
    1f88:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8a:	81 81       	ldd	r24, Z+1	; 0x01
    1f8c:	8f 77       	andi	r24, 0x7F	; 127
    1f8e:	89 2b       	or	r24, r25
    1f90:	8c 93       	st	X, r24
	/* Set general call recognition */
	switch ((*I2CConfig).GCREnable)
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	86 95       	lsr	r24
    1f9a:	86 95       	lsr	r24
    1f9c:	86 95       	lsr	r24
    1f9e:	81 70       	andi	r24, 0x01	; 1
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	3c 83       	std	Y+4, r19	; 0x04
    1fa6:	2b 83       	std	Y+3, r18	; 0x03
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f0       	breq	.+26     	; 0x1fca <I2C_init+0xdc>
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	21 30       	cpi	r18, 0x01	; 1
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	79 f4       	brne	.+30     	; 0x1fd8 <I2C_init+0xea>
	{
		case LOGIC_HIGH:
			SET_BIT(TWAR, TWGCE);
    1fba:	a2 e2       	ldi	r26, 0x22	; 34
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e2 e2       	ldi	r30, 0x22	; 34
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	81 60       	ori	r24, 0x01	; 1
    1fc6:	8c 93       	st	X, r24
    1fc8:	07 c0       	rjmp	.+14     	; 0x1fd8 <I2C_init+0xea>
		break;
		case LOGIC_LOW:
			CLEAR_BIT(TWAR, TWGCE);
    1fca:	a2 e2       	ldi	r26, 0x22	; 34
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e2 e2       	ldi	r30, 0x22	; 34
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8e 7f       	andi	r24, 0xFE	; 254
    1fd6:	8c 93       	st	X, r24
		break;
	}
}
    1fd8:	26 96       	adiw	r28, 0x06	; 6
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <I2C_start>:
 * 		Function that sends start bit through I2C.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void I2C_start(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    1ff2:	a6 e5       	ldi	r26, 0x56	; 86
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e6 e5       	ldi	r30, 0x56	; 86
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 68       	ori	r24, 0x80	; 128
    1ffe:	8c 93       	st	X, r24
	/* Send start bit */
	SET_BIT(TWCR, TWSTA);
    2000:	a6 e5       	ldi	r26, 0x56	; 86
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e6 e5       	ldi	r30, 0x56	; 86
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 62       	ori	r24, 0x20	; 32
    200c:	8c 93       	st	X, r24
	/* Wait for interrupt flag to be set, which means start bit was sent successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    200e:	e6 e5       	ldi	r30, 0x56	; 86
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 23       	and	r24, r24
    2016:	dc f7       	brge	.-10     	; 0x200e <I2C_start+0x24>
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <I2C_stop>:
 * 		Function that sends stop bit through I2C.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void I2C_stop(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    2026:	a6 e5       	ldi	r26, 0x56	; 86
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e6 e5       	ldi	r30, 0x56	; 86
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 68       	ori	r24, 0x80	; 128
    2032:	8c 93       	st	X, r24
	/* Send stop bit */
	SET_BIT(TWCR, TWSTO);
    2034:	a6 e5       	ldi	r26, 0x56	; 86
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e6 e5       	ldi	r30, 0x56	; 86
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	80 61       	ori	r24, 0x10	; 16
    2040:	8c 93       	st	X, r24
}
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <I2C_writeByte>:
 * [Args]	:
 * [In] data		: Indicates data value.
 * [Return]			: Void.
 */
void I2C_writeByte(uint8 data)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	89 83       	std	Y+1, r24	; 0x01
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    2054:	a6 e5       	ldi	r26, 0x56	; 86
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e6 e5       	ldi	r30, 0x56	; 86
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 68       	ori	r24, 0x80	; 128
    2060:	8c 93       	st	X, r24
	/* Set data to be sent */
	TWDR = data;
    2062:	e3 e2       	ldi	r30, 0x23	; 35
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	80 83       	st	Z, r24
	/* Wait for interrupt flag to be set, which means data was sent successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    206a:	e6 e5       	ldi	r30, 0x56	; 86
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	88 23       	and	r24, r24
    2072:	dc f7       	brge	.-10     	; 0x206a <I2C_writeByte+0x22>
}
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <I2C_readByteWithACK>:
 * 		Function that returns received data through I2C and sends ACK.
 * [Args]		: Void
 * [Return]		: Received data through I2C.
 */
uint8 I2C_readByteWithACK(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    2084:	a6 e5       	ldi	r26, 0x56	; 86
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e6 e5       	ldi	r30, 0x56	; 86
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 68       	ori	r24, 0x80	; 128
    2090:	8c 93       	st	X, r24
	/* Send acknowledge bit*/
	SET_BIT(TWCR, TWEA);
    2092:	a6 e5       	ldi	r26, 0x56	; 86
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e6 e5       	ldi	r30, 0x56	; 86
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 64       	ori	r24, 0x40	; 64
    209e:	8c 93       	st	X, r24
	/* Wait for interrupt flag to be set, which means data was received successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    20a0:	e6 e5       	ldi	r30, 0x56	; 86
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	88 23       	and	r24, r24
    20a8:	dc f7       	brge	.-10     	; 0x20a0 <I2C_readByteWithACK+0x24>
	/* Read data */
	return TWDR;
    20aa:	e3 e2       	ldi	r30, 0x23	; 35
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <I2C_readByteWithNACK>:
 * 		Function that returns received data through I2C and does not send ACK.
 * [Args]		: Void
 * [Return]		: Received data through I2C.
 */
uint8 I2C_readByteWithNACK(void)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag */
	SET_BIT(TWCR, TWINT);
    20be:	a6 e5       	ldi	r26, 0x56	; 86
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e6 e5       	ldi	r30, 0x56	; 86
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	80 68       	ori	r24, 0x80	; 128
    20ca:	8c 93       	st	X, r24
	/* Do not send acknowledge bit*/
	/* Wait for interrupt flag to be set, which means data was received successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    20cc:	e6 e5       	ldi	r30, 0x56	; 86
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	88 23       	and	r24, r24
    20d4:	dc f7       	brge	.-10     	; 0x20cc <I2C_readByteWithNACK+0x16>
	/* Read data */
	return TWDR;
    20d6:	e3 e2       	ldi	r30, 0x23	; 35
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <I2C_getStatus>:
 * 		Function that return I2C status.
 * [Args]		: Void
 * [Return]		: I2C status.
 */
uint8 I2C_getStatus(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	/* Define a variable that will carry I2C status */
	uint8 status;
	/* Eliminate 3 LSBs and get 5 MSBs */
	status = TWSR & 0xF8;
    20ec:	e1 e2       	ldi	r30, 0x21	; 33
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	88 7f       	andi	r24, 0xF8	; 248
    20f4:	89 83       	std	Y+1, r24	; 0x01
	/* Read status */
	return status;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <__vector_11>:
 * [Interrupt Vector]	: TIMER0_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer0.
 */
ISR(TIMER0_OVF_vect)
{
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    212a:	80 91 79 00 	lds	r24, 0x0079
    212e:	90 91 7a 00 	lds	r25, 0x007A
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	29 f0       	breq	.+10     	; 0x2140 <__vector_11+0x40>
	{
		(*g_timer0CallBack_Ptr)(); /* Execute callback function */
    2136:	e0 91 79 00 	lds	r30, 0x0079
    213a:	f0 91 7a 00 	lds	r31, 0x007A
    213e:	09 95       	icall
	}
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	ff 91       	pop	r31
    2146:	ef 91       	pop	r30
    2148:	bf 91       	pop	r27
    214a:	af 91       	pop	r26
    214c:	9f 91       	pop	r25
    214e:	8f 91       	pop	r24
    2150:	7f 91       	pop	r23
    2152:	6f 91       	pop	r22
    2154:	5f 91       	pop	r21
    2156:	4f 91       	pop	r20
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	0f 90       	pop	r0
    2162:	1f 90       	pop	r1
    2164:	18 95       	reti

00002166 <__vector_10>:
 * [Interrupt Vector]	: TIMER0_COMP_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer0.
 */
ISR(TIMER0_COMP_vect)
{
    2166:	1f 92       	push	r1
    2168:	0f 92       	push	r0
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	0f 92       	push	r0
    216e:	11 24       	eor	r1, r1
    2170:	2f 93       	push	r18
    2172:	3f 93       	push	r19
    2174:	4f 93       	push	r20
    2176:	5f 93       	push	r21
    2178:	6f 93       	push	r22
    217a:	7f 93       	push	r23
    217c:	8f 93       	push	r24
    217e:	9f 93       	push	r25
    2180:	af 93       	push	r26
    2182:	bf 93       	push	r27
    2184:	ef 93       	push	r30
    2186:	ff 93       	push	r31
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    2190:	80 91 79 00 	lds	r24, 0x0079
    2194:	90 91 7a 00 	lds	r25, 0x007A
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	29 f0       	breq	.+10     	; 0x21a6 <__vector_10+0x40>
	{
		(*g_timer0CallBack_Ptr)(); /* Execute callback function */
    219c:	e0 91 79 00 	lds	r30, 0x0079
    21a0:	f0 91 7a 00 	lds	r31, 0x007A
    21a4:	09 95       	icall
	}
}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	ff 91       	pop	r31
    21ac:	ef 91       	pop	r30
    21ae:	bf 91       	pop	r27
    21b0:	af 91       	pop	r26
    21b2:	9f 91       	pop	r25
    21b4:	8f 91       	pop	r24
    21b6:	7f 91       	pop	r23
    21b8:	6f 91       	pop	r22
    21ba:	5f 91       	pop	r21
    21bc:	4f 91       	pop	r20
    21be:	3f 91       	pop	r19
    21c0:	2f 91       	pop	r18
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <__vector_9>:
 * [Interrupt Vector]	: TIMER1_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer1.
 */
ISR(TIMER1_OVF_vect)
{
    21cc:	1f 92       	push	r1
    21ce:	0f 92       	push	r0
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	0f 92       	push	r0
    21d4:	11 24       	eor	r1, r1
    21d6:	2f 93       	push	r18
    21d8:	3f 93       	push	r19
    21da:	4f 93       	push	r20
    21dc:	5f 93       	push	r21
    21de:	6f 93       	push	r22
    21e0:	7f 93       	push	r23
    21e2:	8f 93       	push	r24
    21e4:	9f 93       	push	r25
    21e6:	af 93       	push	r26
    21e8:	bf 93       	push	r27
    21ea:	ef 93       	push	r30
    21ec:	ff 93       	push	r31
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    21f6:	80 91 7b 00 	lds	r24, 0x007B
    21fa:	90 91 7c 00 	lds	r25, 0x007C
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	29 f0       	breq	.+10     	; 0x220c <__vector_9+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    2202:	e0 91 7b 00 	lds	r30, 0x007B
    2206:	f0 91 7c 00 	lds	r31, 0x007C
    220a:	09 95       	icall
	}
}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	ff 91       	pop	r31
    2212:	ef 91       	pop	r30
    2214:	bf 91       	pop	r27
    2216:	af 91       	pop	r26
    2218:	9f 91       	pop	r25
    221a:	8f 91       	pop	r24
    221c:	7f 91       	pop	r23
    221e:	6f 91       	pop	r22
    2220:	5f 91       	pop	r21
    2222:	4f 91       	pop	r20
    2224:	3f 91       	pop	r19
    2226:	2f 91       	pop	r18
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <__vector_7>:
 * [Interrupt Vector]	: TIMER1_COMPA_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit A.
 */
ISR(TIMER1_COMPA_vect)
{
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	11 24       	eor	r1, r1
    223c:	2f 93       	push	r18
    223e:	3f 93       	push	r19
    2240:	4f 93       	push	r20
    2242:	5f 93       	push	r21
    2244:	6f 93       	push	r22
    2246:	7f 93       	push	r23
    2248:	8f 93       	push	r24
    224a:	9f 93       	push	r25
    224c:	af 93       	push	r26
    224e:	bf 93       	push	r27
    2250:	ef 93       	push	r30
    2252:	ff 93       	push	r31
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    225c:	80 91 7b 00 	lds	r24, 0x007B
    2260:	90 91 7c 00 	lds	r25, 0x007C
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	29 f0       	breq	.+10     	; 0x2272 <__vector_7+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    2268:	e0 91 7b 00 	lds	r30, 0x007B
    226c:	f0 91 7c 00 	lds	r31, 0x007C
    2270:	09 95       	icall
	}
}
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	ff 91       	pop	r31
    2278:	ef 91       	pop	r30
    227a:	bf 91       	pop	r27
    227c:	af 91       	pop	r26
    227e:	9f 91       	pop	r25
    2280:	8f 91       	pop	r24
    2282:	7f 91       	pop	r23
    2284:	6f 91       	pop	r22
    2286:	5f 91       	pop	r21
    2288:	4f 91       	pop	r20
    228a:	3f 91       	pop	r19
    228c:	2f 91       	pop	r18
    228e:	0f 90       	pop	r0
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	0f 90       	pop	r0
    2294:	1f 90       	pop	r1
    2296:	18 95       	reti

00002298 <__vector_8>:
 * [Interrupt Vector]	: TIMER1_COMPB_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit B.
 */
ISR(TIMER1_COMPB_vect)
{
    2298:	1f 92       	push	r1
    229a:	0f 92       	push	r0
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	0f 92       	push	r0
    22a0:	11 24       	eor	r1, r1
    22a2:	2f 93       	push	r18
    22a4:	3f 93       	push	r19
    22a6:	4f 93       	push	r20
    22a8:	5f 93       	push	r21
    22aa:	6f 93       	push	r22
    22ac:	7f 93       	push	r23
    22ae:	8f 93       	push	r24
    22b0:	9f 93       	push	r25
    22b2:	af 93       	push	r26
    22b4:	bf 93       	push	r27
    22b6:	ef 93       	push	r30
    22b8:	ff 93       	push	r31
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitB_Ptr != NULL_PTR) /* If callback function pointer is not void */
    22c2:	80 91 7d 00 	lds	r24, 0x007D
    22c6:	90 91 7e 00 	lds	r25, 0x007E
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	29 f0       	breq	.+10     	; 0x22d8 <__vector_8+0x40>
	{
		(*g_timer1CallBackUnitB_Ptr)(); /* Execute callback function */
    22ce:	e0 91 7d 00 	lds	r30, 0x007D
    22d2:	f0 91 7e 00 	lds	r31, 0x007E
    22d6:	09 95       	icall
	}
}
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	ff 91       	pop	r31
    22de:	ef 91       	pop	r30
    22e0:	bf 91       	pop	r27
    22e2:	af 91       	pop	r26
    22e4:	9f 91       	pop	r25
    22e6:	8f 91       	pop	r24
    22e8:	7f 91       	pop	r23
    22ea:	6f 91       	pop	r22
    22ec:	5f 91       	pop	r21
    22ee:	4f 91       	pop	r20
    22f0:	3f 91       	pop	r19
    22f2:	2f 91       	pop	r18
    22f4:	0f 90       	pop	r0
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	0f 90       	pop	r0
    22fa:	1f 90       	pop	r1
    22fc:	18 95       	reti

000022fe <Timer0_init>:
 * [In] timerConfig		: Contains selected mode, selected output compare mode and
 * 						  interrupt state.
 * [Return]				: Void.
 */
void Timer0_init(const Timer_initConfig *timerConfig)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	2d 97       	sbiw	r28, 0x0d	; 13
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR0);
    2316:	e3 e5       	ldi	r30, 0x53	; 83
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	20 81       	ld	r18, Z
    231c:	e3 e5       	ldi	r30, 0x53	; 83
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	80 81       	ld	r24, Z
    2328:	8f 70       	andi	r24, 0x0F	; 15
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	3c 87       	std	Y+12, r19	; 0x0c
    2330:	2b 87       	std	Y+11, r18	; 0x0b
    2332:	8b 85       	ldd	r24, Y+11	; 0x0b
    2334:	9c 85       	ldd	r25, Y+12	; 0x0c
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	91 05       	cpc	r25, r1
    233a:	e9 f0       	breq	.+58     	; 0x2376 <Timer0_init+0x78>
    233c:	2b 85       	ldd	r18, Y+11	; 0x0b
    233e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2340:	22 30       	cpi	r18, 0x02	; 2
    2342:	31 05       	cpc	r19, r1
    2344:	2c f4       	brge	.+10     	; 0x2350 <Timer0_init+0x52>
    2346:	8b 85       	ldd	r24, Y+11	; 0x0b
    2348:	9c 85       	ldd	r25, Y+12	; 0x0c
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	61 f0       	breq	.+24     	; 0x2366 <Timer0_init+0x68>
    234e:	38 c0       	rjmp	.+112    	; 0x23c0 <Timer0_init+0xc2>
    2350:	2b 85       	ldd	r18, Y+11	; 0x0b
    2352:	3c 85       	ldd	r19, Y+12	; 0x0c
    2354:	22 30       	cpi	r18, 0x02	; 2
    2356:	31 05       	cpc	r19, r1
    2358:	b1 f0       	breq	.+44     	; 0x2386 <Timer0_init+0x88>
    235a:	8b 85       	ldd	r24, Y+11	; 0x0b
    235c:	9c 85       	ldd	r25, Y+12	; 0x0c
    235e:	83 30       	cpi	r24, 0x03	; 3
    2360:	91 05       	cpc	r25, r1
    2362:	01 f1       	breq	.+64     	; 0x23a4 <Timer0_init+0xa6>
    2364:	2d c0       	rjmp	.+90     	; 0x23c0 <Timer0_init+0xc2>
	{
		case TIMER8BIT_NORMAL:
			SET_BIT(TCCR0, FOC0); /* Only enable in non-PWM mode */
    2366:	a3 e5       	ldi	r26, 0x53	; 83
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e3 e5       	ldi	r30, 0x53	; 83
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	80 68       	ori	r24, 0x80	; 128
    2372:	8c 93       	st	X, r24
    2374:	25 c0       	rjmp	.+74     	; 0x23c0 <Timer0_init+0xc2>
		break;
		case TIMER8BIT_PHASE_PWM:
			SET_BIT(TCCR0, WGM00);
    2376:	a3 e5       	ldi	r26, 0x53	; 83
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e3 e5       	ldi	r30, 0x53	; 83
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	80 64       	ori	r24, 0x40	; 64
    2382:	8c 93       	st	X, r24
    2384:	1d c0       	rjmp	.+58     	; 0x23c0 <Timer0_init+0xc2>
		break;
		case TIMER8BIT_CTC:
			SET_BIT(TCCR0, FOC0); /* Only enable in non-PWM mode */
    2386:	a3 e5       	ldi	r26, 0x53	; 83
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e3 e5       	ldi	r30, 0x53	; 83
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 68       	ori	r24, 0x80	; 128
    2392:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    2394:	a3 e5       	ldi	r26, 0x53	; 83
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e3 e5       	ldi	r30, 0x53	; 83
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	88 60       	ori	r24, 0x08	; 8
    23a0:	8c 93       	st	X, r24
    23a2:	0e c0       	rjmp	.+28     	; 0x23c0 <Timer0_init+0xc2>
		break;
		case TIMER8BIT_FAST_PWM:
			SET_BIT(TCCR0, WGM01);
    23a4:	a3 e5       	ldi	r26, 0x53	; 83
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e3 e5       	ldi	r30, 0x53	; 83
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	88 60       	ori	r24, 0x08	; 8
    23b0:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM00);
    23b2:	a3 e5       	ldi	r26, 0x53	; 83
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e3 e5       	ldi	r30, 0x53	; 83
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	80 64       	ori	r24, 0x40	; 64
    23be:	8c 93       	st	X, r24
		break;
	}
	if ((*timerConfig).mode == TIMER8BIT_CTC)
    23c0:	e9 81       	ldd	r30, Y+1	; 0x01
    23c2:	fa 81       	ldd	r31, Y+2	; 0x02
    23c4:	80 81       	ld	r24, Z
    23c6:	8f 70       	andi	r24, 0x0F	; 15
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	09 f0       	breq	.+2      	; 0x23ce <Timer0_init+0xd0>
    23cc:	a1 c0       	rjmp	.+322    	; 0x2510 <Timer0_init+0x212>
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    23ce:	e9 81       	ldd	r30, Y+1	; 0x01
    23d0:	fa 81       	ldd	r31, Y+2	; 0x02
    23d2:	80 81       	ld	r24, Z
    23d4:	82 95       	swap	r24
    23d6:	86 95       	lsr	r24
    23d8:	86 95       	lsr	r24
    23da:	83 70       	andi	r24, 0x03	; 3
    23dc:	81 70       	andi	r24, 0x01	; 1
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	3a 87       	std	Y+10, r19	; 0x0a
    23e4:	29 87       	std	Y+9, r18	; 0x09
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	a1 f0       	breq	.+40     	; 0x2416 <Timer0_init+0x118>
    23ee:	29 85       	ldd	r18, Y+9	; 0x09
    23f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    23f2:	21 30       	cpi	r18, 0x01	; 1
    23f4:	31 05       	cpc	r19, r1
    23f6:	e9 f4       	brne	.+58     	; 0x2432 <Timer0_init+0x134>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE0);
    23f8:	a9 e5       	ldi	r26, 0x59	; 89
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e9 e5       	ldi	r30, 0x59	; 89
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	82 60       	ori	r24, 0x02	; 2
    2404:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    2406:	a9 e5       	ldi	r26, 0x59	; 89
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e5       	ldi	r30, 0x59	; 89
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8e 7f       	andi	r24, 0xFE	; 254
    2412:	8c 93       	st	X, r24
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <Timer0_init+0x134>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE0);
    2416:	a9 e5       	ldi	r26, 0x59	; 89
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e9 e5       	ldi	r30, 0x59	; 89
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8d 7f       	andi	r24, 0xFD	; 253
    2422:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    2424:	a9 e5       	ldi	r26, 0x59	; 89
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e9 e5       	ldi	r30, 0x59	; 89
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8e 7f       	andi	r24, 0xFE	; 254
    2430:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    2432:	e9 81       	ldd	r30, Y+1	; 0x01
    2434:	fa 81       	ldd	r31, Y+2	; 0x02
    2436:	80 81       	ld	r24, Z
    2438:	82 95       	swap	r24
    243a:	8f 70       	andi	r24, 0x0F	; 15
    243c:	83 70       	andi	r24, 0x03	; 3
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	38 87       	std	Y+8, r19	; 0x08
    2444:	2f 83       	std	Y+7, r18	; 0x07
    2446:	8f 81       	ldd	r24, Y+7	; 0x07
    2448:	98 85       	ldd	r25, Y+8	; 0x08
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	91 05       	cpc	r25, r1
    244e:	21 f1       	breq	.+72     	; 0x2498 <Timer0_init+0x19a>
    2450:	2f 81       	ldd	r18, Y+7	; 0x07
    2452:	38 85       	ldd	r19, Y+8	; 0x08
    2454:	22 30       	cpi	r18, 0x02	; 2
    2456:	31 05       	cpc	r19, r1
    2458:	2c f4       	brge	.+10     	; 0x2464 <Timer0_init+0x166>
    245a:	8f 81       	ldd	r24, Y+7	; 0x07
    245c:	98 85       	ldd	r25, Y+8	; 0x08
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	61 f0       	breq	.+24     	; 0x247a <Timer0_init+0x17c>
    2462:	e3 c0       	rjmp	.+454    	; 0x262a <Timer0_init+0x32c>
    2464:	2f 81       	ldd	r18, Y+7	; 0x07
    2466:	38 85       	ldd	r19, Y+8	; 0x08
    2468:	22 30       	cpi	r18, 0x02	; 2
    246a:	31 05       	cpc	r19, r1
    246c:	49 f1       	breq	.+82     	; 0x24c0 <Timer0_init+0x1c2>
    246e:	8f 81       	ldd	r24, Y+7	; 0x07
    2470:	98 85       	ldd	r25, Y+8	; 0x08
    2472:	83 30       	cpi	r24, 0x03	; 3
    2474:	91 05       	cpc	r25, r1
    2476:	c1 f1       	breq	.+112    	; 0x24e8 <Timer0_init+0x1ea>
    2478:	d8 c0       	rjmp	.+432    	; 0x262a <Timer0_init+0x32c>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR0, COM01);
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8f 7d       	andi	r24, 0xDF	; 223
    2486:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    2488:	a3 e5       	ldi	r26, 0x53	; 83
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e3 e5       	ldi	r30, 0x53	; 83
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	8f 7e       	andi	r24, 0xEF	; 239
    2494:	8c 93       	st	X, r24
    2496:	c9 c0       	rjmp	.+402    	; 0x262a <Timer0_init+0x32c>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR0, COM01);
    2498:	a3 e5       	ldi	r26, 0x53	; 83
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e3 e5       	ldi	r30, 0x53	; 83
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	8f 7d       	andi	r24, 0xDF	; 223
    24a4:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    24a6:	a3 e5       	ldi	r26, 0x53	; 83
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e3 e5       	ldi	r30, 0x53	; 83
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	80 61       	ori	r24, 0x10	; 16
    24b2:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	63 e0       	ldi	r22, 0x03	; 3
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    24be:	b5 c0       	rjmp	.+362    	; 0x262a <Timer0_init+0x32c>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR0, COM01);
    24c0:	a3 e5       	ldi	r26, 0x53	; 83
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e3 e5       	ldi	r30, 0x53	; 83
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 62       	ori	r24, 0x20	; 32
    24cc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    24ce:	a3 e5       	ldi	r26, 0x53	; 83
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e3 e5       	ldi	r30, 0x53	; 83
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	8f 7e       	andi	r24, 0xEF	; 239
    24da:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	63 e0       	ldi	r22, 0x03	; 3
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    24e6:	a1 c0       	rjmp	.+322    	; 0x262a <Timer0_init+0x32c>
			break;
			case SET_OC:
				SET_BIT(TCCR0, COM01);
    24e8:	a3 e5       	ldi	r26, 0x53	; 83
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e3 e5       	ldi	r30, 0x53	; 83
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 62       	ori	r24, 0x20	; 32
    24f4:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    24f6:	a3 e5       	ldi	r26, 0x53	; 83
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e3 e5       	ldi	r30, 0x53	; 83
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	80 61       	ori	r24, 0x10	; 16
    2502:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	63 e0       	ldi	r22, 0x03	; 3
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    250e:	8d c0       	rjmp	.+282    	; 0x262a <Timer0_init+0x32c>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	80 81       	ld	r24, Z
    2516:	82 95       	swap	r24
    2518:	86 95       	lsr	r24
    251a:	86 95       	lsr	r24
    251c:	83 70       	andi	r24, 0x03	; 3
    251e:	81 70       	andi	r24, 0x01	; 1
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	3e 83       	std	Y+6, r19	; 0x06
    2526:	2d 83       	std	Y+5, r18	; 0x05
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	a1 f0       	breq	.+40     	; 0x2558 <Timer0_init+0x25a>
    2530:	2d 81       	ldd	r18, Y+5	; 0x05
    2532:	3e 81       	ldd	r19, Y+6	; 0x06
    2534:	21 30       	cpi	r18, 0x01	; 1
    2536:	31 05       	cpc	r19, r1
    2538:	e9 f4       	brne	.+58     	; 0x2574 <Timer0_init+0x276>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE0);
    253a:	a9 e5       	ldi	r26, 0x59	; 89
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e9 e5       	ldi	r30, 0x59	; 89
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8d 7f       	andi	r24, 0xFD	; 253
    2546:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE0);
    2548:	a9 e5       	ldi	r26, 0x59	; 89
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e9 e5       	ldi	r30, 0x59	; 89
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	81 60       	ori	r24, 0x01	; 1
    2554:	8c 93       	st	X, r24
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <Timer0_init+0x276>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE0);
    2558:	a9 e5       	ldi	r26, 0x59	; 89
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e9 e5       	ldi	r30, 0x59	; 89
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	8d 7f       	andi	r24, 0xFD	; 253
    2564:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    2566:	a9 e5       	ldi	r26, 0x59	; 89
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e9 e5       	ldi	r30, 0x59	; 89
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8e 7f       	andi	r24, 0xFE	; 254
    2572:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    2574:	e9 81       	ldd	r30, Y+1	; 0x01
    2576:	fa 81       	ldd	r31, Y+2	; 0x02
    2578:	80 81       	ld	r24, Z
    257a:	82 95       	swap	r24
    257c:	8f 70       	andi	r24, 0x0F	; 15
    257e:	83 70       	andi	r24, 0x03	; 3
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3c 83       	std	Y+4, r19	; 0x04
    2586:	2b 83       	std	Y+3, r18	; 0x03
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <Timer0_init+0x296>
    2592:	4b c0       	rjmp	.+150    	; 0x262a <Timer0_init+0x32c>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	22 30       	cpi	r18, 0x02	; 2
    259a:	31 05       	cpc	r19, r1
    259c:	2c f4       	brge	.+10     	; 0x25a8 <Timer0_init+0x2aa>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	61 f0       	breq	.+24     	; 0x25be <Timer0_init+0x2c0>
    25a6:	41 c0       	rjmp	.+130    	; 0x262a <Timer0_init+0x32c>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	a9 f0       	breq	.+42     	; 0x25dc <Timer0_init+0x2de>
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	91 05       	cpc	r25, r1
    25ba:	21 f1       	breq	.+72     	; 0x2604 <Timer0_init+0x306>
    25bc:	36 c0       	rjmp	.+108    	; 0x262a <Timer0_init+0x32c>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR0, COM01);
    25be:	a3 e5       	ldi	r26, 0x53	; 83
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e3 e5       	ldi	r30, 0x53	; 83
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7d       	andi	r24, 0xDF	; 223
    25ca:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    25cc:	a3 e5       	ldi	r26, 0x53	; 83
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e3 e5       	ldi	r30, 0x53	; 83
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	8f 7e       	andi	r24, 0xEF	; 239
    25d8:	8c 93       	st	X, r24
    25da:	27 c0       	rjmp	.+78     	; 0x262a <Timer0_init+0x32c>
			break;
			case TOGGLE_OC:
			break;
			case CLEAR_OC:
				SET_BIT(TCCR0, COM01);
    25dc:	a3 e5       	ldi	r26, 0x53	; 83
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e3 e5       	ldi	r30, 0x53	; 83
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 62       	ori	r24, 0x20	; 32
    25e8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    25ea:	a3 e5       	ldi	r26, 0x53	; 83
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e3 e5       	ldi	r30, 0x53	; 83
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 7e       	andi	r24, 0xEF	; 239
    25f6:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	63 e0       	ldi	r22, 0x03	; 3
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    2602:	13 c0       	rjmp	.+38     	; 0x262a <Timer0_init+0x32c>
			break;
			case SET_OC:
				SET_BIT(TCCR0, COM01);
    2604:	a3 e5       	ldi	r26, 0x53	; 83
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e3 e5       	ldi	r30, 0x53	; 83
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	80 62       	ori	r24, 0x20	; 32
    2610:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    2612:	a3 e5       	ldi	r26, 0x53	; 83
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e3 e5       	ldi	r30, 0x53	; 83
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	80 61       	ori	r24, 0x10	; 16
    261e:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	63 e0       	ldi	r22, 0x03	; 3
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
			break;
		}
	}
}
    262a:	2d 96       	adiw	r28, 0x0d	; 13
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <Timer0_setCallBack>:
 * 		for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_setCallBack(void (*Ptr2Function)(void))
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <Timer0_setCallBack+0x6>
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
	g_timer0CallBack_Ptr = Ptr2Function;
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	90 93 7a 00 	sts	0x007A, r25
    2652:	80 93 79 00 	sts	0x0079, r24
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <Timer0_start>:
 * [In] start				: Indicates start value.
 * [In] compareValue		: Indicates compare value.
 * [Return]					: Void.
 */
void Timer0_start(TIMER01_PRESCALER prescaler, uint8 start, uint8 compareValue)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <Timer0_start+0x6>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	6a 83       	std	Y+2, r22	; 0x02
    2670:	4b 83       	std	Y+3, r20	; 0x03
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	87 70       	andi	r24, 0x07	; 7
    2676:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = start; /* Set timer starting value */
    2678:	e2 e5       	ldi	r30, 0x52	; 82
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	80 83       	st	Z, r24
	OCR0 = compareValue; /* Set timer compare value */
    2680:	ec e5       	ldi	r30, 0x5C	; 92
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	80 83       	st	Z, r24
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR0, 0xF8, prescaler);
    2688:	a3 e5       	ldi	r26, 0x53	; 83
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e3 e5       	ldi	r30, 0x53	; 83
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	98 2f       	mov	r25, r24
    2694:	98 7f       	andi	r25, 0xF8	; 248
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	89 2b       	or	r24, r25
    269a:	8c 93       	st	X, r24
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <Timer0_stop>:
 * 		Function that stops timer0 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_stop(void)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR0, 0xF8, 0x00); /* Clear pre-scaler */
    26b0:	a3 e5       	ldi	r26, 0x53	; 83
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e3 e5       	ldi	r30, 0x53	; 83
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	88 7f       	andi	r24, 0xF8	; 248
    26bc:	8c 93       	st	X, r24
}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <Timer0_deInit>:
 * 		Function that clears all timer0 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_deInit(void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <Timer0_deInit+0x6>
    26ca:	0f 92       	push	r0
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
	/* Clear timer0 registers */
	CLEAR_REG(TCCR0);
    26d0:	e3 e5       	ldi	r30, 0x53	; 83
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	e3 e5       	ldi	r30, 0x53	; 83
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	10 82       	st	Z, r1
	CLEAR_REG(TCNT0);
    26dc:	e2 e5       	ldi	r30, 0x52	; 82
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	e2 e5       	ldi	r30, 0x52	; 82
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	10 82       	st	Z, r1
	CLEAR_REG(OCR0);
    26e8:	ec e5       	ldi	r30, 0x5C	; 92
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	ec e5       	ldi	r30, 0x5C	; 92
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	10 82       	st	Z, r1
	/* Disable timer0 interrupts */
	CLEAR_BIT(TIMSK, OCIE0);
    26f4:	a9 e5       	ldi	r26, 0x59	; 89
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e9 e5       	ldi	r30, 0x59	; 89
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	8d 7f       	andi	r24, 0xFD	; 253
    2700:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE0);
    2702:	a9 e5       	ldi	r26, 0x59	; 89
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e9 e5       	ldi	r30, 0x59	; 89
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8e 7f       	andi	r24, 0xFE	; 254
    270e:	8c 93       	st	X, r24
	/* Clear timer0 flags */
	SET_BIT(TIFR, OCF0);
    2710:	a8 e5       	ldi	r26, 0x58	; 88
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e8 e5       	ldi	r30, 0x58	; 88
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	82 60       	ori	r24, 0x02	; 2
    271c:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV0);
    271e:	a8 e5       	ldi	r26, 0x58	; 88
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e8 e5       	ldi	r30, 0x58	; 88
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	81 60       	ori	r24, 0x01	; 1
    272a:	8c 93       	st	X, r24
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <Timer1_init>:
#endif

#if (TIMER1_ENABLE == TRUE)

void Timer1_init(const Timer_initConfig *timerConfig)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	2e 97       	sbiw	r28, 0x0e	; 14
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR1A);
    2750:	ef e4       	ldi	r30, 0x4F	; 79
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	20 81       	ld	r18, Z
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	30 81       	ld	r19, Z
    2762:	ee e4       	ldi	r30, 0x4E	; 78
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	80 81       	ld	r24, Z
    276e:	8f 70       	andi	r24, 0x0F	; 15
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	3c 87       	std	Y+12, r19	; 0x0c
    2776:	2b 87       	std	Y+11, r18	; 0x0b
    2778:	8b 85       	ldd	r24, Y+11	; 0x0b
    277a:	9c 85       	ldd	r25, Y+12	; 0x0c
    277c:	87 30       	cpi	r24, 0x07	; 7
    277e:	91 05       	cpc	r25, r1
    2780:	09 f4       	brne	.+2      	; 0x2784 <Timer1_init+0x4c>
    2782:	40 c1       	rjmp	.+640    	; 0x2a04 <Timer1_init+0x2cc>
    2784:	2b 85       	ldd	r18, Y+11	; 0x0b
    2786:	3c 85       	ldd	r19, Y+12	; 0x0c
    2788:	28 30       	cpi	r18, 0x08	; 8
    278a:	31 05       	cpc	r19, r1
    278c:	4c f5       	brge	.+82     	; 0x27e0 <Timer1_init+0xa8>
    278e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2790:	9c 85       	ldd	r25, Y+12	; 0x0c
    2792:	83 30       	cpi	r24, 0x03	; 3
    2794:	91 05       	cpc	r25, r1
    2796:	09 f4       	brne	.+2      	; 0x279a <Timer1_init+0x62>
    2798:	b3 c0       	rjmp	.+358    	; 0x2900 <Timer1_init+0x1c8>
    279a:	2b 85       	ldd	r18, Y+11	; 0x0b
    279c:	3c 85       	ldd	r19, Y+12	; 0x0c
    279e:	24 30       	cpi	r18, 0x04	; 4
    27a0:	31 05       	cpc	r19, r1
    27a2:	8c f4       	brge	.+34     	; 0x27c6 <Timer1_init+0x8e>
    27a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	91 05       	cpc	r25, r1
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <Timer1_init+0x78>
    27ae:	6e c0       	rjmp	.+220    	; 0x288c <Timer1_init+0x154>
    27b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    27b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    27b4:	22 30       	cpi	r18, 0x02	; 2
    27b6:	31 05       	cpc	r19, r1
    27b8:	0c f0       	brlt	.+2      	; 0x27bc <Timer1_init+0x84>
    27ba:	85 c0       	rjmp	.+266    	; 0x28c6 <Timer1_init+0x18e>
    27bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27be:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	c9 f1       	breq	.+114    	; 0x2836 <Timer1_init+0xfe>
    27c4:	14 c2       	rjmp	.+1064   	; 0x2bee <Timer1_init+0x4b6>
    27c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    27c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    27ca:	25 30       	cpi	r18, 0x05	; 5
    27cc:	31 05       	cpc	r19, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <Timer1_init+0x9a>
    27d0:	df c0       	rjmp	.+446    	; 0x2990 <Timer1_init+0x258>
    27d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    27d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    27d6:	86 30       	cpi	r24, 0x06	; 6
    27d8:	91 05       	cpc	r25, r1
    27da:	0c f0       	brlt	.+2      	; 0x27de <Timer1_init+0xa6>
    27dc:	f6 c0       	rjmp	.+492    	; 0x29ca <Timer1_init+0x292>
    27de:	ad c0       	rjmp	.+346    	; 0x293a <Timer1_init+0x202>
    27e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    27e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    27e4:	2b 30       	cpi	r18, 0x0B	; 11
    27e6:	31 05       	cpc	r19, r1
    27e8:	09 f4       	brne	.+2      	; 0x27ec <Timer1_init+0xb4>
    27ea:	80 c1       	rjmp	.+768    	; 0x2aec <Timer1_init+0x3b4>
    27ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    27f0:	8c 30       	cpi	r24, 0x0C	; 12
    27f2:	91 05       	cpc	r25, r1
    27f4:	6c f4       	brge	.+26     	; 0x2810 <Timer1_init+0xd8>
    27f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    27f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    27fa:	29 30       	cpi	r18, 0x09	; 9
    27fc:	31 05       	cpc	r19, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <Timer1_init+0xca>
    2800:	3b c1       	rjmp	.+630    	; 0x2a78 <Timer1_init+0x340>
    2802:	8b 85       	ldd	r24, Y+11	; 0x0b
    2804:	9c 85       	ldd	r25, Y+12	; 0x0c
    2806:	8a 30       	cpi	r24, 0x0A	; 10
    2808:	91 05       	cpc	r25, r1
    280a:	0c f0       	brlt	.+2      	; 0x280e <Timer1_init+0xd6>
    280c:	52 c1       	rjmp	.+676    	; 0x2ab2 <Timer1_init+0x37a>
    280e:	17 c1       	rjmp	.+558    	; 0x2a3e <Timer1_init+0x306>
    2810:	2b 85       	ldd	r18, Y+11	; 0x0b
    2812:	3c 85       	ldd	r19, Y+12	; 0x0c
    2814:	2e 30       	cpi	r18, 0x0E	; 14
    2816:	31 05       	cpc	r19, r1
    2818:	09 f4       	brne	.+2      	; 0x281c <Timer1_init+0xe4>
    281a:	b0 c1       	rjmp	.+864    	; 0x2b7c <Timer1_init+0x444>
    281c:	8b 85       	ldd	r24, Y+11	; 0x0b
    281e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2820:	8f 30       	cpi	r24, 0x0F	; 15
    2822:	91 05       	cpc	r25, r1
    2824:	09 f4       	brne	.+2      	; 0x2828 <Timer1_init+0xf0>
    2826:	c7 c1       	rjmp	.+910    	; 0x2bb6 <Timer1_init+0x47e>
    2828:	2b 85       	ldd	r18, Y+11	; 0x0b
    282a:	3c 85       	ldd	r19, Y+12	; 0x0c
    282c:	2c 30       	cpi	r18, 0x0C	; 12
    282e:	31 05       	cpc	r19, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <Timer1_init+0xfc>
    2832:	79 c1       	rjmp	.+754    	; 0x2b26 <Timer1_init+0x3ee>
    2834:	dc c1       	rjmp	.+952    	; 0x2bee <Timer1_init+0x4b6>
	{
		case TIMER16BIT_NORMAL:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    2836:	af e4       	ldi	r26, 0x4F	; 79
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ef e4       	ldi	r30, 0x4F	; 79
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	88 60       	ori	r24, 0x08	; 8
    2842:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    2844:	af e4       	ldi	r26, 0x4F	; 79
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	ef e4       	ldi	r30, 0x4F	; 79
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	84 60       	ori	r24, 0x04	; 4
    2850:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    2852:	ae e4       	ldi	r26, 0x4E	; 78
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ee e4       	ldi	r30, 0x4E	; 78
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	8f 7e       	andi	r24, 0xEF	; 239
    285e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2860:	ae e4       	ldi	r26, 0x4E	; 78
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	ee e4       	ldi	r30, 0x4E	; 78
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	87 7f       	andi	r24, 0xF7	; 247
    286c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    286e:	af e4       	ldi	r26, 0x4F	; 79
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ef e4       	ldi	r30, 0x4F	; 79
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8d 7f       	andi	r24, 0xFD	; 253
    287a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    287c:	af e4       	ldi	r26, 0x4F	; 79
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ef e4       	ldi	r30, 0x4F	; 79
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8e 7f       	andi	r24, 0xFE	; 254
    2888:	8c 93       	st	X, r24
    288a:	b1 c1       	rjmp	.+866    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    288c:	ae e4       	ldi	r26, 0x4E	; 78
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	ee e4       	ldi	r30, 0x4E	; 78
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	8f 7e       	andi	r24, 0xEF	; 239
    2898:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    289a:	ae e4       	ldi	r26, 0x4E	; 78
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	ee e4       	ldi	r30, 0x4E	; 78
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	87 7f       	andi	r24, 0xF7	; 247
    28a6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    28a8:	af e4       	ldi	r26, 0x4F	; 79
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ef e4       	ldi	r30, 0x4F	; 79
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	8d 7f       	andi	r24, 0xFD	; 253
    28b4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    28b6:	af e4       	ldi	r26, 0x4F	; 79
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ef e4       	ldi	r30, 0x4F	; 79
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	81 60       	ori	r24, 0x01	; 1
    28c2:	8c 93       	st	X, r24
    28c4:	94 c1       	rjmp	.+808    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    28c6:	ae e4       	ldi	r26, 0x4E	; 78
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	ee e4       	ldi	r30, 0x4E	; 78
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8f 7e       	andi	r24, 0xEF	; 239
    28d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    28d4:	ae e4       	ldi	r26, 0x4E	; 78
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	ee e4       	ldi	r30, 0x4E	; 78
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	87 7f       	andi	r24, 0xF7	; 247
    28e0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    28e2:	af e4       	ldi	r26, 0x4F	; 79
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	ef e4       	ldi	r30, 0x4F	; 79
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	82 60       	ori	r24, 0x02	; 2
    28ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    28f0:	af e4       	ldi	r26, 0x4F	; 79
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	ef e4       	ldi	r30, 0x4F	; 79
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8e 7f       	andi	r24, 0xFE	; 254
    28fc:	8c 93       	st	X, r24
    28fe:	77 c1       	rjmp	.+750    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    2900:	ae e4       	ldi	r26, 0x4E	; 78
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ee e4       	ldi	r30, 0x4E	; 78
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	8f 7e       	andi	r24, 0xEF	; 239
    290c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	87 7f       	andi	r24, 0xF7	; 247
    291a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    291c:	af e4       	ldi	r26, 0x4F	; 79
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ef e4       	ldi	r30, 0x4F	; 79
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	82 60       	ori	r24, 0x02	; 2
    2928:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    292a:	af e4       	ldi	r26, 0x4F	; 79
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ef e4       	ldi	r30, 0x4F	; 79
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	81 60       	ori	r24, 0x01	; 1
    2936:	8c 93       	st	X, r24
    2938:	5a c1       	rjmp	.+692    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_OCR1A:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    293a:	af e4       	ldi	r26, 0x4F	; 79
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	ef e4       	ldi	r30, 0x4F	; 79
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 60       	ori	r24, 0x08	; 8
    2946:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    2948:	af e4       	ldi	r26, 0x4F	; 79
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	ef e4       	ldi	r30, 0x4F	; 79
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	84 60       	ori	r24, 0x04	; 4
    2954:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    2956:	ae e4       	ldi	r26, 0x4E	; 78
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	ee e4       	ldi	r30, 0x4E	; 78
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	8f 7e       	andi	r24, 0xEF	; 239
    2962:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2964:	ae e4       	ldi	r26, 0x4E	; 78
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	ee e4       	ldi	r30, 0x4E	; 78
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	88 60       	ori	r24, 0x08	; 8
    2970:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    2972:	af e4       	ldi	r26, 0x4F	; 79
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	ef e4       	ldi	r30, 0x4F	; 79
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	8d 7f       	andi	r24, 0xFD	; 253
    297e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2980:	af e4       	ldi	r26, 0x4F	; 79
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	ef e4       	ldi	r30, 0x4F	; 79
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	8e 7f       	andi	r24, 0xFE	; 254
    298c:	8c 93       	st	X, r24
    298e:	2f c1       	rjmp	.+606    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    2990:	ae e4       	ldi	r26, 0x4E	; 78
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ee e4       	ldi	r30, 0x4E	; 78
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	8f 7e       	andi	r24, 0xEF	; 239
    299c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    299e:	ae e4       	ldi	r26, 0x4E	; 78
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	ee e4       	ldi	r30, 0x4E	; 78
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	88 60       	ori	r24, 0x08	; 8
    29aa:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    29ac:	af e4       	ldi	r26, 0x4F	; 79
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	ef e4       	ldi	r30, 0x4F	; 79
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8d 7f       	andi	r24, 0xFD	; 253
    29b8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    29ba:	af e4       	ldi	r26, 0x4F	; 79
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	ef e4       	ldi	r30, 0x4F	; 79
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	81 60       	ori	r24, 0x01	; 1
    29c6:	8c 93       	st	X, r24
    29c8:	12 c1       	rjmp	.+548    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    29ca:	ae e4       	ldi	r26, 0x4E	; 78
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	ee e4       	ldi	r30, 0x4E	; 78
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 7e       	andi	r24, 0xEF	; 239
    29d6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    29d8:	ae e4       	ldi	r26, 0x4E	; 78
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	ee e4       	ldi	r30, 0x4E	; 78
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	88 60       	ori	r24, 0x08	; 8
    29e4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    29e6:	af e4       	ldi	r26, 0x4F	; 79
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	ef e4       	ldi	r30, 0x4F	; 79
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	82 60       	ori	r24, 0x02	; 2
    29f2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    29f4:	af e4       	ldi	r26, 0x4F	; 79
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	ef e4       	ldi	r30, 0x4F	; 79
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	8e 7f       	andi	r24, 0xFE	; 254
    2a00:	8c 93       	st	X, r24
    2a02:	f5 c0       	rjmp	.+490    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    2a04:	ae e4       	ldi	r26, 0x4E	; 78
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ee e4       	ldi	r30, 0x4E	; 78
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8f 7e       	andi	r24, 0xEF	; 239
    2a10:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2a12:	ae e4       	ldi	r26, 0x4E	; 78
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	ee e4       	ldi	r30, 0x4E	; 78
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 60       	ori	r24, 0x08	; 8
    2a1e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2a20:	af e4       	ldi	r26, 0x4F	; 79
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	ef e4       	ldi	r30, 0x4F	; 79
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	82 60       	ori	r24, 0x02	; 2
    2a2c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    2a2e:	af e4       	ldi	r26, 0x4F	; 79
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ef e4       	ldi	r30, 0x4F	; 79
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	81 60       	ori	r24, 0x01	; 1
    2a3a:	8c 93       	st	X, r24
    2a3c:	d8 c0       	rjmp	.+432    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    2a3e:	ae e4       	ldi	r26, 0x4E	; 78
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	ee e4       	ldi	r30, 0x4E	; 78
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	80 61       	ori	r24, 0x10	; 16
    2a4a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2a4c:	ae e4       	ldi	r26, 0x4E	; 78
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	ee e4       	ldi	r30, 0x4E	; 78
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	87 7f       	andi	r24, 0xF7	; 247
    2a58:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    2a5a:	af e4       	ldi	r26, 0x4F	; 79
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	ef e4       	ldi	r30, 0x4F	; 79
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	8d 7f       	andi	r24, 0xFD	; 253
    2a66:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2a68:	af e4       	ldi	r26, 0x4F	; 79
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	ef e4       	ldi	r30, 0x4F	; 79
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8e 7f       	andi	r24, 0xFE	; 254
    2a74:	8c 93       	st	X, r24
    2a76:	bb c0       	rjmp	.+374    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    2a78:	ae e4       	ldi	r26, 0x4E	; 78
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	ee e4       	ldi	r30, 0x4E	; 78
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	80 61       	ori	r24, 0x10	; 16
    2a84:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2a86:	ae e4       	ldi	r26, 0x4E	; 78
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	ee e4       	ldi	r30, 0x4E	; 78
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	87 7f       	andi	r24, 0xF7	; 247
    2a92:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    2a94:	af e4       	ldi	r26, 0x4F	; 79
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	ef e4       	ldi	r30, 0x4F	; 79
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8d 7f       	andi	r24, 0xFD	; 253
    2aa0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    2aa2:	af e4       	ldi	r26, 0x4F	; 79
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	ef e4       	ldi	r30, 0x4F	; 79
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	81 60       	ori	r24, 0x01	; 1
    2aae:	8c 93       	st	X, r24
    2ab0:	9e c0       	rjmp	.+316    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    2ab2:	ae e4       	ldi	r26, 0x4E	; 78
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ee e4       	ldi	r30, 0x4E	; 78
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	80 61       	ori	r24, 0x10	; 16
    2abe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2ac0:	ae e4       	ldi	r26, 0x4E	; 78
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ee e4       	ldi	r30, 0x4E	; 78
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	87 7f       	andi	r24, 0xF7	; 247
    2acc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2ace:	af e4       	ldi	r26, 0x4F	; 79
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ef e4       	ldi	r30, 0x4F	; 79
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	82 60       	ori	r24, 0x02	; 2
    2ada:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2adc:	af e4       	ldi	r26, 0x4F	; 79
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ef e4       	ldi	r30, 0x4F	; 79
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	8e 7f       	andi	r24, 0xFE	; 254
    2ae8:	8c 93       	st	X, r24
    2aea:	81 c0       	rjmp	.+258    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    2aec:	ae e4       	ldi	r26, 0x4E	; 78
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ee e4       	ldi	r30, 0x4E	; 78
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	80 61       	ori	r24, 0x10	; 16
    2af8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2afa:	ae e4       	ldi	r26, 0x4E	; 78
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	ee e4       	ldi	r30, 0x4E	; 78
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	87 7f       	andi	r24, 0xF7	; 247
    2b06:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2b08:	af e4       	ldi	r26, 0x4F	; 79
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	ef e4       	ldi	r30, 0x4F	; 79
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	82 60       	ori	r24, 0x02	; 2
    2b14:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    2b16:	af e4       	ldi	r26, 0x4F	; 79
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	ef e4       	ldi	r30, 0x4F	; 79
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	81 60       	ori	r24, 0x01	; 1
    2b22:	8c 93       	st	X, r24
    2b24:	64 c0       	rjmp	.+200    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_ICR1:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    2b26:	af e4       	ldi	r26, 0x4F	; 79
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	ef e4       	ldi	r30, 0x4F	; 79
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 60       	ori	r24, 0x08	; 8
    2b32:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    2b34:	af e4       	ldi	r26, 0x4F	; 79
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	ef e4       	ldi	r30, 0x4F	; 79
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	84 60       	ori	r24, 0x04	; 4
    2b40:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2b42:	ae e4       	ldi	r26, 0x4E	; 78
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ee e4       	ldi	r30, 0x4E	; 78
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 61       	ori	r24, 0x10	; 16
    2b4e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2b50:	ae e4       	ldi	r26, 0x4E	; 78
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	ee e4       	ldi	r30, 0x4E	; 78
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	88 60       	ori	r24, 0x08	; 8
    2b5c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    2b5e:	af e4       	ldi	r26, 0x4F	; 79
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	ef e4       	ldi	r30, 0x4F	; 79
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	8d 7f       	andi	r24, 0xFD	; 253
    2b6a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2b6c:	af e4       	ldi	r26, 0x4F	; 79
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	ef e4       	ldi	r30, 0x4F	; 79
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8e 7f       	andi	r24, 0xFE	; 254
    2b78:	8c 93       	st	X, r24
    2b7a:	39 c0       	rjmp	.+114    	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    2b7c:	ae e4       	ldi	r26, 0x4E	; 78
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	ee e4       	ldi	r30, 0x4E	; 78
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	80 61       	ori	r24, 0x10	; 16
    2b88:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2b8a:	ae e4       	ldi	r26, 0x4E	; 78
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ee e4       	ldi	r30, 0x4E	; 78
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	88 60       	ori	r24, 0x08	; 8
    2b96:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2b98:	af e4       	ldi	r26, 0x4F	; 79
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	ef e4       	ldi	r30, 0x4F	; 79
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	82 60       	ori	r24, 0x02	; 2
    2ba4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    2ba6:	af e4       	ldi	r26, 0x4F	; 79
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	ef e4       	ldi	r30, 0x4F	; 79
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	8e 7f       	andi	r24, 0xFE	; 254
    2bb2:	8c 93       	st	X, r24
    2bb4:	1c c0       	rjmp	.+56     	; 0x2bee <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    2bb6:	ae e4       	ldi	r26, 0x4E	; 78
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ee e4       	ldi	r30, 0x4E	; 78
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	80 61       	ori	r24, 0x10	; 16
    2bc2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2bc4:	ae e4       	ldi	r26, 0x4E	; 78
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	ee e4       	ldi	r30, 0x4E	; 78
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	88 60       	ori	r24, 0x08	; 8
    2bd0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2bd2:	af e4       	ldi	r26, 0x4F	; 79
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	ef e4       	ldi	r30, 0x4F	; 79
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	82 60       	ori	r24, 0x02	; 2
    2bde:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    2be0:	af e4       	ldi	r26, 0x4F	; 79
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ef e4       	ldi	r30, 0x4F	; 79
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	81 60       	ori	r24, 0x01	; 1
    2bec:	8c 93       	st	X, r24
		break;
	}
	if (((*timerConfig).mode == TIMER16BIT_CTC_OCR1A)
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8f 70       	andi	r24, 0x0F	; 15
    2bf6:	84 30       	cpi	r24, 0x04	; 4
    2bf8:	39 f0       	breq	.+14     	; 0x2c08 <Timer1_init+0x4d0>
    2bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfe:	80 81       	ld	r24, Z
    2c00:	8f 70       	andi	r24, 0x0F	; 15
    2c02:	8c 30       	cpi	r24, 0x0C	; 12
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <Timer1_init+0x4d0>
    2c06:	f8 c0       	rjmp	.+496    	; 0x2df8 <Timer1_init+0x6c0>
			|| ((*timerConfig).mode == TIMER16BIT_CTC_ICR1))
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	80 81       	ld	r24, Z
    2c0e:	82 95       	swap	r24
    2c10:	86 95       	lsr	r24
    2c12:	86 95       	lsr	r24
    2c14:	83 70       	andi	r24, 0x03	; 3
    2c16:	81 70       	andi	r24, 0x01	; 1
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	3a 87       	std	Y+10, r19	; 0x0a
    2c1e:	29 87       	std	Y+9, r18	; 0x09
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	d9 f0       	breq	.+54     	; 0x2c5e <Timer1_init+0x526>
    2c28:	29 85       	ldd	r18, Y+9	; 0x09
    2c2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c2c:	21 30       	cpi	r18, 0x01	; 1
    2c2e:	31 05       	cpc	r19, r1
    2c30:	59 f5       	brne	.+86     	; 0x2c88 <Timer1_init+0x550>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE1A);
    2c32:	a9 e5       	ldi	r26, 0x59	; 89
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 e5       	ldi	r30, 0x59	; 89
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 61       	ori	r24, 0x10	; 16
    2c3e:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B);
    2c40:	a9 e5       	ldi	r26, 0x59	; 89
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e9 e5       	ldi	r30, 0x59	; 89
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 60       	ori	r24, 0x08	; 8
    2c4c:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    2c4e:	a9 e5       	ldi	r26, 0x59	; 89
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e9 e5       	ldi	r30, 0x59	; 89
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	8b 7f       	andi	r24, 0xFB	; 251
    2c5a:	8c 93       	st	X, r24
    2c5c:	15 c0       	rjmp	.+42     	; 0x2c88 <Timer1_init+0x550>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    2c5e:	a9 e5       	ldi	r26, 0x59	; 89
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e9 e5       	ldi	r30, 0x59	; 89
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	8f 7e       	andi	r24, 0xEF	; 239
    2c6a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    2c6c:	a9 e5       	ldi	r26, 0x59	; 89
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e9 e5       	ldi	r30, 0x59	; 89
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	87 7f       	andi	r24, 0xF7	; 247
    2c78:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    2c7a:	a9 e5       	ldi	r26, 0x59	; 89
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e9 e5       	ldi	r30, 0x59	; 89
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	8b 7f       	andi	r24, 0xFB	; 251
    2c86:	8c 93       	st	X, r24
			break;
		}
		/* Select compare mode */
		switch ((*timerConfig).compareOutputMode)
    2c88:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8c:	80 81       	ld	r24, Z
    2c8e:	82 95       	swap	r24
    2c90:	8f 70       	andi	r24, 0x0F	; 15
    2c92:	83 70       	andi	r24, 0x03	; 3
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	38 87       	std	Y+8, r19	; 0x08
    2c9a:	2f 83       	std	Y+7, r18	; 0x07
    2c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c9e:	98 85       	ldd	r25, Y+8	; 0x08
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	a1 f1       	breq	.+104    	; 0x2d0e <Timer1_init+0x5d6>
    2ca6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ca8:	38 85       	ldd	r19, Y+8	; 0x08
    2caa:	22 30       	cpi	r18, 0x02	; 2
    2cac:	31 05       	cpc	r19, r1
    2cae:	2c f4       	brge	.+10     	; 0x2cba <Timer1_init+0x582>
    2cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb2:	98 85       	ldd	r25, Y+8	; 0x08
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	71 f0       	breq	.+28     	; 0x2cd4 <Timer1_init+0x59c>
    2cb8:	a3 c1       	rjmp	.+838    	; 0x3000 <Timer1_init+0x8c8>
    2cba:	2f 81       	ldd	r18, Y+7	; 0x07
    2cbc:	38 85       	ldd	r19, Y+8	; 0x08
    2cbe:	22 30       	cpi	r18, 0x02	; 2
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <Timer1_init+0x58e>
    2cc4:	4b c0       	rjmp	.+150    	; 0x2d5c <Timer1_init+0x624>
    2cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc8:	98 85       	ldd	r25, Y+8	; 0x08
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	91 05       	cpc	r25, r1
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <Timer1_init+0x59a>
    2cd0:	6c c0       	rjmp	.+216    	; 0x2daa <Timer1_init+0x672>
    2cd2:	96 c1       	rjmp	.+812    	; 0x3000 <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2cd4:	af e4       	ldi	r26, 0x4F	; 79
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	ef e4       	ldi	r30, 0x4F	; 79
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	8f 77       	andi	r24, 0x7F	; 127
    2ce0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2ce2:	af e4       	ldi	r26, 0x4F	; 79
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ef e4       	ldi	r30, 0x4F	; 79
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8f 7d       	andi	r24, 0xDF	; 223
    2cee:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2cf0:	af e4       	ldi	r26, 0x4F	; 79
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ef e4       	ldi	r30, 0x4F	; 79
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8f 7b       	andi	r24, 0xBF	; 191
    2cfc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2cfe:	af e4       	ldi	r26, 0x4F	; 79
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	ef e4       	ldi	r30, 0x4F	; 79
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	8f 7e       	andi	r24, 0xEF	; 239
    2d0a:	8c 93       	st	X, r24
    2d0c:	79 c1       	rjmp	.+754    	; 0x3000 <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2d0e:	af e4       	ldi	r26, 0x4F	; 79
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ef e4       	ldi	r30, 0x4F	; 79
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8f 77       	andi	r24, 0x7F	; 127
    2d1a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2d1c:	af e4       	ldi	r26, 0x4F	; 79
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	ef e4       	ldi	r30, 0x4F	; 79
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	8f 7d       	andi	r24, 0xDF	; 223
    2d28:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2d2a:	af e4       	ldi	r26, 0x4F	; 79
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ef e4       	ldi	r30, 0x4F	; 79
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 64       	ori	r24, 0x40	; 64
    2d36:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2d38:	af e4       	ldi	r26, 0x4F	; 79
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	ef e4       	ldi	r30, 0x4F	; 79
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	80 61       	ori	r24, 0x10	; 16
    2d44:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	64 e0       	ldi	r22, 0x04	; 4
    2d4a:	41 e0       	ldi	r20, 0x01	; 1
    2d4c:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	65 e0       	ldi	r22, 0x05	; 5
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    2d5a:	52 c1       	rjmp	.+676    	; 0x3000 <Timer1_init+0x8c8>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    2d5c:	af e4       	ldi	r26, 0x4F	; 79
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	ef e4       	ldi	r30, 0x4F	; 79
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	80 68       	ori	r24, 0x80	; 128
    2d68:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2d6a:	af e4       	ldi	r26, 0x4F	; 79
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	ef e4       	ldi	r30, 0x4F	; 79
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	80 62       	ori	r24, 0x20	; 32
    2d76:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2d78:	af e4       	ldi	r26, 0x4F	; 79
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	ef e4       	ldi	r30, 0x4F	; 79
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	8f 7b       	andi	r24, 0xBF	; 191
    2d84:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2d86:	af e4       	ldi	r26, 0x4F	; 79
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	ef e4       	ldi	r30, 0x4F	; 79
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	8f 7e       	andi	r24, 0xEF	; 239
    2d92:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2d94:	83 e0       	ldi	r24, 0x03	; 3
    2d96:	64 e0       	ldi	r22, 0x04	; 4
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	65 e0       	ldi	r22, 0x05	; 5
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    2da8:	2b c1       	rjmp	.+598    	; 0x3000 <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    2daa:	af e4       	ldi	r26, 0x4F	; 79
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	ef e4       	ldi	r30, 0x4F	; 79
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	80 68       	ori	r24, 0x80	; 128
    2db6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2db8:	af e4       	ldi	r26, 0x4F	; 79
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	ef e4       	ldi	r30, 0x4F	; 79
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 62       	ori	r24, 0x20	; 32
    2dc4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2dc6:	af e4       	ldi	r26, 0x4F	; 79
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	ef e4       	ldi	r30, 0x4F	; 79
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	80 64       	ori	r24, 0x40	; 64
    2dd2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2dd4:	af e4       	ldi	r26, 0x4F	; 79
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	ef e4       	ldi	r30, 0x4F	; 79
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	80 61       	ori	r24, 0x10	; 16
    2de0:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2de2:	83 e0       	ldi	r24, 0x03	; 3
    2de4:	64 e0       	ldi	r22, 0x04	; 4
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2dec:	83 e0       	ldi	r24, 0x03	; 3
    2dee:	65 e0       	ldi	r22, 0x05	; 5
    2df0:	41 e0       	ldi	r20, 0x01	; 1
    2df2:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    2df6:	04 c1       	rjmp	.+520    	; 0x3000 <Timer1_init+0x8c8>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    2df8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfc:	80 81       	ld	r24, Z
    2dfe:	82 95       	swap	r24
    2e00:	86 95       	lsr	r24
    2e02:	86 95       	lsr	r24
    2e04:	83 70       	andi	r24, 0x03	; 3
    2e06:	81 70       	andi	r24, 0x01	; 1
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	3e 83       	std	Y+6, r19	; 0x06
    2e0e:	2d 83       	std	Y+5, r18	; 0x05
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	d9 f0       	breq	.+54     	; 0x2e4e <Timer1_init+0x716>
    2e18:	2d 81       	ldd	r18, Y+5	; 0x05
    2e1a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e1c:	21 30       	cpi	r18, 0x01	; 1
    2e1e:	31 05       	cpc	r19, r1
    2e20:	59 f5       	brne	.+86     	; 0x2e78 <Timer1_init+0x740>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE1A);
    2e22:	a9 e5       	ldi	r26, 0x59	; 89
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e9 e5       	ldi	r30, 0x59	; 89
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	8f 7e       	andi	r24, 0xEF	; 239
    2e2e:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    2e30:	a9 e5       	ldi	r26, 0x59	; 89
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e9 e5       	ldi	r30, 0x59	; 89
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	87 7f       	andi	r24, 0xF7	; 247
    2e3c:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE1);
    2e3e:	a9 e5       	ldi	r26, 0x59	; 89
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e9 e5       	ldi	r30, 0x59	; 89
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	84 60       	ori	r24, 0x04	; 4
    2e4a:	8c 93       	st	X, r24
    2e4c:	15 c0       	rjmp	.+42     	; 0x2e78 <Timer1_init+0x740>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    2e4e:	a9 e5       	ldi	r26, 0x59	; 89
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e9 e5       	ldi	r30, 0x59	; 89
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	8f 7e       	andi	r24, 0xEF	; 239
    2e5a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    2e5c:	a9 e5       	ldi	r26, 0x59	; 89
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e9 e5       	ldi	r30, 0x59	; 89
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	87 7f       	andi	r24, 0xF7	; 247
    2e68:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    2e6a:	a9 e5       	ldi	r26, 0x59	; 89
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e9 e5       	ldi	r30, 0x59	; 89
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	8b 7f       	andi	r24, 0xFB	; 251
    2e76:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    2e78:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7c:	80 81       	ld	r24, Z
    2e7e:	82 95       	swap	r24
    2e80:	8f 70       	andi	r24, 0x0F	; 15
    2e82:	83 70       	andi	r24, 0x03	; 3
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	3c 83       	std	Y+4, r19	; 0x04
    2e8a:	2b 83       	std	Y+3, r18	; 0x03
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	91 05       	cpc	r25, r1
    2e94:	a1 f1       	breq	.+104    	; 0x2efe <Timer1_init+0x7c6>
    2e96:	2b 81       	ldd	r18, Y+3	; 0x03
    2e98:	3c 81       	ldd	r19, Y+4	; 0x04
    2e9a:	22 30       	cpi	r18, 0x02	; 2
    2e9c:	31 05       	cpc	r19, r1
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <Timer1_init+0x772>
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	71 f0       	breq	.+28     	; 0x2ec4 <Timer1_init+0x78c>
    2ea8:	ab c0       	rjmp	.+342    	; 0x3000 <Timer1_init+0x8c8>
    2eaa:	2b 81       	ldd	r18, Y+3	; 0x03
    2eac:	3c 81       	ldd	r19, Y+4	; 0x04
    2eae:	22 30       	cpi	r18, 0x02	; 2
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <Timer1_init+0x77e>
    2eb4:	58 c0       	rjmp	.+176    	; 0x2f66 <Timer1_init+0x82e>
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	83 30       	cpi	r24, 0x03	; 3
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <Timer1_init+0x78a>
    2ec0:	79 c0       	rjmp	.+242    	; 0x2fb4 <Timer1_init+0x87c>
    2ec2:	9e c0       	rjmp	.+316    	; 0x3000 <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2ec4:	af e4       	ldi	r26, 0x4F	; 79
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	ef e4       	ldi	r30, 0x4F	; 79
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	8f 77       	andi	r24, 0x7F	; 127
    2ed0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2ed2:	af e4       	ldi	r26, 0x4F	; 79
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	ef e4       	ldi	r30, 0x4F	; 79
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	8f 7d       	andi	r24, 0xDF	; 223
    2ede:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2ee0:	af e4       	ldi	r26, 0x4F	; 79
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	ef e4       	ldi	r30, 0x4F	; 79
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	8f 7b       	andi	r24, 0xBF	; 191
    2eec:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2eee:	af e4       	ldi	r26, 0x4F	; 79
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	ef e4       	ldi	r30, 0x4F	; 79
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8f 7e       	andi	r24, 0xEF	; 239
    2efa:	8c 93       	st	X, r24
    2efc:	81 c0       	rjmp	.+258    	; 0x3000 <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    2efe:	af e4       	ldi	r26, 0x4F	; 79
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	ef e4       	ldi	r30, 0x4F	; 79
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	8f 77       	andi	r24, 0x7F	; 127
    2f0a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    2f0c:	af e4       	ldi	r26, 0x4F	; 79
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ef e4       	ldi	r30, 0x4F	; 79
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	8f 7d       	andi	r24, 0xDF	; 223
    2f18:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2f1a:	af e4       	ldi	r26, 0x4F	; 79
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	ef e4       	ldi	r30, 0x4F	; 79
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	80 64       	ori	r24, 0x40	; 64
    2f26:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2f28:	af e4       	ldi	r26, 0x4F	; 79
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	ef e4       	ldi	r30, 0x4F	; 79
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	80 61       	ori	r24, 0x10	; 16
    2f34:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2f36:	83 e0       	ldi	r24, 0x03	; 3
    2f38:	64 e0       	ldi	r22, 0x04	; 4
    2f3a:	41 e0       	ldi	r20, 0x01	; 1
    2f3c:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
				if ((*timerConfig).mode != TIMER16BIT_PHASE_FREQ_PWM_OCR1A
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 70       	andi	r24, 0x0F	; 15
    2f48:	89 30       	cpi	r24, 0x09	; 9
    2f4a:	39 f4       	brne	.+14     	; 0x2f5a <Timer1_init+0x822>
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	80 81       	ld	r24, Z
    2f52:	8f 70       	andi	r24, 0x0F	; 15
    2f54:	8f 30       	cpi	r24, 0x0F	; 15
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <Timer1_init+0x822>
    2f58:	53 c0       	rjmp	.+166    	; 0x3000 <Timer1_init+0x8c8>
						|| (*timerConfig).mode != TIMER16BIT_FAST_PWM_OCR1A)
				{
					GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2f5a:	83 e0       	ldi	r24, 0x03	; 3
    2f5c:	65 e0       	ldi	r22, 0x05	; 5
    2f5e:	41 e0       	ldi	r20, 0x01	; 1
    2f60:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    2f64:	4d c0       	rjmp	.+154    	; 0x3000 <Timer1_init+0x8c8>
				}
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    2f66:	af e4       	ldi	r26, 0x4F	; 79
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	ef e4       	ldi	r30, 0x4F	; 79
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	80 68       	ori	r24, 0x80	; 128
    2f72:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2f74:	af e4       	ldi	r26, 0x4F	; 79
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ef e4       	ldi	r30, 0x4F	; 79
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	80 62       	ori	r24, 0x20	; 32
    2f80:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    2f82:	af e4       	ldi	r26, 0x4F	; 79
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	ef e4       	ldi	r30, 0x4F	; 79
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8f 7b       	andi	r24, 0xBF	; 191
    2f8e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    2f90:	af e4       	ldi	r26, 0x4F	; 79
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	ef e4       	ldi	r30, 0x4F	; 79
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	8f 7e       	andi	r24, 0xEF	; 239
    2f9c:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	64 e0       	ldi	r22, 0x04	; 4
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	65 e0       	ldi	r22, 0x05	; 5
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
    2fb2:	26 c0       	rjmp	.+76     	; 0x3000 <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    2fb4:	af e4       	ldi	r26, 0x4F	; 79
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	ef e4       	ldi	r30, 0x4F	; 79
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 68       	ori	r24, 0x80	; 128
    2fc0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2fc2:	af e4       	ldi	r26, 0x4F	; 79
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	ef e4       	ldi	r30, 0x4F	; 79
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	80 62       	ori	r24, 0x20	; 32
    2fce:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2fd0:	af e4       	ldi	r26, 0x4F	; 79
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	ef e4       	ldi	r30, 0x4F	; 79
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	80 64       	ori	r24, 0x40	; 64
    2fdc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2fde:	af e4       	ldi	r26, 0x4F	; 79
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	ef e4       	ldi	r30, 0x4F	; 79
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	80 61       	ori	r24, 0x10	; 16
    2fea:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	64 e0       	ldi	r22, 0x04	; 4
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	65 e0       	ldi	r22, 0x05	; 5
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 30 0c 	call	0x1860	; 0x1860 <GPIO_setupPinDirection>
			break;
		}
	}
}
    3000:	2e 96       	adiw	r28, 0x0e	; 14
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <Timer1_setCallBack>:
 * 		normal mode or compare unit A interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBack(void (*Ptr2Function)(void))
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	00 d0       	rcall	.+0      	; 0x3018 <Timer1_setCallBack+0x6>
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitA_Ptr = Ptr2Function;
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	90 93 7c 00 	sts	0x007C, r25
    3028:	80 93 7b 00 	sts	0x007B, r24
}
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <Timer1_setCallBackUnitB>:
 * 		compare unit B interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBackUnitB(void (*Ptr2Function)(void))
{
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	00 d0       	rcall	.+0      	; 0x303c <Timer1_setCallBackUnitB+0x6>
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitB_Ptr = Ptr2Function;
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	90 93 7e 00 	sts	0x007E, r25
    304c:	80 93 7d 00 	sts	0x007D, r24
}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <Timer1_start>:
 * [In] compareValueB	: Indicates compare value for unit B.
 * [Return]				: Void.
 */
void Timer1_start(TIMER01_PRESCALER prescaler, uint16 start,
		uint16 compareValueA, uint16 compareValueB)
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	27 97       	sbiw	r28, 0x07	; 7
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	7b 83       	std	Y+3, r23	; 0x03
    3072:	6a 83       	std	Y+2, r22	; 0x02
    3074:	5d 83       	std	Y+5, r21	; 0x05
    3076:	4c 83       	std	Y+4, r20	; 0x04
    3078:	3f 83       	std	Y+7, r19	; 0x07
    307a:	2e 83       	std	Y+6, r18	; 0x06
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	87 70       	andi	r24, 0x07	; 7
    3080:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start; /* Set timer starting value */
    3082:	ec e4       	ldi	r30, 0x4C	; 76
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
	/* Choose between compare unit A or compare unit B or both */
	OCR1A = compareValueA;
    308e:	ea e4       	ldi	r30, 0x4A	; 74
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	8c 81       	ldd	r24, Y+4	; 0x04
    3094:	9d 81       	ldd	r25, Y+5	; 0x05
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
	OCR1B = compareValueB;
    309a:	e8 e4       	ldi	r30, 0x48	; 72
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	8e 81       	ldd	r24, Y+6	; 0x06
    30a0:	9f 81       	ldd	r25, Y+7	; 0x07
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
	/* If interrupt is enable in initialization, enable it for
	 * it's corresponding compare unit chosen */
	if (compareValueA != 0 && compareValueB == 0)
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	9d 81       	ldd	r25, Y+5	; 0x05
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	a9 f0       	breq	.+42     	; 0x30d8 <Timer1_start+0x7e>
    30ae:	8e 81       	ldd	r24, Y+6	; 0x06
    30b0:	9f 81       	ldd	r25, Y+7	; 0x07
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	89 f4       	brne	.+34     	; 0x30d8 <Timer1_start+0x7e>
	{
		if (BIT_IS_SET(TIMSK, OCIE1A))
    30b6:	e9 e5       	ldi	r30, 0x59	; 89
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	80 71       	andi	r24, 0x10	; 16
    30c2:	90 70       	andi	r25, 0x00	; 0
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	b9 f1       	breq	.+110    	; 0x3136 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1B);
    30c8:	a9 e5       	ldi	r26, 0x59	; 89
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e9 e5       	ldi	r30, 0x59	; 89
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	87 7f       	andi	r24, 0xF7	; 247
    30d4:	8c 93       	st	X, r24
    30d6:	2f c0       	rjmp	.+94     	; 0x3136 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB != 0)
    30d8:	8c 81       	ldd	r24, Y+4	; 0x04
    30da:	9d 81       	ldd	r25, Y+5	; 0x05
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	a9 f4       	brne	.+42     	; 0x310a <Timer1_start+0xb0>
    30e0:	8e 81       	ldd	r24, Y+6	; 0x06
    30e2:	9f 81       	ldd	r25, Y+7	; 0x07
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	89 f0       	breq	.+34     	; 0x310a <Timer1_start+0xb0>
	{
		if (BIT_IS_SET(TIMSK, OCIE1B))
    30e8:	e9 e5       	ldi	r30, 0x59	; 89
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	88 70       	andi	r24, 0x08	; 8
    30f4:	90 70       	andi	r25, 0x00	; 0
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	f1 f0       	breq	.+60     	; 0x3136 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1A);
    30fa:	a9 e5       	ldi	r26, 0x59	; 89
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e9 e5       	ldi	r30, 0x59	; 89
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	8f 7e       	andi	r24, 0xEF	; 239
    3106:	8c 93       	st	X, r24
    3108:	16 c0       	rjmp	.+44     	; 0x3136 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB == 0)
    310a:	8c 81       	ldd	r24, Y+4	; 0x04
    310c:	9d 81       	ldd	r25, Y+5	; 0x05
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	91 f4       	brne	.+36     	; 0x3136 <Timer1_start+0xdc>
    3112:	8e 81       	ldd	r24, Y+6	; 0x06
    3114:	9f 81       	ldd	r25, Y+7	; 0x07
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	71 f4       	brne	.+28     	; 0x3136 <Timer1_start+0xdc>
	{
		CLEAR_BIT(TIMSK, OCIE1A);
    311a:	a9 e5       	ldi	r26, 0x59	; 89
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e9 e5       	ldi	r30, 0x59	; 89
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	8f 7e       	andi	r24, 0xEF	; 239
    3126:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1B);
    3128:	a9 e5       	ldi	r26, 0x59	; 89
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e9 e5       	ldi	r30, 0x59	; 89
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	87 7f       	andi	r24, 0xF7	; 247
    3134:	8c 93       	st	X, r24
	}
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR1B, 0xF8, prescaler);
    3136:	ae e4       	ldi	r26, 0x4E	; 78
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	ee e4       	ldi	r30, 0x4E	; 78
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	98 2f       	mov	r25, r24
    3142:	98 7f       	andi	r25, 0xF8	; 248
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	89 2b       	or	r24, r25
    3148:	8c 93       	st	X, r24
}
    314a:	27 96       	adiw	r28, 0x07	; 7
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <Timer1_stop>:
 * 		Function that stops timer1 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_stop(void)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR1B, 0xF8, 0x00); /* Clear pre-scaler */
    3164:	ae e4       	ldi	r26, 0x4E	; 78
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	ee e4       	ldi	r30, 0x4E	; 78
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	88 7f       	andi	r24, 0xF8	; 248
    3170:	8c 93       	st	X, r24
}
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <Timer1_deInit>:
 * 		Function that clears all timer1 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_deInit(void)
{
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	2a 97       	sbiw	r28, 0x0a	; 10
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
	/* Clear timer1 registers */
	CLEAR_REG(TCCR1A);
    318c:	ef e4       	ldi	r30, 0x4F	; 79
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	ef e4       	ldi	r30, 0x4F	; 79
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    3198:	ee e4       	ldi	r30, 0x4E	; 78
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	90 81       	ld	r25, Z
    319e:	ee e4       	ldi	r30, 0x4E	; 78
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	10 82       	st	Z, r1
	CLEAR_REG(TCNT1);
    31a4:	ec e4       	ldi	r30, 0x4C	; 76
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	ec e4       	ldi	r30, 0x4C	; 76
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	11 82       	std	Z+1, r1	; 0x01
    31b2:	10 82       	st	Z, r1
	CLEAR_REG(OCR1A);
    31b4:	ea e4       	ldi	r30, 0x4A	; 74
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	91 81       	ldd	r25, Z+1	; 0x01
    31bc:	ea e4       	ldi	r30, 0x4A	; 74
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	11 82       	std	Z+1, r1	; 0x01
    31c2:	10 82       	st	Z, r1
	CLEAR_REG(OCR1B);
    31c4:	e8 e4       	ldi	r30, 0x48	; 72
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	91 81       	ldd	r25, Z+1	; 0x01
    31cc:	e8 e4       	ldi	r30, 0x48	; 72
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	11 82       	std	Z+1, r1	; 0x01
    31d2:	10 82       	st	Z, r1
	CLEAR_REG(ICR1);
    31d4:	e6 e4       	ldi	r30, 0x46	; 70
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	e6 e4       	ldi	r30, 0x46	; 70
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	11 82       	std	Z+1, r1	; 0x01
    31e2:	10 82       	st	Z, r1
	/* Disable timer1 interrupts */
	CLEAR_BIT(TIMSK, TICIE1);
    31e4:	a9 e5       	ldi	r26, 0x59	; 89
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e9 e5       	ldi	r30, 0x59	; 89
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 7d       	andi	r24, 0xDF	; 223
    31f0:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    31f2:	a9 e5       	ldi	r26, 0x59	; 89
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e9 e5       	ldi	r30, 0x59	; 89
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	8f 7e       	andi	r24, 0xEF	; 239
    31fe:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    3200:	a9 e5       	ldi	r26, 0x59	; 89
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e9 e5       	ldi	r30, 0x59	; 89
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	87 7f       	andi	r24, 0xF7	; 247
    320c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE1);
    320e:	a9 e5       	ldi	r26, 0x59	; 89
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e9 e5       	ldi	r30, 0x59	; 89
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	8b 7f       	andi	r24, 0xFB	; 251
    321a:	8c 93       	st	X, r24
	/* Clear timer1 flags */
	SET_BIT(TIFR, ICF1);
    321c:	a8 e5       	ldi	r26, 0x58	; 88
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e8 e5       	ldi	r30, 0x58	; 88
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	80 62       	ori	r24, 0x20	; 32
    3228:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1A);
    322a:	a8 e5       	ldi	r26, 0x58	; 88
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e8 e5       	ldi	r30, 0x58	; 88
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	80 61       	ori	r24, 0x10	; 16
    3236:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1B);
    3238:	a8 e5       	ldi	r26, 0x58	; 88
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e8 e5       	ldi	r30, 0x58	; 88
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	88 60       	ori	r24, 0x08	; 8
    3244:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV1);
    3246:	a8 e5       	ldi	r26, 0x58	; 88
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	e8 e5       	ldi	r30, 0x58	; 88
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	84 60       	ori	r24, 0x04	; 4
    3252:	8c 93       	st	X, r24
}
    3254:	2a 96       	adiw	r28, 0x0a	; 10
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <USART_init>:
 * 			3. Sets UART baud rate.
 * [Args] USARTConfig	: Contains baud rate, character size, parity mode & stop bit.
 * [Return]				: Void.
 */
void USART_init(const USART_initConfig *USARTConfig)
{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	28 97       	sbiw	r28, 0x08	; 8
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	9c 83       	std	Y+4, r25	; 0x04
    327c:	8b 83       	std	Y+3, r24	; 0x03
	/* Define a variable that will hold UBRR value*/
	uint16 UBRRValue = 0;
    327e:	1a 82       	std	Y+2, r1	; 0x02
    3280:	19 82       	std	Y+1, r1	; 0x01
	/* Clear previous USART initialization data */
	CLEAR_REG(UCSRA);
    3282:	eb e2       	ldi	r30, 0x2B	; 43
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	eb e2       	ldi	r30, 0x2B	; 43
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	10 82       	st	Z, r1
	CLEAR_REG(UCSRB);
    328e:	ea e2       	ldi	r30, 0x2A	; 42
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	ea e2       	ldi	r30, 0x2A	; 42
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	10 82       	st	Z, r1
	CLEAR_REG(UCSRC);
    329a:	e0 e4       	ldi	r30, 0x40	; 64
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	e0 e4       	ldi	r30, 0x40	; 64
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	10 82       	st	Z, r1
	OVERWRITE_REG(UBRRH, 0xF0, 0x00);
    32a6:	a0 e4       	ldi	r26, 0x40	; 64
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e0 e4       	ldi	r30, 0x40	; 64
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	80 7f       	andi	r24, 0xF0	; 240
    32b2:	8c 93       	st	X, r24
	CLEAR_REG(UBRRL);
    32b4:	e9 e2       	ldi	r30, 0x29	; 41
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	e9 e2       	ldi	r30, 0x29	; 41
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	10 82       	st	Z, r1

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Enable double transmission speed */
	SET_BIT(UCSRA, U2X);
    32c0:	ab e2       	ldi	r26, 0x2B	; 43
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	eb e2       	ldi	r30, 0x2B	; 43
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	82 60       	ori	r24, 0x02	; 2
    32cc:	8c 93       	st	X, r24
	OVERWRITE_REG(UCSRB, 0x1F, 0xE0);

#endif

	/* Enable receiver & override receiver pin settings */
	SET_BIT(UCSRB, RXEN);
    32ce:	aa e2       	ldi	r26, 0x2A	; 42
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ea e2       	ldi	r30, 0x2A	; 42
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	80 61       	ori	r24, 0x10	; 16
    32da:	8c 93       	st	X, r24
	/* Enable transmitter & override transmitter pin settings */
	SET_BIT(UCSRB, TXEN);
    32dc:	aa e2       	ldi	r26, 0x2A	; 42
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	ea e2       	ldi	r30, 0x2A	; 42
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	88 60       	ori	r24, 0x08	; 8
    32e8:	8c 93       	st	X, r24
	/* Set most significant bit of character size */
	OVERWRITE_REG(UCSRB, 0xFB, GET_BIT((*USARTConfig).characterSize, 2) << 2);
    32ea:	aa e2       	ldi	r26, 0x2A	; 42
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	ea e2       	ldi	r30, 0x2A	; 42
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	98 2f       	mov	r25, r24
    32f6:	9b 7f       	andi	r25, 0xFB	; 251
    32f8:	eb 81       	ldd	r30, Y+3	; 0x03
    32fa:	fc 81       	ldd	r31, Y+4	; 0x04
    32fc:	84 81       	ldd	r24, Z+4	; 0x04
    32fe:	87 70       	andi	r24, 0x07	; 7
    3300:	84 70       	andi	r24, 0x04	; 4
    3302:	89 2b       	or	r24, r25
    3304:	8c 93       	st	X, r24
	/* Write in UCSRC */
	SET_BIT(UCSRC, URSEL);
    3306:	a0 e4       	ldi	r26, 0x40	; 64
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	e0 e4       	ldi	r30, 0x40	; 64
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	80 81       	ld	r24, Z
    3310:	80 68       	ori	r24, 0x80	; 128
    3312:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UMSEL);

#endif

	/* Set parity mode */
	OVERWRITE_REG(UCSRC, 0xCF, (*USARTConfig).parityMode << 4);
    3314:	a0 e4       	ldi	r26, 0x40	; 64
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	e0 e4       	ldi	r30, 0x40	; 64
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	28 2f       	mov	r18, r24
    3320:	2f 7c       	andi	r18, 0xCF	; 207
    3322:	eb 81       	ldd	r30, Y+3	; 0x03
    3324:	fc 81       	ldd	r31, Y+4	; 0x04
    3326:	84 81       	ldd	r24, Z+4	; 0x04
    3328:	86 95       	lsr	r24
    332a:	86 95       	lsr	r24
    332c:	86 95       	lsr	r24
    332e:	83 70       	andi	r24, 0x03	; 3
    3330:	88 2f       	mov	r24, r24
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	82 95       	swap	r24
    3336:	92 95       	swap	r25
    3338:	90 7f       	andi	r25, 0xF0	; 240
    333a:	98 27       	eor	r25, r24
    333c:	80 7f       	andi	r24, 0xF0	; 240
    333e:	98 27       	eor	r25, r24
    3340:	82 2b       	or	r24, r18
    3342:	8c 93       	st	X, r24
	/* Set stop bit */
	OVERWRITE_REG(UCSRC, 0xF7, GET_BIT((*USARTConfig).stopBit, 0) << 3);
    3344:	a0 e4       	ldi	r26, 0x40	; 64
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	e0 e4       	ldi	r30, 0x40	; 64
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	28 2f       	mov	r18, r24
    3350:	27 7f       	andi	r18, 0xF7	; 247
    3352:	eb 81       	ldd	r30, Y+3	; 0x03
    3354:	fc 81       	ldd	r31, Y+4	; 0x04
    3356:	84 81       	ldd	r24, Z+4	; 0x04
    3358:	82 95       	swap	r24
    335a:	86 95       	lsr	r24
    335c:	87 70       	andi	r24, 0x07	; 7
    335e:	81 70       	andi	r24, 0x01	; 1
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	81 70       	andi	r24, 0x01	; 1
    3366:	90 70       	andi	r25, 0x00	; 0
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	88 0f       	add	r24, r24
    336e:	99 1f       	adc	r25, r25
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	82 2b       	or	r24, r18
    3376:	8c 93       	st	X, r24
	/* Set two least significant bits of character size */
	OVERWRITE_REG(UCSRC, 0xF9, ((*USARTConfig).characterSize & 0x03) << 1);
    3378:	a0 e4       	ldi	r26, 0x40	; 64
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e0 e4       	ldi	r30, 0x40	; 64
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	28 2f       	mov	r18, r24
    3384:	29 7f       	andi	r18, 0xF9	; 249
    3386:	eb 81       	ldd	r30, Y+3	; 0x03
    3388:	fc 81       	ldd	r31, Y+4	; 0x04
    338a:	84 81       	ldd	r24, Z+4	; 0x04
    338c:	87 70       	andi	r24, 0x07	; 7
    338e:	88 2f       	mov	r24, r24
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	83 70       	andi	r24, 0x03	; 3
    3394:	90 70       	andi	r25, 0x00	; 0
    3396:	88 0f       	add	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	82 2b       	or	r24, r18
    339c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCPOL);

#endif

	/* Write in UBRRL & UBRRH */
	CLEAR_BIT(UCSRC, URSEL);
    339e:	a0 e4       	ldi	r26, 0x40	; 64
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e0 e4       	ldi	r30, 0x40	; 64
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	8f 77       	andi	r24, 0x7F	; 127
    33aa:	8c 93       	st	X, r24

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Calculate the UBRR register value */
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 8UL))) - 1);
    33ac:	eb 81       	ldd	r30, Y+3	; 0x03
    33ae:	fc 81       	ldd	r31, Y+4	; 0x04
    33b0:	80 81       	ld	r24, Z
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	a2 81       	ldd	r26, Z+2	; 0x02
    33b6:	b3 81       	ldd	r27, Z+3	; 0x03
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	aa 1f       	adc	r26, r26
    33be:	bb 1f       	adc	r27, r27
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	aa 1f       	adc	r26, r26
    33c6:	bb 1f       	adc	r27, r27
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	aa 1f       	adc	r26, r26
    33ce:	bb 1f       	adc	r27, r27
    33d0:	9c 01       	movw	r18, r24
    33d2:	ad 01       	movw	r20, r26
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	92 e1       	ldi	r25, 0x12	; 18
    33d8:	aa e7       	ldi	r26, 0x7A	; 122
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodsi4>
    33e4:	da 01       	movw	r26, r20
    33e6:	c9 01       	movw	r24, r18
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9a 83       	std	Y+2, r25	; 0x02
    33ec:	89 83       	std	Y+1, r24	; 0x01
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 16UL))) - 1);

#endif

	/* Set 4 most significant bits of UBRRValue in UBRRH */
	UBRRH = UBRRValue >> 8;
    33ee:	e0 e4       	ldi	r30, 0x40	; 64
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	9a 81       	ldd	r25, Y+2	; 0x02
    33f6:	89 2f       	mov	r24, r25
    33f8:	99 27       	eor	r25, r25
    33fa:	80 83       	st	Z, r24
	/* Set 8 least significant bits of UBRRValue in UBRRL */
	UBRRL = UBRRValue;
    33fc:	e9 e2       	ldi	r30, 0x29	; 41
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	80 83       	st	Z, r24
}
    3404:	28 96       	adiw	r28, 0x08	; 8
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <USART_sendByte>:

void USART_sendByte(const uint8 data)

#endif

{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	0f 92       	push	r0
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	89 83       	std	Y+1, r24	; 0x01
	UDR = (data & 0xFF);

#else

	/* Wait for data register empty flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    3422:	eb e2       	ldi	r30, 0x2B	; 43
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	88 2f       	mov	r24, r24
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	80 72       	andi	r24, 0x20	; 32
    342e:	90 70       	andi	r25, 0x00	; 0
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	b9 f3       	breq	.-18     	; 0x3422 <USART_sendByte+0xc>
	/* Put the data in the UDR, flag is automatically cleared */
	UDR = data;
    3434:	ec e2       	ldi	r30, 0x2C	; 44
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	80 83       	st	Z, r24
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

#endif

}
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <USART_recieveByte>:

uint8 USART_recieveByte(void)

#endif

{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
	return UDRValue;

#else

	/* Wait for receive complete flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, RXC));
    344c:	eb e2       	ldi	r30, 0x2B	; 43
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	88 23       	and	r24, r24
    3454:	dc f7       	brge	.-10     	; 0x344c <USART_recieveByte+0x8>
	/* Read received data from UDR, flag is automatically cleared */
	return UDR;
    3456:	ec e2       	ldi	r30, 0x2C	; 44
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z

#endif

}
    345c:	cf 91       	pop	r28
    345e:	df 91       	pop	r29
    3460:	08 95       	ret

00003462 <USART_sendString>:
 * 		Function that sends string through USART.
 * [Args] string	: Indicates string to be sent.
 * [Return]			: Void.
 */
void USART_sendString(const uint8 *string)
{
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	00 d0       	rcall	.+0      	; 0x3468 <USART_sendString+0x6>
    3468:	0f 92       	push	r0
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	9b 83       	std	Y+3, r25	; 0x03
    3470:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    3472:	19 82       	std	Y+1, r1	; 0x01
    3474:	0e c0       	rjmp	.+28     	; 0x3492 <USART_sendString+0x30>
	/* Send the string */
	while (string[i] != '\0')
	{
		USART_sendByte(string[i]);
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	28 2f       	mov	r18, r24
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	9b 81       	ldd	r25, Y+3	; 0x03
    3480:	fc 01       	movw	r30, r24
    3482:	e2 0f       	add	r30, r18
    3484:	f3 1f       	adc	r31, r19
    3486:	80 81       	ld	r24, Z
    3488:	0e 94 0b 1a 	call	0x3416	; 0x3416 <USART_sendByte>
		i++;
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	8f 5f       	subi	r24, 0xFF	; 255
    3490:	89 83       	std	Y+1, r24	; 0x01
void USART_sendString(const uint8 *string)
{
	/* Define a counter variable */
	uint8 i = 0;
	/* Send the string */
	while (string[i] != '\0')
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	28 2f       	mov	r18, r24
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	8a 81       	ldd	r24, Y+2	; 0x02
    349a:	9b 81       	ldd	r25, Y+3	; 0x03
    349c:	fc 01       	movw	r30, r24
    349e:	e2 0f       	add	r30, r18
    34a0:	f3 1f       	adc	r31, r19
    34a2:	80 81       	ld	r24, Z
    34a4:	88 23       	and	r24, r24
    34a6:	39 f7       	brne	.-50     	; 0x3476 <USART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <USART_receiveString>:
 * [Args] 			: Void.
 * [Out] string		: Indicates the whole string that is received until (#) symbol.
 * [Return]			: Void.
 */
void USART_receiveString(uint8 *string)
{
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	00 d0       	rcall	.+0      	; 0x34be <USART_receiveString+0xa>
    34be:	0f 92       	push	r0
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	9b 83       	std	Y+3, r25	; 0x03
    34c6:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    34c8:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	string[i] = USART_recieveByte();
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	28 2f       	mov	r18, r24
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	9b 81       	ldd	r25, Y+3	; 0x03
    34d4:	8c 01       	movw	r16, r24
    34d6:	02 0f       	add	r16, r18
    34d8:	13 1f       	adc	r17, r19
    34da:	0e 94 22 1a 	call	0x3444	; 0x3444 <USART_recieveByte>
    34de:	f8 01       	movw	r30, r16
    34e0:	80 83       	st	Z, r24
    34e2:	0f c0       	rjmp	.+30     	; 0x3502 <USART_receiveString+0x4e>
	/* Receive the string until the (#) */
	while (string[i] != '#')
	{
		i++;
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	89 83       	std	Y+1, r24	; 0x01
		string[i] = USART_recieveByte();
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	8a 81       	ldd	r24, Y+2	; 0x02
    34f2:	9b 81       	ldd	r25, Y+3	; 0x03
    34f4:	8c 01       	movw	r16, r24
    34f6:	02 0f       	add	r16, r18
    34f8:	13 1f       	adc	r17, r19
    34fa:	0e 94 22 1a 	call	0x3444	; 0x3444 <USART_recieveByte>
    34fe:	f8 01       	movw	r30, r16
    3500:	80 83       	st	Z, r24
	/* Define a counter variable */
	uint8 i = 0;
	/* Receive the first byte */
	string[i] = USART_recieveByte();
	/* Receive the string until the (#) */
	while (string[i] != '#')
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	9b 81       	ldd	r25, Y+3	; 0x03
    350c:	fc 01       	movw	r30, r24
    350e:	e2 0f       	add	r30, r18
    3510:	f3 1f       	adc	r31, r19
    3512:	80 81       	ld	r24, Z
    3514:	83 32       	cpi	r24, 0x23	; 35
    3516:	31 f7       	brne	.-52     	; 0x34e4 <USART_receiveString+0x30>
	{
		i++;
		string[i] = USART_recieveByte();
	}
	/* Replace (#) with (\0) After receiving */
	string[i] = '\0';
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	fc 01       	movw	r30, r24
    3524:	e2 0f       	add	r30, r18
    3526:	f3 1f       	adc	r31, r19
    3528:	10 82       	st	Z, r1
}
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	08 95       	ret

0000353a <__udivmodhi4>:
    353a:	aa 1b       	sub	r26, r26
    353c:	bb 1b       	sub	r27, r27
    353e:	51 e1       	ldi	r21, 0x11	; 17
    3540:	07 c0       	rjmp	.+14     	; 0x3550 <__udivmodhi4_ep>

00003542 <__udivmodhi4_loop>:
    3542:	aa 1f       	adc	r26, r26
    3544:	bb 1f       	adc	r27, r27
    3546:	a6 17       	cp	r26, r22
    3548:	b7 07       	cpc	r27, r23
    354a:	10 f0       	brcs	.+4      	; 0x3550 <__udivmodhi4_ep>
    354c:	a6 1b       	sub	r26, r22
    354e:	b7 0b       	sbc	r27, r23

00003550 <__udivmodhi4_ep>:
    3550:	88 1f       	adc	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	5a 95       	dec	r21
    3556:	a9 f7       	brne	.-22     	; 0x3542 <__udivmodhi4_loop>
    3558:	80 95       	com	r24
    355a:	90 95       	com	r25
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	08 95       	ret

00003562 <__udivmodsi4>:
    3562:	a1 e2       	ldi	r26, 0x21	; 33
    3564:	1a 2e       	mov	r1, r26
    3566:	aa 1b       	sub	r26, r26
    3568:	bb 1b       	sub	r27, r27
    356a:	fd 01       	movw	r30, r26
    356c:	0d c0       	rjmp	.+26     	; 0x3588 <__udivmodsi4_ep>

0000356e <__udivmodsi4_loop>:
    356e:	aa 1f       	adc	r26, r26
    3570:	bb 1f       	adc	r27, r27
    3572:	ee 1f       	adc	r30, r30
    3574:	ff 1f       	adc	r31, r31
    3576:	a2 17       	cp	r26, r18
    3578:	b3 07       	cpc	r27, r19
    357a:	e4 07       	cpc	r30, r20
    357c:	f5 07       	cpc	r31, r21
    357e:	20 f0       	brcs	.+8      	; 0x3588 <__udivmodsi4_ep>
    3580:	a2 1b       	sub	r26, r18
    3582:	b3 0b       	sbc	r27, r19
    3584:	e4 0b       	sbc	r30, r20
    3586:	f5 0b       	sbc	r31, r21

00003588 <__udivmodsi4_ep>:
    3588:	66 1f       	adc	r22, r22
    358a:	77 1f       	adc	r23, r23
    358c:	88 1f       	adc	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	1a 94       	dec	r1
    3592:	69 f7       	brne	.-38     	; 0x356e <__udivmodsi4_loop>
    3594:	60 95       	com	r22
    3596:	70 95       	com	r23
    3598:	80 95       	com	r24
    359a:	90 95       	com	r25
    359c:	9b 01       	movw	r18, r22
    359e:	ac 01       	movw	r20, r24
    35a0:	bd 01       	movw	r22, r26
    35a2:	cf 01       	movw	r24, r30
    35a4:	08 95       	ret

000035a6 <__prologue_saves__>:
    35a6:	2f 92       	push	r2
    35a8:	3f 92       	push	r3
    35aa:	4f 92       	push	r4
    35ac:	5f 92       	push	r5
    35ae:	6f 92       	push	r6
    35b0:	7f 92       	push	r7
    35b2:	8f 92       	push	r8
    35b4:	9f 92       	push	r9
    35b6:	af 92       	push	r10
    35b8:	bf 92       	push	r11
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	ca 1b       	sub	r28, r26
    35d0:	db 0b       	sbc	r29, r27
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	09 94       	ijmp

000035de <__epilogue_restores__>:
    35de:	2a 88       	ldd	r2, Y+18	; 0x12
    35e0:	39 88       	ldd	r3, Y+17	; 0x11
    35e2:	48 88       	ldd	r4, Y+16	; 0x10
    35e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f0:	b9 84       	ldd	r11, Y+9	; 0x09
    35f2:	c8 84       	ldd	r12, Y+8	; 0x08
    35f4:	df 80       	ldd	r13, Y+7	; 0x07
    35f6:	ee 80       	ldd	r14, Y+6	; 0x06
    35f8:	fd 80       	ldd	r15, Y+5	; 0x05
    35fa:	0c 81       	ldd	r16, Y+4	; 0x04
    35fc:	1b 81       	ldd	r17, Y+3	; 0x03
    35fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3600:	b9 81       	ldd	r27, Y+1	; 0x01
    3602:	ce 0f       	add	r28, r30
    3604:	d1 1d       	adc	r29, r1
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	f8 94       	cli
    360a:	de bf       	out	0x3e, r29	; 62
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	cd bf       	out	0x3d, r28	; 61
    3610:	ed 01       	movw	r28, r26
    3612:	08 95       	ret

00003614 <_exit>:
    3614:	f8 94       	cli

00003616 <__stop_program>:
    3616:	ff cf       	rjmp	.-2      	; 0x3616 <__stop_program>
