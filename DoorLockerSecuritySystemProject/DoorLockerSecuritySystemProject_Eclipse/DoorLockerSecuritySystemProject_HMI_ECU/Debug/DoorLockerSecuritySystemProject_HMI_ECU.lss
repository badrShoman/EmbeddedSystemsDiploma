
DoorLockerSecuritySystemProject_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003d66  00003dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080016a  0080016a  00003f04  2**0
                  ALLOC
  3 .stab         00003da4  00000000  00000000  00003f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002172  00000000  00000000  00007ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bd13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000db0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_7>
      20:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_8>
      24:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <main>
      8a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e6       	ldi	r26, 0x61	; 97
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	08 f0       	brcs	.+2      	; 0xf0c <GPIO_readPin+0x1a>
     f0a:	85 c0       	rjmp	.+266    	; 0x1016 <GPIO_readPin+0x124>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	08 f0       	brcs	.+2      	; 0xf14 <GPIO_readPin+0x22>
     f12:	81 c0       	rjmp	.+258    	; 0x1016 <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	4c 81       	ldd	r20, Y+4	; 0x04
     f20:	5d 81       	ldd	r21, Y+5	; 0x05
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4c 81       	ldd	r20, Y+4	; 0x04
     f40:	5d 81       	ldd	r21, Y+5	; 0x05
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5b 83       	std	Y+3, r21	; 0x03
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
     f82:	1b 82       	std	Y+3, r1	; 0x03
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5b 83       	std	Y+3, r21	; 0x03
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
     fb2:	1b 82       	std	Y+3, r1	; 0x03
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5b 83       	std	Y+3, r21	; 0x03
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
     fe2:	1b 82       	std	Y+3, r1	; 0x03
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5b 83       	std	Y+3, r21	; 0x03
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1012:	1b 82       	std	Y+3, r1	; 0x03
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x12a>
				}
		}
	}
}
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
			break;
		}
	}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	98 f5       	brcc	.+102    	; 0x11bc <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3c 83       	std	Y+4, r19	; 0x04
    115e:	2b 83       	std	Y+3, r18	; 0x03
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	d1 f0       	breq	.+52     	; 0x119e <GPIO_readPort+0x5e>
    116a:	2b 81       	ldd	r18, Y+3	; 0x03
    116c:	3c 81       	ldd	r19, Y+4	; 0x04
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	2c f4       	brge	.+10     	; 0x117e <GPIO_readPort+0x3e>
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	61 f0       	breq	.+24     	; 0x1194 <GPIO_readPort+0x54>
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <GPIO_readPort+0x7c>
    117e:	2b 81       	ldd	r18, Y+3	; 0x03
    1180:	3c 81       	ldd	r19, Y+4	; 0x04
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <GPIO_readPort+0x68>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <GPIO_readPort+0x72>
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    1194:	e9 e3       	ldi	r30, 0x39	; 57
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	90 81       	ld	r25, Z
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	10 c0       	rjmp	.+32     	; 0x11be <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    119e:	e6 e3       	ldi	r30, 0x36	; 54
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	20 81       	ld	r18, Z
    11a4:	2a 83       	std	Y+2, r18	; 0x02
    11a6:	0b c0       	rjmp	.+22     	; 0x11be <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    11a8:	e3 e3       	ldi	r30, 0x33	; 51
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	30 81       	ld	r19, Z
    11ae:	3a 83       	std	Y+2, r19	; 0x02
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    11b2:	e0 e3       	ldi	r30, 0x30	; 48
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <GPIO_readPort+0x7e>
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <GPIO_readPort+0x82>
		}
	}
}
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	9d 83       	std	Y+5, r25	; 0x05
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <__vector_9>:
 * [Interrupt Vector]	: TIMER1_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer1.
 */
ISR(TIMER1_OVF_vect)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    11fe:	80 91 6a 01 	lds	r24, 0x016A
    1202:	90 91 6b 01 	lds	r25, 0x016B
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	29 f0       	breq	.+10     	; 0x1214 <__vector_9+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    120a:	e0 91 6a 01 	lds	r30, 0x016A
    120e:	f0 91 6b 01 	lds	r31, 0x016B
    1212:	09 95       	icall
	}
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_7>:
 * [Interrupt Vector]	: TIMER1_COMPA_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit A.
 */
ISR(TIMER1_COMPA_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    1264:	80 91 6a 01 	lds	r24, 0x016A
    1268:	90 91 6b 01 	lds	r25, 0x016B
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	29 f0       	breq	.+10     	; 0x127a <__vector_7+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    1270:	e0 91 6a 01 	lds	r30, 0x016A
    1274:	f0 91 6b 01 	lds	r31, 0x016B
    1278:	09 95       	icall
	}
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <__vector_8>:
 * [Interrupt Vector]	: TIMER1_COMPB_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit B.
 */
ISR(TIMER1_COMPB_vect)
{
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitB_Ptr != NULL_PTR) /* If callback function pointer is not void */
    12ca:	80 91 6c 01 	lds	r24, 0x016C
    12ce:	90 91 6d 01 	lds	r25, 0x016D
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <__vector_8+0x40>
	{
		(*g_timer1CallBackUnitB_Ptr)(); /* Execute callback function */
    12d6:	e0 91 6c 01 	lds	r30, 0x016C
    12da:	f0 91 6d 01 	lds	r31, 0x016D
    12de:	09 95       	icall
	}
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <Timer1_init>:
#endif

#if (TIMER1_ENABLE == TRUE)

void Timer1_init(const Timer_initConfig *timerConfig)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	2e 97       	sbiw	r28, 0x0e	; 14
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR1A);
    131e:	ef e4       	ldi	r30, 0x4F	; 79
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	20 81       	ld	r18, Z
    1324:	ef e4       	ldi	r30, 0x4F	; 79
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    132a:	ee e4       	ldi	r30, 0x4E	; 78
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	30 81       	ld	r19, Z
    1330:	ee e4       	ldi	r30, 0x4E	; 78
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	80 81       	ld	r24, Z
    133c:	8f 70       	andi	r24, 0x0F	; 15
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3c 87       	std	Y+12, r19	; 0x0c
    1344:	2b 87       	std	Y+11, r18	; 0x0b
    1346:	8b 85       	ldd	r24, Y+11	; 0x0b
    1348:	9c 85       	ldd	r25, Y+12	; 0x0c
    134a:	87 30       	cpi	r24, 0x07	; 7
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <Timer1_init+0x4c>
    1350:	40 c1       	rjmp	.+640    	; 0x15d2 <Timer1_init+0x2cc>
    1352:	2b 85       	ldd	r18, Y+11	; 0x0b
    1354:	3c 85       	ldd	r19, Y+12	; 0x0c
    1356:	28 30       	cpi	r18, 0x08	; 8
    1358:	31 05       	cpc	r19, r1
    135a:	4c f5       	brge	.+82     	; 0x13ae <Timer1_init+0xa8>
    135c:	8b 85       	ldd	r24, Y+11	; 0x0b
    135e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <Timer1_init+0x62>
    1366:	b3 c0       	rjmp	.+358    	; 0x14ce <Timer1_init+0x1c8>
    1368:	2b 85       	ldd	r18, Y+11	; 0x0b
    136a:	3c 85       	ldd	r19, Y+12	; 0x0c
    136c:	24 30       	cpi	r18, 0x04	; 4
    136e:	31 05       	cpc	r19, r1
    1370:	8c f4       	brge	.+34     	; 0x1394 <Timer1_init+0x8e>
    1372:	8b 85       	ldd	r24, Y+11	; 0x0b
    1374:	9c 85       	ldd	r25, Y+12	; 0x0c
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <Timer1_init+0x78>
    137c:	6e c0       	rjmp	.+220    	; 0x145a <Timer1_init+0x154>
    137e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1380:	3c 85       	ldd	r19, Y+12	; 0x0c
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	0c f0       	brlt	.+2      	; 0x138a <Timer1_init+0x84>
    1388:	85 c0       	rjmp	.+266    	; 0x1494 <Timer1_init+0x18e>
    138a:	8b 85       	ldd	r24, Y+11	; 0x0b
    138c:	9c 85       	ldd	r25, Y+12	; 0x0c
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	c9 f1       	breq	.+114    	; 0x1404 <Timer1_init+0xfe>
    1392:	14 c2       	rjmp	.+1064   	; 0x17bc <Timer1_init+0x4b6>
    1394:	2b 85       	ldd	r18, Y+11	; 0x0b
    1396:	3c 85       	ldd	r19, Y+12	; 0x0c
    1398:	25 30       	cpi	r18, 0x05	; 5
    139a:	31 05       	cpc	r19, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <Timer1_init+0x9a>
    139e:	df c0       	rjmp	.+446    	; 0x155e <Timer1_init+0x258>
    13a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a4:	86 30       	cpi	r24, 0x06	; 6
    13a6:	91 05       	cpc	r25, r1
    13a8:	0c f0       	brlt	.+2      	; 0x13ac <Timer1_init+0xa6>
    13aa:	f6 c0       	rjmp	.+492    	; 0x1598 <Timer1_init+0x292>
    13ac:	ad c0       	rjmp	.+346    	; 0x1508 <Timer1_init+0x202>
    13ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    13b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    13b2:	2b 30       	cpi	r18, 0x0B	; 11
    13b4:	31 05       	cpc	r19, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <Timer1_init+0xb4>
    13b8:	80 c1       	rjmp	.+768    	; 0x16ba <Timer1_init+0x3b4>
    13ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    13bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13be:	8c 30       	cpi	r24, 0x0C	; 12
    13c0:	91 05       	cpc	r25, r1
    13c2:	6c f4       	brge	.+26     	; 0x13de <Timer1_init+0xd8>
    13c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    13c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    13c8:	29 30       	cpi	r18, 0x09	; 9
    13ca:	31 05       	cpc	r19, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <Timer1_init+0xca>
    13ce:	3b c1       	rjmp	.+630    	; 0x1646 <Timer1_init+0x340>
    13d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d4:	8a 30       	cpi	r24, 0x0A	; 10
    13d6:	91 05       	cpc	r25, r1
    13d8:	0c f0       	brlt	.+2      	; 0x13dc <Timer1_init+0xd6>
    13da:	52 c1       	rjmp	.+676    	; 0x1680 <Timer1_init+0x37a>
    13dc:	17 c1       	rjmp	.+558    	; 0x160c <Timer1_init+0x306>
    13de:	2b 85       	ldd	r18, Y+11	; 0x0b
    13e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    13e2:	2e 30       	cpi	r18, 0x0E	; 14
    13e4:	31 05       	cpc	r19, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <Timer1_init+0xe4>
    13e8:	b0 c1       	rjmp	.+864    	; 0x174a <Timer1_init+0x444>
    13ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ee:	8f 30       	cpi	r24, 0x0F	; 15
    13f0:	91 05       	cpc	r25, r1
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <Timer1_init+0xf0>
    13f4:	c7 c1       	rjmp	.+910    	; 0x1784 <Timer1_init+0x47e>
    13f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    13f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    13fa:	2c 30       	cpi	r18, 0x0C	; 12
    13fc:	31 05       	cpc	r19, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <Timer1_init+0xfc>
    1400:	79 c1       	rjmp	.+754    	; 0x16f4 <Timer1_init+0x3ee>
    1402:	dc c1       	rjmp	.+952    	; 0x17bc <Timer1_init+0x4b6>
	{
		case TIMER16BIT_NORMAL:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    1404:	af e4       	ldi	r26, 0x4F	; 79
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ef e4       	ldi	r30, 0x4F	; 79
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 60       	ori	r24, 0x08	; 8
    1410:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1412:	af e4       	ldi	r26, 0x4F	; 79
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ef e4       	ldi	r30, 0x4F	; 79
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	84 60       	ori	r24, 0x04	; 4
    141e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    1420:	ae e4       	ldi	r26, 0x4E	; 78
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ee e4       	ldi	r30, 0x4E	; 78
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8f 7e       	andi	r24, 0xEF	; 239
    142c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    142e:	ae e4       	ldi	r26, 0x4E	; 78
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ee e4       	ldi	r30, 0x4E	; 78
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	87 7f       	andi	r24, 0xF7	; 247
    143a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    143c:	af e4       	ldi	r26, 0x4F	; 79
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ef e4       	ldi	r30, 0x4F	; 79
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8d 7f       	andi	r24, 0xFD	; 253
    1448:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    144a:	af e4       	ldi	r26, 0x4F	; 79
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ef e4       	ldi	r30, 0x4F	; 79
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8e 7f       	andi	r24, 0xFE	; 254
    1456:	8c 93       	st	X, r24
    1458:	b1 c1       	rjmp	.+866    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    145a:	ae e4       	ldi	r26, 0x4E	; 78
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ee e4       	ldi	r30, 0x4E	; 78
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 7e       	andi	r24, 0xEF	; 239
    1466:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1468:	ae e4       	ldi	r26, 0x4E	; 78
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ee e4       	ldi	r30, 0x4E	; 78
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	87 7f       	andi	r24, 0xF7	; 247
    1474:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1476:	af e4       	ldi	r26, 0x4F	; 79
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ef e4       	ldi	r30, 0x4F	; 79
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	8d 7f       	andi	r24, 0xFD	; 253
    1482:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1484:	af e4       	ldi	r26, 0x4F	; 79
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	8c 93       	st	X, r24
    1492:	94 c1       	rjmp	.+808    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1494:	ae e4       	ldi	r26, 0x4E	; 78
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ee e4       	ldi	r30, 0x4E	; 78
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8f 7e       	andi	r24, 0xEF	; 239
    14a0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    14a2:	ae e4       	ldi	r26, 0x4E	; 78
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ee e4       	ldi	r30, 0x4E	; 78
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	87 7f       	andi	r24, 0xF7	; 247
    14ae:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    14b0:	af e4       	ldi	r26, 0x4F	; 79
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ef e4       	ldi	r30, 0x4F	; 79
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	82 60       	ori	r24, 0x02	; 2
    14bc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    14be:	af e4       	ldi	r26, 0x4F	; 79
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ef e4       	ldi	r30, 0x4F	; 79
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8e 7f       	andi	r24, 0xFE	; 254
    14ca:	8c 93       	st	X, r24
    14cc:	77 c1       	rjmp	.+750    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    14ce:	ae e4       	ldi	r26, 0x4E	; 78
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ee e4       	ldi	r30, 0x4E	; 78
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7e       	andi	r24, 0xEF	; 239
    14da:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    14dc:	ae e4       	ldi	r26, 0x4E	; 78
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ee e4       	ldi	r30, 0x4E	; 78
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	87 7f       	andi	r24, 0xF7	; 247
    14e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    14ea:	af e4       	ldi	r26, 0x4F	; 79
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ef e4       	ldi	r30, 0x4F	; 79
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	82 60       	ori	r24, 0x02	; 2
    14f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    14f8:	af e4       	ldi	r26, 0x4F	; 79
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ef e4       	ldi	r30, 0x4F	; 79
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	81 60       	ori	r24, 0x01	; 1
    1504:	8c 93       	st	X, r24
    1506:	5a c1       	rjmp	.+692    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_OCR1A:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    1508:	af e4       	ldi	r26, 0x4F	; 79
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ef e4       	ldi	r30, 0x4F	; 79
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	88 60       	ori	r24, 0x08	; 8
    1514:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1516:	af e4       	ldi	r26, 0x4F	; 79
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	84 60       	ori	r24, 0x04	; 4
    1522:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    1524:	ae e4       	ldi	r26, 0x4E	; 78
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ee e4       	ldi	r30, 0x4E	; 78
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8f 7e       	andi	r24, 0xEF	; 239
    1530:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1532:	ae e4       	ldi	r26, 0x4E	; 78
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ee e4       	ldi	r30, 0x4E	; 78
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	88 60       	ori	r24, 0x08	; 8
    153e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1540:	af e4       	ldi	r26, 0x4F	; 79
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ef e4       	ldi	r30, 0x4F	; 79
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	8d 7f       	andi	r24, 0xFD	; 253
    154c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    154e:	af e4       	ldi	r26, 0x4F	; 79
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ef e4       	ldi	r30, 0x4F	; 79
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8e 7f       	andi	r24, 0xFE	; 254
    155a:	8c 93       	st	X, r24
    155c:	2f c1       	rjmp	.+606    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    155e:	ae e4       	ldi	r26, 0x4E	; 78
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ee e4       	ldi	r30, 0x4E	; 78
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8f 7e       	andi	r24, 0xEF	; 239
    156a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    156c:	ae e4       	ldi	r26, 0x4E	; 78
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ee e4       	ldi	r30, 0x4E	; 78
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 60       	ori	r24, 0x08	; 8
    1578:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    157a:	af e4       	ldi	r26, 0x4F	; 79
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ef e4       	ldi	r30, 0x4F	; 79
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8d 7f       	andi	r24, 0xFD	; 253
    1586:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1588:	af e4       	ldi	r26, 0x4F	; 79
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef e4       	ldi	r30, 0x4F	; 79
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	8c 93       	st	X, r24
    1596:	12 c1       	rjmp	.+548    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    1598:	ae e4       	ldi	r26, 0x4E	; 78
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ee e4       	ldi	r30, 0x4E	; 78
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 7e       	andi	r24, 0xEF	; 239
    15a4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    15a6:	ae e4       	ldi	r26, 0x4E	; 78
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ee e4       	ldi	r30, 0x4E	; 78
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 60       	ori	r24, 0x08	; 8
    15b2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    15b4:	af e4       	ldi	r26, 0x4F	; 79
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ef e4       	ldi	r30, 0x4F	; 79
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	82 60       	ori	r24, 0x02	; 2
    15c0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    15c2:	af e4       	ldi	r26, 0x4F	; 79
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ef e4       	ldi	r30, 0x4F	; 79
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	8c 93       	st	X, r24
    15d0:	f5 c0       	rjmp	.+490    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    15d2:	ae e4       	ldi	r26, 0x4E	; 78
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 7e       	andi	r24, 0xEF	; 239
    15de:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	88 60       	ori	r24, 0x08	; 8
    15ec:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    15ee:	af e4       	ldi	r26, 0x4F	; 79
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ef e4       	ldi	r30, 0x4F	; 79
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	82 60       	ori	r24, 0x02	; 2
    15fa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    15fc:	af e4       	ldi	r26, 0x4F	; 79
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ef e4       	ldi	r30, 0x4F	; 79
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	8c 93       	st	X, r24
    160a:	d8 c0       	rjmp	.+432    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    160c:	ae e4       	ldi	r26, 0x4E	; 78
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	ee e4       	ldi	r30, 0x4E	; 78
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	80 61       	ori	r24, 0x10	; 16
    1618:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    161a:	ae e4       	ldi	r26, 0x4E	; 78
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ee e4       	ldi	r30, 0x4E	; 78
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	87 7f       	andi	r24, 0xF7	; 247
    1626:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1628:	af e4       	ldi	r26, 0x4F	; 79
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ef e4       	ldi	r30, 0x4F	; 79
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8d 7f       	andi	r24, 0xFD	; 253
    1634:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1636:	af e4       	ldi	r26, 0x4F	; 79
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ef e4       	ldi	r30, 0x4F	; 79
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8e 7f       	andi	r24, 0xFE	; 254
    1642:	8c 93       	st	X, r24
    1644:	bb c0       	rjmp	.+374    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1646:	ae e4       	ldi	r26, 0x4E	; 78
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ee e4       	ldi	r30, 0x4E	; 78
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 61       	ori	r24, 0x10	; 16
    1652:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    1654:	ae e4       	ldi	r26, 0x4E	; 78
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ee e4       	ldi	r30, 0x4E	; 78
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	87 7f       	andi	r24, 0xF7	; 247
    1660:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1662:	af e4       	ldi	r26, 0x4F	; 79
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ef e4       	ldi	r30, 0x4F	; 79
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8d 7f       	andi	r24, 0xFD	; 253
    166e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    1670:	af e4       	ldi	r26, 0x4F	; 79
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ef e4       	ldi	r30, 0x4F	; 79
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	81 60       	ori	r24, 0x01	; 1
    167c:	8c 93       	st	X, r24
    167e:	9e c0       	rjmp	.+316    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    1680:	ae e4       	ldi	r26, 0x4E	; 78
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ee e4       	ldi	r30, 0x4E	; 78
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 61       	ori	r24, 0x10	; 16
    168c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    168e:	ae e4       	ldi	r26, 0x4E	; 78
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ee e4       	ldi	r30, 0x4E	; 78
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    169c:	af e4       	ldi	r26, 0x4F	; 79
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ef e4       	ldi	r30, 0x4F	; 79
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	82 60       	ori	r24, 0x02	; 2
    16a8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    16aa:	af e4       	ldi	r26, 0x4F	; 79
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ef e4       	ldi	r30, 0x4F	; 79
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	8c 93       	st	X, r24
    16b8:	81 c0       	rjmp	.+258    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    16ba:	ae e4       	ldi	r26, 0x4E	; 78
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ee e4       	ldi	r30, 0x4E	; 78
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 61       	ori	r24, 0x10	; 16
    16c6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    16c8:	ae e4       	ldi	r26, 0x4E	; 78
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ee e4       	ldi	r30, 0x4E	; 78
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    16d6:	af e4       	ldi	r26, 0x4F	; 79
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ef e4       	ldi	r30, 0x4F	; 79
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	82 60       	ori	r24, 0x02	; 2
    16e2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    16e4:	af e4       	ldi	r26, 0x4F	; 79
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ef e4       	ldi	r30, 0x4F	; 79
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	81 60       	ori	r24, 0x01	; 1
    16f0:	8c 93       	st	X, r24
    16f2:	64 c0       	rjmp	.+200    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_ICR1:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    16f4:	af e4       	ldi	r26, 0x4F	; 79
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ef e4       	ldi	r30, 0x4F	; 79
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 60       	ori	r24, 0x08	; 8
    1700:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    1702:	af e4       	ldi	r26, 0x4F	; 79
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ef e4       	ldi	r30, 0x4F	; 79
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	84 60       	ori	r24, 0x04	; 4
    170e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    1710:	ae e4       	ldi	r26, 0x4E	; 78
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ee e4       	ldi	r30, 0x4E	; 78
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	80 61       	ori	r24, 0x10	; 16
    171c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    171e:	ae e4       	ldi	r26, 0x4E	; 78
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	ee e4       	ldi	r30, 0x4E	; 78
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	88 60       	ori	r24, 0x08	; 8
    172a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    172c:	af e4       	ldi	r26, 0x4F	; 79
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ef e4       	ldi	r30, 0x4F	; 79
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8d 7f       	andi	r24, 0xFD	; 253
    1738:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    173a:	af e4       	ldi	r26, 0x4F	; 79
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ef e4       	ldi	r30, 0x4F	; 79
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
    1748:	39 c0       	rjmp	.+114    	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    174a:	ae e4       	ldi	r26, 0x4E	; 78
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ee e4       	ldi	r30, 0x4E	; 78
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	80 61       	ori	r24, 0x10	; 16
    1756:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1758:	ae e4       	ldi	r26, 0x4E	; 78
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ee e4       	ldi	r30, 0x4E	; 78
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	88 60       	ori	r24, 0x08	; 8
    1764:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1766:	af e4       	ldi	r26, 0x4F	; 79
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ef e4       	ldi	r30, 0x4F	; 79
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    1774:	af e4       	ldi	r26, 0x4F	; 79
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ef e4       	ldi	r30, 0x4F	; 79
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8e 7f       	andi	r24, 0xFE	; 254
    1780:	8c 93       	st	X, r24
    1782:	1c c0       	rjmp	.+56     	; 0x17bc <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    1784:	ae e4       	ldi	r26, 0x4E	; 78
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	ee e4       	ldi	r30, 0x4E	; 78
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 61       	ori	r24, 0x10	; 16
    1790:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1792:	ae e4       	ldi	r26, 0x4E	; 78
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ee e4       	ldi	r30, 0x4E	; 78
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	88 60       	ori	r24, 0x08	; 8
    179e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    17a0:	af e4       	ldi	r26, 0x4F	; 79
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ef e4       	ldi	r30, 0x4F	; 79
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	82 60       	ori	r24, 0x02	; 2
    17ac:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	8c 93       	st	X, r24
		break;
	}
	if (((*timerConfig).mode == TIMER16BIT_CTC_OCR1A)
    17bc:	e9 81       	ldd	r30, Y+1	; 0x01
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 70       	andi	r24, 0x0F	; 15
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <Timer1_init+0x4d0>
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	80 81       	ld	r24, Z
    17ce:	8f 70       	andi	r24, 0x0F	; 15
    17d0:	8c 30       	cpi	r24, 0x0C	; 12
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <Timer1_init+0x4d0>
    17d4:	f8 c0       	rjmp	.+496    	; 0x19c6 <Timer1_init+0x6c0>
			|| ((*timerConfig).mode == TIMER16BIT_CTC_ICR1))
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	80 81       	ld	r24, Z
    17dc:	82 95       	swap	r24
    17de:	86 95       	lsr	r24
    17e0:	86 95       	lsr	r24
    17e2:	83 70       	andi	r24, 0x03	; 3
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3a 87       	std	Y+10, r19	; 0x0a
    17ec:	29 87       	std	Y+9, r18	; 0x09
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	d9 f0       	breq	.+54     	; 0x182c <Timer1_init+0x526>
    17f6:	29 85       	ldd	r18, Y+9	; 0x09
    17f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17fa:	21 30       	cpi	r18, 0x01	; 1
    17fc:	31 05       	cpc	r19, r1
    17fe:	59 f5       	brne	.+86     	; 0x1856 <Timer1_init+0x550>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE1A);
    1800:	a9 e5       	ldi	r26, 0x59	; 89
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e9 e5       	ldi	r30, 0x59	; 89
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 61       	ori	r24, 0x10	; 16
    180c:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B);
    180e:	a9 e5       	ldi	r26, 0x59	; 89
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e9 e5       	ldi	r30, 0x59	; 89
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 60       	ori	r24, 0x08	; 8
    181a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    181c:	a9 e5       	ldi	r26, 0x59	; 89
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e9 e5       	ldi	r30, 0x59	; 89
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8b 7f       	andi	r24, 0xFB	; 251
    1828:	8c 93       	st	X, r24
    182a:	15 c0       	rjmp	.+42     	; 0x1856 <Timer1_init+0x550>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    182c:	a9 e5       	ldi	r26, 0x59	; 89
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e9 e5       	ldi	r30, 0x59	; 89
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8f 7e       	andi	r24, 0xEF	; 239
    1838:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    183a:	a9 e5       	ldi	r26, 0x59	; 89
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e9 e5       	ldi	r30, 0x59	; 89
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	87 7f       	andi	r24, 0xF7	; 247
    1846:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1848:	a9 e5       	ldi	r26, 0x59	; 89
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e9 e5       	ldi	r30, 0x59	; 89
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8b 7f       	andi	r24, 0xFB	; 251
    1854:	8c 93       	st	X, r24
			break;
		}
		/* Select compare mode */
		switch ((*timerConfig).compareOutputMode)
    1856:	e9 81       	ldd	r30, Y+1	; 0x01
    1858:	fa 81       	ldd	r31, Y+2	; 0x02
    185a:	80 81       	ld	r24, Z
    185c:	82 95       	swap	r24
    185e:	8f 70       	andi	r24, 0x0F	; 15
    1860:	83 70       	andi	r24, 0x03	; 3
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	38 87       	std	Y+8, r19	; 0x08
    1868:	2f 83       	std	Y+7, r18	; 0x07
    186a:	8f 81       	ldd	r24, Y+7	; 0x07
    186c:	98 85       	ldd	r25, Y+8	; 0x08
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	a1 f1       	breq	.+104    	; 0x18dc <Timer1_init+0x5d6>
    1874:	2f 81       	ldd	r18, Y+7	; 0x07
    1876:	38 85       	ldd	r19, Y+8	; 0x08
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	2c f4       	brge	.+10     	; 0x1888 <Timer1_init+0x582>
    187e:	8f 81       	ldd	r24, Y+7	; 0x07
    1880:	98 85       	ldd	r25, Y+8	; 0x08
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	71 f0       	breq	.+28     	; 0x18a2 <Timer1_init+0x59c>
    1886:	a3 c1       	rjmp	.+838    	; 0x1bce <Timer1_init+0x8c8>
    1888:	2f 81       	ldd	r18, Y+7	; 0x07
    188a:	38 85       	ldd	r19, Y+8	; 0x08
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <Timer1_init+0x58e>
    1892:	4b c0       	rjmp	.+150    	; 0x192a <Timer1_init+0x624>
    1894:	8f 81       	ldd	r24, Y+7	; 0x07
    1896:	98 85       	ldd	r25, Y+8	; 0x08
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <Timer1_init+0x59a>
    189e:	6c c0       	rjmp	.+216    	; 0x1978 <Timer1_init+0x672>
    18a0:	96 c1       	rjmp	.+812    	; 0x1bce <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    18a2:	af e4       	ldi	r26, 0x4F	; 79
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ef e4       	ldi	r30, 0x4F	; 79
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 77       	andi	r24, 0x7F	; 127
    18ae:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    18b0:	af e4       	ldi	r26, 0x4F	; 79
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ef e4       	ldi	r30, 0x4F	; 79
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 7d       	andi	r24, 0xDF	; 223
    18bc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    18be:	af e4       	ldi	r26, 0x4F	; 79
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ef e4       	ldi	r30, 0x4F	; 79
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 7b       	andi	r24, 0xBF	; 191
    18ca:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    18cc:	af e4       	ldi	r26, 0x4F	; 79
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ef e4       	ldi	r30, 0x4F	; 79
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8f 7e       	andi	r24, 0xEF	; 239
    18d8:	8c 93       	st	X, r24
    18da:	79 c1       	rjmp	.+754    	; 0x1bce <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    18dc:	af e4       	ldi	r26, 0x4F	; 79
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ef e4       	ldi	r30, 0x4F	; 79
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    18ea:	af e4       	ldi	r26, 0x4F	; 79
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ef e4       	ldi	r30, 0x4F	; 79
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 7d       	andi	r24, 0xDF	; 223
    18f6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    18f8:	af e4       	ldi	r26, 0x4F	; 79
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ef e4       	ldi	r30, 0x4F	; 79
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 64       	ori	r24, 0x40	; 64
    1904:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    1906:	af e4       	ldi	r26, 0x4F	; 79
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ef e4       	ldi	r30, 0x4F	; 79
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 61       	ori	r24, 0x10	; 16
    1912:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	64 e0       	ldi	r22, 0x04	; 4
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	65 e0       	ldi	r22, 0x05	; 5
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1928:	52 c1       	rjmp	.+676    	; 0x1bce <Timer1_init+0x8c8>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    192a:	af e4       	ldi	r26, 0x4F	; 79
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e4       	ldi	r30, 0x4F	; 79
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 68       	ori	r24, 0x80	; 128
    1936:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1938:	af e4       	ldi	r26, 0x4F	; 79
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ef e4       	ldi	r30, 0x4F	; 79
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 62       	ori	r24, 0x20	; 32
    1944:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1946:	af e4       	ldi	r26, 0x4F	; 79
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ef e4       	ldi	r30, 0x4F	; 79
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8f 7b       	andi	r24, 0xBF	; 191
    1952:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1954:	af e4       	ldi	r26, 0x4F	; 79
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ef e4       	ldi	r30, 0x4F	; 79
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 7e       	andi	r24, 0xEF	; 239
    1960:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	64 e0       	ldi	r22, 0x04	; 4
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	65 e0       	ldi	r22, 0x05	; 5
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1976:	2b c1       	rjmp	.+598    	; 0x1bce <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    1978:	af e4       	ldi	r26, 0x4F	; 79
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ef e4       	ldi	r30, 0x4F	; 79
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 68       	ori	r24, 0x80	; 128
    1984:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1986:	af e4       	ldi	r26, 0x4F	; 79
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ef e4       	ldi	r30, 0x4F	; 79
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 62       	ori	r24, 0x20	; 32
    1992:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    1994:	af e4       	ldi	r26, 0x4F	; 79
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ef e4       	ldi	r30, 0x4F	; 79
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 64       	ori	r24, 0x40	; 64
    19a0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    19a2:	af e4       	ldi	r26, 0x4F	; 79
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ef e4       	ldi	r30, 0x4F	; 79
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 61       	ori	r24, 0x10	; 16
    19ae:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	64 e0       	ldi	r22, 0x04	; 4
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	65 e0       	ldi	r22, 0x05	; 5
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    19c4:	04 c1       	rjmp	.+520    	; 0x1bce <Timer1_init+0x8c8>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    19c6:	e9 81       	ldd	r30, Y+1	; 0x01
    19c8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ca:	80 81       	ld	r24, Z
    19cc:	82 95       	swap	r24
    19ce:	86 95       	lsr	r24
    19d0:	86 95       	lsr	r24
    19d2:	83 70       	andi	r24, 0x03	; 3
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	3e 83       	std	Y+6, r19	; 0x06
    19dc:	2d 83       	std	Y+5, r18	; 0x05
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	d9 f0       	breq	.+54     	; 0x1a1c <Timer1_init+0x716>
    19e6:	2d 81       	ldd	r18, Y+5	; 0x05
    19e8:	3e 81       	ldd	r19, Y+6	; 0x06
    19ea:	21 30       	cpi	r18, 0x01	; 1
    19ec:	31 05       	cpc	r19, r1
    19ee:	59 f5       	brne	.+86     	; 0x1a46 <Timer1_init+0x740>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE1A);
    19f0:	a9 e5       	ldi	r26, 0x59	; 89
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e9 e5       	ldi	r30, 0x59	; 89
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8f 7e       	andi	r24, 0xEF	; 239
    19fc:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    19fe:	a9 e5       	ldi	r26, 0x59	; 89
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e9 e5       	ldi	r30, 0x59	; 89
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	87 7f       	andi	r24, 0xF7	; 247
    1a0a:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE1);
    1a0c:	a9 e5       	ldi	r26, 0x59	; 89
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e9 e5       	ldi	r30, 0x59	; 89
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	84 60       	ori	r24, 0x04	; 4
    1a18:	8c 93       	st	X, r24
    1a1a:	15 c0       	rjmp	.+42     	; 0x1a46 <Timer1_init+0x740>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    1a1c:	a9 e5       	ldi	r26, 0x59	; 89
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e9 e5       	ldi	r30, 0x59	; 89
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 7e       	andi	r24, 0xEF	; 239
    1a28:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    1a2a:	a9 e5       	ldi	r26, 0x59	; 89
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e9 e5       	ldi	r30, 0x59	; 89
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	87 7f       	andi	r24, 0xF7	; 247
    1a36:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    1a38:	a9 e5       	ldi	r26, 0x59	; 89
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e9 e5       	ldi	r30, 0x59	; 89
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8b 7f       	andi	r24, 0xFB	; 251
    1a44:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	80 81       	ld	r24, Z
    1a4c:	82 95       	swap	r24
    1a4e:	8f 70       	andi	r24, 0x0F	; 15
    1a50:	83 70       	andi	r24, 0x03	; 3
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	3c 83       	std	Y+4, r19	; 0x04
    1a58:	2b 83       	std	Y+3, r18	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	91 05       	cpc	r25, r1
    1a62:	a1 f1       	breq	.+104    	; 0x1acc <Timer1_init+0x7c6>
    1a64:	2b 81       	ldd	r18, Y+3	; 0x03
    1a66:	3c 81       	ldd	r19, Y+4	; 0x04
    1a68:	22 30       	cpi	r18, 0x02	; 2
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <Timer1_init+0x772>
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <Timer1_init+0x78c>
    1a76:	ab c0       	rjmp	.+342    	; 0x1bce <Timer1_init+0x8c8>
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7c:	22 30       	cpi	r18, 0x02	; 2
    1a7e:	31 05       	cpc	r19, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <Timer1_init+0x77e>
    1a82:	58 c0       	rjmp	.+176    	; 0x1b34 <Timer1_init+0x82e>
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <Timer1_init+0x78a>
    1a8e:	79 c0       	rjmp	.+242    	; 0x1b82 <Timer1_init+0x87c>
    1a90:	9e c0       	rjmp	.+316    	; 0x1bce <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1a92:	af e4       	ldi	r26, 0x4F	; 79
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 77       	andi	r24, 0x7F	; 127
    1a9e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1aa0:	af e4       	ldi	r26, 0x4F	; 79
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	ef e4       	ldi	r30, 0x4F	; 79
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 7d       	andi	r24, 0xDF	; 223
    1aac:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1aae:	af e4       	ldi	r26, 0x4F	; 79
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ef e4       	ldi	r30, 0x4F	; 79
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7b       	andi	r24, 0xBF	; 191
    1aba:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1abc:	af e4       	ldi	r26, 0x4F	; 79
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	ef e4       	ldi	r30, 0x4F	; 79
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8f 7e       	andi	r24, 0xEF	; 239
    1ac8:	8c 93       	st	X, r24
    1aca:	81 c0       	rjmp	.+258    	; 0x1bce <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    1acc:	af e4       	ldi	r26, 0x4F	; 79
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ef e4       	ldi	r30, 0x4F	; 79
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 77       	andi	r24, 0x7F	; 127
    1ad8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    1ada:	af e4       	ldi	r26, 0x4F	; 79
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ef e4       	ldi	r30, 0x4F	; 79
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 7d       	andi	r24, 0xDF	; 223
    1ae6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    1ae8:	af e4       	ldi	r26, 0x4F	; 79
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ef e4       	ldi	r30, 0x4F	; 79
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    1af6:	af e4       	ldi	r26, 0x4F	; 79
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	ef e4       	ldi	r30, 0x4F	; 79
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	80 61       	ori	r24, 0x10	; 16
    1b02:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				if ((*timerConfig).mode != TIMER16BIT_PHASE_FREQ_PWM_OCR1A
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 70       	andi	r24, 0x0F	; 15
    1b16:	89 30       	cpi	r24, 0x09	; 9
    1b18:	39 f4       	brne	.+14     	; 0x1b28 <Timer1_init+0x822>
    1b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 70       	andi	r24, 0x0F	; 15
    1b22:	8f 30       	cpi	r24, 0x0F	; 15
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <Timer1_init+0x822>
    1b26:	53 c0       	rjmp	.+166    	; 0x1bce <Timer1_init+0x8c8>
						|| (*timerConfig).mode != TIMER16BIT_FAST_PWM_OCR1A)
				{
					GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	65 e0       	ldi	r22, 0x05	; 5
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1b32:	4d c0       	rjmp	.+154    	; 0x1bce <Timer1_init+0x8c8>
				}
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    1b34:	af e4       	ldi	r26, 0x4F	; 79
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ef e4       	ldi	r30, 0x4F	; 79
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 68       	ori	r24, 0x80	; 128
    1b40:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1b42:	af e4       	ldi	r26, 0x4F	; 79
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	ef e4       	ldi	r30, 0x4F	; 79
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	80 62       	ori	r24, 0x20	; 32
    1b4e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    1b50:	af e4       	ldi	r26, 0x4F	; 79
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ef e4       	ldi	r30, 0x4F	; 79
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8f 7b       	andi	r24, 0xBF	; 191
    1b5c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    1b5e:	af e4       	ldi	r26, 0x4F	; 79
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	ef e4       	ldi	r30, 0x4F	; 79
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7e       	andi	r24, 0xEF	; 239
    1b6a:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	64 e0       	ldi	r22, 0x04	; 4
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	65 e0       	ldi	r22, 0x05	; 5
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1b80:	26 c0       	rjmp	.+76     	; 0x1bce <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    1b82:	af e4       	ldi	r26, 0x4F	; 79
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ef e4       	ldi	r30, 0x4F	; 79
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 68       	ori	r24, 0x80	; 128
    1b8e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    1b90:	af e4       	ldi	r26, 0x4F	; 79
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ef e4       	ldi	r30, 0x4F	; 79
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 62       	ori	r24, 0x20	; 32
    1b9c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    1b9e:	af e4       	ldi	r26, 0x4F	; 79
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ef e4       	ldi	r30, 0x4F	; 79
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 64       	ori	r24, 0x40	; 64
    1baa:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    1bac:	af e4       	ldi	r26, 0x4F	; 79
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ef e4       	ldi	r30, 0x4F	; 79
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 61       	ori	r24, 0x10	; 16
    1bb8:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	64 e0       	ldi	r22, 0x04	; 4
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	65 e0       	ldi	r22, 0x05	; 5
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			break;
		}
	}
}
    1bce:	2e 96       	adiw	r28, 0x0e	; 14
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <Timer1_setCallBack>:
 * 		normal mode or compare unit A interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBack(void (*Ptr2Function)(void))
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <Timer1_setCallBack+0x6>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitA_Ptr = Ptr2Function;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	90 93 6b 01 	sts	0x016B, r25
    1bf6:	80 93 6a 01 	sts	0x016A, r24
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <Timer1_setCallBackUnitB>:
 * 		compare unit B interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBackUnitB(void (*Ptr2Function)(void))
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <Timer1_setCallBackUnitB+0x6>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitB_Ptr = Ptr2Function;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	90 93 6d 01 	sts	0x016D, r25
    1c1a:	80 93 6c 01 	sts	0x016C, r24
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <Timer1_start>:
 * [In] compareValueB	: Indicates compare value for unit B.
 * [Return]				: Void.
 */
void Timer1_start(TIMER01_PRESCALER prescaler, uint16 start,
		uint16 compareValueA, uint16 compareValueB)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	27 97       	sbiw	r28, 0x07	; 7
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	7b 83       	std	Y+3, r23	; 0x03
    1c40:	6a 83       	std	Y+2, r22	; 0x02
    1c42:	5d 83       	std	Y+5, r21	; 0x05
    1c44:	4c 83       	std	Y+4, r20	; 0x04
    1c46:	3f 83       	std	Y+7, r19	; 0x07
    1c48:	2e 83       	std	Y+6, r18	; 0x06
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	87 70       	andi	r24, 0x07	; 7
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start; /* Set timer starting value */
    1c50:	ec e4       	ldi	r30, 0x4C	; 76
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
	/* Choose between compare unit A or compare unit B or both */
	OCR1A = compareValueA;
    1c5c:	ea e4       	ldi	r30, 0x4A	; 74
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
	OCR1B = compareValueB;
    1c68:	e8 e4       	ldi	r30, 0x48	; 72
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
	/* If interrupt is enable in initialization, enable it for
	 * it's corresponding compare unit chosen */
	if (compareValueA != 0 && compareValueB == 0)
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	a9 f0       	breq	.+42     	; 0x1ca6 <Timer1_start+0x7e>
    1c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	89 f4       	brne	.+34     	; 0x1ca6 <Timer1_start+0x7e>
	{
		if (BIT_IS_SET(TIMSK, OCIE1A))
    1c84:	e9 e5       	ldi	r30, 0x59	; 89
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	80 71       	andi	r24, 0x10	; 16
    1c90:	90 70       	andi	r25, 0x00	; 0
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	b9 f1       	breq	.+110    	; 0x1d04 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1B);
    1c96:	a9 e5       	ldi	r26, 0x59	; 89
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e9 e5       	ldi	r30, 0x59	; 89
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	87 7f       	andi	r24, 0xF7	; 247
    1ca2:	8c 93       	st	X, r24
    1ca4:	2f c0       	rjmp	.+94     	; 0x1d04 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB != 0)
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	a9 f4       	brne	.+42     	; 0x1cd8 <Timer1_start+0xb0>
    1cae:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	89 f0       	breq	.+34     	; 0x1cd8 <Timer1_start+0xb0>
	{
		if (BIT_IS_SET(TIMSK, OCIE1B))
    1cb6:	e9 e5       	ldi	r30, 0x59	; 89
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	88 70       	andi	r24, 0x08	; 8
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	f1 f0       	breq	.+60     	; 0x1d04 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1A);
    1cc8:	a9 e5       	ldi	r26, 0x59	; 89
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e9 e5       	ldi	r30, 0x59	; 89
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7e       	andi	r24, 0xEF	; 239
    1cd4:	8c 93       	st	X, r24
    1cd6:	16 c0       	rjmp	.+44     	; 0x1d04 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB == 0)
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	91 f4       	brne	.+36     	; 0x1d04 <Timer1_start+0xdc>
    1ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	71 f4       	brne	.+28     	; 0x1d04 <Timer1_start+0xdc>
	{
		CLEAR_BIT(TIMSK, OCIE1A);
    1ce8:	a9 e5       	ldi	r26, 0x59	; 89
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e9 e5       	ldi	r30, 0x59	; 89
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 7e       	andi	r24, 0xEF	; 239
    1cf4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1B);
    1cf6:	a9 e5       	ldi	r26, 0x59	; 89
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 e5       	ldi	r30, 0x59	; 89
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	87 7f       	andi	r24, 0xF7	; 247
    1d02:	8c 93       	st	X, r24
	}
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR1B, 0xF8, prescaler);
    1d04:	ae e4       	ldi	r26, 0x4E	; 78
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ee e4       	ldi	r30, 0x4E	; 78
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	98 2f       	mov	r25, r24
    1d10:	98 7f       	andi	r25, 0xF8	; 248
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	89 2b       	or	r24, r25
    1d16:	8c 93       	st	X, r24
}
    1d18:	27 96       	adiw	r28, 0x07	; 7
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <Timer1_stop>:
 * 		Function that stops timer1 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_stop(void)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR1B, 0xF8, 0x00); /* Clear pre-scaler */
    1d32:	ae e4       	ldi	r26, 0x4E	; 78
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	ee e4       	ldi	r30, 0x4E	; 78
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 7f       	andi	r24, 0xF8	; 248
    1d3e:	8c 93       	st	X, r24
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <Timer1_deInit>:
 * 		Function that clears all timer1 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_deInit(void)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	2a 97       	sbiw	r28, 0x0a	; 10
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
	/* Clear timer1 registers */
	CLEAR_REG(TCCR1A);
    1d5a:	ef e4       	ldi	r30, 0x4F	; 79
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	ef e4       	ldi	r30, 0x4F	; 79
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    1d66:	ee e4       	ldi	r30, 0x4E	; 78
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	90 81       	ld	r25, Z
    1d6c:	ee e4       	ldi	r30, 0x4E	; 78
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	10 82       	st	Z, r1
	CLEAR_REG(TCNT1);
    1d72:	ec e4       	ldi	r30, 0x4C	; 76
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	ec e4       	ldi	r30, 0x4C	; 76
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	11 82       	std	Z+1, r1	; 0x01
    1d80:	10 82       	st	Z, r1
	CLEAR_REG(OCR1A);
    1d82:	ea e4       	ldi	r30, 0x4A	; 74
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	ea e4       	ldi	r30, 0x4A	; 74
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	11 82       	std	Z+1, r1	; 0x01
    1d90:	10 82       	st	Z, r1
	CLEAR_REG(OCR1B);
    1d92:	e8 e4       	ldi	r30, 0x48	; 72
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	e8 e4       	ldi	r30, 0x48	; 72
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	11 82       	std	Z+1, r1	; 0x01
    1da0:	10 82       	st	Z, r1
	CLEAR_REG(ICR1);
    1da2:	e6 e4       	ldi	r30, 0x46	; 70
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	e6 e4       	ldi	r30, 0x46	; 70
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	11 82       	std	Z+1, r1	; 0x01
    1db0:	10 82       	st	Z, r1
	/* Disable timer1 interrupts */
	CLEAR_BIT(TIMSK, TICIE1);
    1db2:	a9 e5       	ldi	r26, 0x59	; 89
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e9 e5       	ldi	r30, 0x59	; 89
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8f 7d       	andi	r24, 0xDF	; 223
    1dbe:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    1dc0:	a9 e5       	ldi	r26, 0x59	; 89
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e9 e5       	ldi	r30, 0x59	; 89
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8f 7e       	andi	r24, 0xEF	; 239
    1dcc:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    1dce:	a9 e5       	ldi	r26, 0x59	; 89
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e9 e5       	ldi	r30, 0x59	; 89
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	87 7f       	andi	r24, 0xF7	; 247
    1dda:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE1);
    1ddc:	a9 e5       	ldi	r26, 0x59	; 89
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e9 e5       	ldi	r30, 0x59	; 89
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8b 7f       	andi	r24, 0xFB	; 251
    1de8:	8c 93       	st	X, r24
	/* Clear timer1 flags */
	SET_BIT(TIFR, ICF1);
    1dea:	a8 e5       	ldi	r26, 0x58	; 88
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e8 e5       	ldi	r30, 0x58	; 88
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 62       	ori	r24, 0x20	; 32
    1df6:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1A);
    1df8:	a8 e5       	ldi	r26, 0x58	; 88
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e8 e5       	ldi	r30, 0x58	; 88
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 61       	ori	r24, 0x10	; 16
    1e04:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1B);
    1e06:	a8 e5       	ldi	r26, 0x58	; 88
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e8 e5       	ldi	r30, 0x58	; 88
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 60       	ori	r24, 0x08	; 8
    1e12:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV1);
    1e14:	a8 e5       	ldi	r26, 0x58	; 88
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e8 e5       	ldi	r30, 0x58	; 88
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	84 60       	ori	r24, 0x04	; 4
    1e20:	8c 93       	st	X, r24
}
    1e22:	2a 96       	adiw	r28, 0x0a	; 10
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <USART_init>:
 * 			3. Sets UART baud rate.
 * [Args] USARTConfig	: Contains baud rate, character size, parity mode & stop bit.
 * [Return]				: Void.
 */
void USART_init(const USART_initConfig *USARTConfig)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	28 97       	sbiw	r28, 0x08	; 8
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
	/* Define a variable that will hold UBRR value*/
	uint16 UBRRValue = 0;
    1e4c:	1a 82       	std	Y+2, r1	; 0x02
    1e4e:	19 82       	std	Y+1, r1	; 0x01
	/* Clear previous USART initialization data */
	CLEAR_REG(UCSRA);
    1e50:	eb e2       	ldi	r30, 0x2B	; 43
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	eb e2       	ldi	r30, 0x2B	; 43
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	10 82       	st	Z, r1
	CLEAR_REG(UCSRB);
    1e5c:	ea e2       	ldi	r30, 0x2A	; 42
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	ea e2       	ldi	r30, 0x2A	; 42
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	10 82       	st	Z, r1
	CLEAR_REG(UCSRC);
    1e68:	e0 e4       	ldi	r30, 0x40	; 64
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	e0 e4       	ldi	r30, 0x40	; 64
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	10 82       	st	Z, r1
	OVERWRITE_REG(UBRRH, 0xF0, 0x00);
    1e74:	a0 e4       	ldi	r26, 0x40	; 64
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e0 e4       	ldi	r30, 0x40	; 64
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	80 7f       	andi	r24, 0xF0	; 240
    1e80:	8c 93       	st	X, r24
	CLEAR_REG(UBRRL);
    1e82:	e9 e2       	ldi	r30, 0x29	; 41
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	e9 e2       	ldi	r30, 0x29	; 41
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	10 82       	st	Z, r1

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Enable double transmission speed */
	SET_BIT(UCSRA, U2X);
    1e8e:	ab e2       	ldi	r26, 0x2B	; 43
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	eb e2       	ldi	r30, 0x2B	; 43
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	82 60       	ori	r24, 0x02	; 2
    1e9a:	8c 93       	st	X, r24
	OVERWRITE_REG(UCSRB, 0x1F, 0xE0);

#endif

	/* Enable receiver & override receiver pin settings */
	SET_BIT(UCSRB, RXEN);
    1e9c:	aa e2       	ldi	r26, 0x2A	; 42
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ea e2       	ldi	r30, 0x2A	; 42
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 61       	ori	r24, 0x10	; 16
    1ea8:	8c 93       	st	X, r24
	/* Enable transmitter & override transmitter pin settings */
	SET_BIT(UCSRB, TXEN);
    1eaa:	aa e2       	ldi	r26, 0x2A	; 42
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ea e2       	ldi	r30, 0x2A	; 42
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 60       	ori	r24, 0x08	; 8
    1eb6:	8c 93       	st	X, r24
	/* Set most significant bit of character size */
	OVERWRITE_REG(UCSRB, 0xFB, GET_BIT((*USARTConfig).characterSize, 2) << 2);
    1eb8:	aa e2       	ldi	r26, 0x2A	; 42
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ea e2       	ldi	r30, 0x2A	; 42
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	98 2f       	mov	r25, r24
    1ec4:	9b 7f       	andi	r25, 0xFB	; 251
    1ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eca:	84 81       	ldd	r24, Z+4	; 0x04
    1ecc:	87 70       	andi	r24, 0x07	; 7
    1ece:	84 70       	andi	r24, 0x04	; 4
    1ed0:	89 2b       	or	r24, r25
    1ed2:	8c 93       	st	X, r24
	/* Write in UCSRC */
	SET_BIT(UCSRC, URSEL);
    1ed4:	a0 e4       	ldi	r26, 0x40	; 64
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e0 e4       	ldi	r30, 0x40	; 64
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	80 68       	ori	r24, 0x80	; 128
    1ee0:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UMSEL);

#endif

	/* Set parity mode */
	OVERWRITE_REG(UCSRC, 0xCF, (*USARTConfig).parityMode << 4);
    1ee2:	a0 e4       	ldi	r26, 0x40	; 64
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e0 e4       	ldi	r30, 0x40	; 64
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	28 2f       	mov	r18, r24
    1eee:	2f 7c       	andi	r18, 0xCF	; 207
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	84 81       	ldd	r24, Z+4	; 0x04
    1ef6:	86 95       	lsr	r24
    1ef8:	86 95       	lsr	r24
    1efa:	86 95       	lsr	r24
    1efc:	83 70       	andi	r24, 0x03	; 3
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	82 95       	swap	r24
    1f04:	92 95       	swap	r25
    1f06:	90 7f       	andi	r25, 0xF0	; 240
    1f08:	98 27       	eor	r25, r24
    1f0a:	80 7f       	andi	r24, 0xF0	; 240
    1f0c:	98 27       	eor	r25, r24
    1f0e:	82 2b       	or	r24, r18
    1f10:	8c 93       	st	X, r24
	/* Set stop bit */
	OVERWRITE_REG(UCSRC, 0xF7, GET_BIT((*USARTConfig).stopBit, 0) << 3);
    1f12:	a0 e4       	ldi	r26, 0x40	; 64
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e0 e4       	ldi	r30, 0x40	; 64
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	27 7f       	andi	r18, 0xF7	; 247
    1f20:	eb 81       	ldd	r30, Y+3	; 0x03
    1f22:	fc 81       	ldd	r31, Y+4	; 0x04
    1f24:	84 81       	ldd	r24, Z+4	; 0x04
    1f26:	82 95       	swap	r24
    1f28:	86 95       	lsr	r24
    1f2a:	87 70       	andi	r24, 0x07	; 7
    1f2c:	81 70       	andi	r24, 0x01	; 1
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	81 70       	andi	r24, 0x01	; 1
    1f34:	90 70       	andi	r25, 0x00	; 0
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	82 2b       	or	r24, r18
    1f44:	8c 93       	st	X, r24
	/* Set two least significant bits of character size */
	OVERWRITE_REG(UCSRC, 0xF9, ((*USARTConfig).characterSize & 0x03) << 1);
    1f46:	a0 e4       	ldi	r26, 0x40	; 64
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e0 e4       	ldi	r30, 0x40	; 64
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	28 2f       	mov	r18, r24
    1f52:	29 7f       	andi	r18, 0xF9	; 249
    1f54:	eb 81       	ldd	r30, Y+3	; 0x03
    1f56:	fc 81       	ldd	r31, Y+4	; 0x04
    1f58:	84 81       	ldd	r24, Z+4	; 0x04
    1f5a:	87 70       	andi	r24, 0x07	; 7
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	83 70       	andi	r24, 0x03	; 3
    1f62:	90 70       	andi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	82 2b       	or	r24, r18
    1f6a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCPOL);

#endif

	/* Write in UBRRL & UBRRH */
	CLEAR_BIT(UCSRC, URSEL);
    1f6c:	a0 e4       	ldi	r26, 0x40	; 64
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e0 e4       	ldi	r30, 0x40	; 64
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 77       	andi	r24, 0x7F	; 127
    1f78:	8c 93       	st	X, r24

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Calculate the UBRR register value */
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 8UL))) - 1);
    1f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	a2 81       	ldd	r26, Z+2	; 0x02
    1f84:	b3 81       	ldd	r27, Z+3	; 0x03
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	aa 1f       	adc	r26, r26
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	aa 1f       	adc	r26, r26
    1f94:	bb 1f       	adc	r27, r27
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	aa 1f       	adc	r26, r26
    1f9c:	bb 1f       	adc	r27, r27
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	ad 01       	movw	r20, r26
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	92 e1       	ldi	r25, 0x12	; 18
    1fa6:	aa e7       	ldi	r26, 0x7A	; 122
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__udivmodsi4>
    1fb2:	da 01       	movw	r26, r20
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 16UL))) - 1);

#endif

	/* Set 4 most significant bits of UBRRValue in UBRRH */
	UBRRH = UBRRValue >> 8;
    1fbc:	e0 e4       	ldi	r30, 0x40	; 64
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	89 2f       	mov	r24, r25
    1fc6:	99 27       	eor	r25, r25
    1fc8:	80 83       	st	Z, r24
	/* Set 8 least significant bits of UBRRValue in UBRRL */
	UBRRL = UBRRValue;
    1fca:	e9 e2       	ldi	r30, 0x29	; 41
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	80 83       	st	Z, r24
}
    1fd2:	28 96       	adiw	r28, 0x08	; 8
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <USART_sendByte>:

void USART_sendByte(const uint8 data)

#endif

{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	0f 92       	push	r0
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	89 83       	std	Y+1, r24	; 0x01
	UDR = (data & 0xFF);

#else

	/* Wait for data register empty flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    1ff0:	eb e2       	ldi	r30, 0x2B	; 43
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	80 72       	andi	r24, 0x20	; 32
    1ffc:	90 70       	andi	r25, 0x00	; 0
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	b9 f3       	breq	.-18     	; 0x1ff0 <USART_sendByte+0xc>
	/* Put the data in the UDR, flag is automatically cleared */
	UDR = data;
    2002:	ec e2       	ldi	r30, 0x2C	; 44
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	80 83       	st	Z, r24
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

#endif

}
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <USART_recieveByte>:

uint8 USART_recieveByte(void)

#endif

{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
	return UDRValue;

#else

	/* Wait for receive complete flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, RXC));
    201a:	eb e2       	ldi	r30, 0x2B	; 43
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	88 23       	and	r24, r24
    2022:	dc f7       	brge	.-10     	; 0x201a <USART_recieveByte+0x8>
	/* Read received data from UDR, flag is automatically cleared */
	return UDR;
    2024:	ec e2       	ldi	r30, 0x2C	; 44
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z

#endif

}
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <USART_sendString>:
 * 		Function that sends string through USART.
 * [Args] string	: Indicates string to be sent.
 * [Return]			: Void.
 */
void USART_sendString(const uint8 *string)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <USART_sendString+0x6>
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9b 83       	std	Y+3, r25	; 0x03
    203e:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    2040:	19 82       	std	Y+1, r1	; 0x01
    2042:	0e c0       	rjmp	.+28     	; 0x2060 <USART_sendString+0x30>
	/* Send the string */
	while (string[i] != '\0')
	{
		USART_sendByte(string[i]);
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	fc 01       	movw	r30, r24
    2050:	e2 0f       	add	r30, r18
    2052:	f3 1f       	adc	r31, r19
    2054:	80 81       	ld	r24, Z
    2056:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
		i++;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	8f 5f       	subi	r24, 0xFF	; 255
    205e:	89 83       	std	Y+1, r24	; 0x01
void USART_sendString(const uint8 *string)
{
	/* Define a counter variable */
	uint8 i = 0;
	/* Send the string */
	while (string[i] != '\0')
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	fc 01       	movw	r30, r24
    206c:	e2 0f       	add	r30, r18
    206e:	f3 1f       	adc	r31, r19
    2070:	80 81       	ld	r24, Z
    2072:	88 23       	and	r24, r24
    2074:	39 f7       	brne	.-50     	; 0x2044 <USART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <USART_receiveString>:
 * [Args] 			: Void.
 * [Out] string		: Indicates the whole string that is received until (#) symbol.
 * [Return]			: Void.
 */
void USART_receiveString(uint8 *string)
{
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <USART_receiveString+0xa>
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	9b 83       	std	Y+3, r25	; 0x03
    2094:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    2096:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	string[i] = USART_recieveByte();
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	8c 01       	movw	r16, r24
    20a4:	02 0f       	add	r16, r18
    20a6:	13 1f       	adc	r17, r19
    20a8:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    20ac:	f8 01       	movw	r30, r16
    20ae:	80 83       	st	Z, r24
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <USART_receiveString+0x4e>
	/* Receive the string until the (#) */
	while (string[i] != '#')
	{
		i++;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	89 83       	std	Y+1, r24	; 0x01
		string[i] = USART_recieveByte();
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	8c 01       	movw	r16, r24
    20c4:	02 0f       	add	r16, r18
    20c6:	13 1f       	adc	r17, r19
    20c8:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 83       	st	Z, r24
	/* Define a counter variable */
	uint8 i = 0;
	/* Receive the first byte */
	string[i] = USART_recieveByte();
	/* Receive the string until the (#) */
	while (string[i] != '#')
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	fc 01       	movw	r30, r24
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	80 81       	ld	r24, Z
    20e2:	83 32       	cpi	r24, 0x23	; 35
    20e4:	31 f7       	brne	.-52     	; 0x20b2 <USART_receiveString+0x30>
	{
		i++;
		string[i] = USART_recieveByte();
	}
	/* Replace (#) with (\0) After receiving */
	string[i] = '\0';
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	fc 01       	movw	r30, r24
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	10 82       	st	Z, r1
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <Keypad_getPressedKey>:
 * 		Function that gets the key that is pressed in the keypad.
 * [Args]		: Void.
 * [Return]		: Keypad pressed button corresponding number through mapping.
 */
uint8 Keypad_getPressedKey(void)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <Keypad_getPressedKey+0x6>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
	/* Define variables to be looped about */
	uint8 column, row;
	/* Configure keypad pins */
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	64 e0       	ldi	r22, 0x04	; 4
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	65 e0       	ldi	r22, 0x05	; 5
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	66 e0       	ldi	r22, 0x06	; 6
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	67 e0       	ldi	r22, 0x07	; 7
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			PIN_INPUT);

#if(KEYPAD_NUM_COLS == 4)

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif

	while (TRUE)
	{
		/* Loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    2162:	19 82       	std	Y+1, r1	; 0x01
    2164:	3b c0       	rjmp	.+118    	; 0x21dc <Keypad_getPressedKey+0xd4>
		{
			/* Set the current row pin as output pin */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	98 2f       	mov	r25, r24
    216a:	9c 5f       	subi	r25, 0xFC	; 252
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	69 2f       	mov	r22, r25
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			/* Set or clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	98 2f       	mov	r25, r24
    217a:	9c 5f       	subi	r25, 0xFC	; 252
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	69 2f       	mov	r22, r25
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);
			/* Loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    2186:	1a 82       	std	Y+2, r1	; 0x02
    2188:	1b c0       	rjmp	.+54     	; 0x21c0 <Keypad_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	6a 81       	ldd	r22, Y+2	; 0x02
    218e:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    2192:	88 23       	and	r24, r24
    2194:	91 f4       	brne	.+36     	; 0x21ba <Keypad_getPressedKey+0xb2>
					/* An equation to return the pressed button number */
					return ((row * KEYPAD_NUM_COLS) + column + 1);

#else
					/* An equation to return the pressed button number */
					return Keypad_4x4_adjustKeyNumber(
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	98 2f       	mov	r25, r24
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	89 0f       	add	r24, r25
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <Keypad_4x4_adjustKeyNumber>
			/* Set the current row pin as input pin */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
		}
	}
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			/* Set or clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);
			/* Loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	10 f3       	brcs	.-60     	; 0x218a <Keypad_getPressedKey+0x82>

#endif
				}
			}
			/* Set the current row pin as input pin */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	98 2f       	mov	r25, r24
    21ca:	9c 5f       	subi	r25, 0xFC	; 252
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	69 2f       	mov	r22, r25
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif

	while (TRUE)
	{
		/* Loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	84 30       	cpi	r24, 0x04	; 4
    21e0:	10 f2       	brcs	.-124    	; 0x2166 <Keypad_getPressedKey+0x5e>
    21e2:	bf cf       	rjmp	.-130    	; 0x2162 <Keypad_getPressedKey+0x5a>

000021e4 <Keypad_4x4_adjustKeyNumber>:
 * [Args]	:
 * [In] buttonNumber : Indicates pressed button number.
 * [Return]			 : Keypad pressed button corresponding number.
 */
static uint8 Keypad_4x4_adjustKeyNumber(uint8 buttonNumber)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <Keypad_4x4_adjustKeyNumber+0x6>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <Keypad_4x4_adjustKeyNumber+0x8>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a variable that will be returned from the function */
	uint8 keypadButton = 0;
    21f2:	19 82       	std	Y+1, r1	; 0x01
	/* Select pressed button corresponding value accordingly */
	switch (buttonNumber)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3c 83       	std	Y+4, r19	; 0x04
    21fc:	2b 83       	std	Y+3, r18	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	88 30       	cpi	r24, 0x08	; 8
    2204:	91 05       	cpc	r25, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <Keypad_4x4_adjustKeyNumber+0x26>
    2208:	70 c0       	rjmp	.+224    	; 0x22ea <Keypad_4x4_adjustKeyNumber+0x106>
    220a:	2b 81       	ldd	r18, Y+3	; 0x03
    220c:	3c 81       	ldd	r19, Y+4	; 0x04
    220e:	29 30       	cpi	r18, 0x09	; 9
    2210:	31 05       	cpc	r19, r1
    2212:	5c f5       	brge	.+86     	; 0x226a <Keypad_4x4_adjustKeyNumber+0x86>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	84 30       	cpi	r24, 0x04	; 4
    221a:	91 05       	cpc	r25, r1
    221c:	09 f4       	brne	.+2      	; 0x2220 <Keypad_4x4_adjustKeyNumber+0x3c>
    221e:	59 c0       	rjmp	.+178    	; 0x22d2 <Keypad_4x4_adjustKeyNumber+0xee>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	25 30       	cpi	r18, 0x05	; 5
    2226:	31 05       	cpc	r19, r1
    2228:	9c f4       	brge	.+38     	; 0x2250 <Keypad_4x4_adjustKeyNumber+0x6c>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <Keypad_4x4_adjustKeyNumber+0x52>
    2234:	48 c0       	rjmp	.+144    	; 0x22c6 <Keypad_4x4_adjustKeyNumber+0xe2>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	23 30       	cpi	r18, 0x03	; 3
    223c:	31 05       	cpc	r19, r1
    223e:	0c f0       	brlt	.+2      	; 0x2242 <Keypad_4x4_adjustKeyNumber+0x5e>
    2240:	45 c0       	rjmp	.+138    	; 0x22cc <Keypad_4x4_adjustKeyNumber+0xe8>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	91 05       	cpc	r25, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <Keypad_4x4_adjustKeyNumber+0x6a>
    224c:	39 c0       	rjmp	.+114    	; 0x22c0 <Keypad_4x4_adjustKeyNumber+0xdc>
    224e:	67 c0       	rjmp	.+206    	; 0x231e <Keypad_4x4_adjustKeyNumber+0x13a>
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	3c 81       	ldd	r19, Y+4	; 0x04
    2254:	26 30       	cpi	r18, 0x06	; 6
    2256:	31 05       	cpc	r19, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <Keypad_4x4_adjustKeyNumber+0x78>
    225a:	41 c0       	rjmp	.+130    	; 0x22de <Keypad_4x4_adjustKeyNumber+0xfa>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	87 30       	cpi	r24, 0x07	; 7
    2262:	91 05       	cpc	r25, r1
    2264:	0c f0       	brlt	.+2      	; 0x2268 <Keypad_4x4_adjustKeyNumber+0x84>
    2266:	3e c0       	rjmp	.+124    	; 0x22e4 <Keypad_4x4_adjustKeyNumber+0x100>
    2268:	37 c0       	rjmp	.+110    	; 0x22d8 <Keypad_4x4_adjustKeyNumber+0xf4>
    226a:	2b 81       	ldd	r18, Y+3	; 0x03
    226c:	3c 81       	ldd	r19, Y+4	; 0x04
    226e:	2c 30       	cpi	r18, 0x0C	; 12
    2270:	31 05       	cpc	r19, r1
    2272:	09 f4       	brne	.+2      	; 0x2276 <Keypad_4x4_adjustKeyNumber+0x92>
    2274:	46 c0       	rjmp	.+140    	; 0x2302 <Keypad_4x4_adjustKeyNumber+0x11e>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	8d 30       	cpi	r24, 0x0D	; 13
    227c:	91 05       	cpc	r25, r1
    227e:	5c f4       	brge	.+22     	; 0x2296 <Keypad_4x4_adjustKeyNumber+0xb2>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	2a 30       	cpi	r18, 0x0A	; 10
    2286:	31 05       	cpc	r19, r1
    2288:	b1 f1       	breq	.+108    	; 0x22f6 <Keypad_4x4_adjustKeyNumber+0x112>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	8b 30       	cpi	r24, 0x0B	; 11
    2290:	91 05       	cpc	r25, r1
    2292:	a4 f5       	brge	.+104    	; 0x22fc <Keypad_4x4_adjustKeyNumber+0x118>
    2294:	2d c0       	rjmp	.+90     	; 0x22f0 <Keypad_4x4_adjustKeyNumber+0x10c>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	2e 30       	cpi	r18, 0x0E	; 14
    229c:	31 05       	cpc	r19, r1
    229e:	b9 f1       	breq	.+110    	; 0x230e <Keypad_4x4_adjustKeyNumber+0x12a>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	8e 30       	cpi	r24, 0x0E	; 14
    22a6:	91 05       	cpc	r25, r1
    22a8:	7c f1       	brlt	.+94     	; 0x2308 <Keypad_4x4_adjustKeyNumber+0x124>
    22aa:	2b 81       	ldd	r18, Y+3	; 0x03
    22ac:	3c 81       	ldd	r19, Y+4	; 0x04
    22ae:	2f 30       	cpi	r18, 0x0F	; 15
    22b0:	31 05       	cpc	r19, r1
    22b2:	79 f1       	breq	.+94     	; 0x2312 <Keypad_4x4_adjustKeyNumber+0x12e>
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	80 31       	cpi	r24, 0x10	; 16
    22ba:	91 05       	cpc	r25, r1
    22bc:	69 f1       	breq	.+90     	; 0x2318 <Keypad_4x4_adjustKeyNumber+0x134>
    22be:	2f c0       	rjmp	.+94     	; 0x231e <Keypad_4x4_adjustKeyNumber+0x13a>
	{
		case 1:
			keypadButton = 7;
    22c0:	87 e0       	ldi	r24, 0x07	; 7
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	2e c0       	rjmp	.+92     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 2:
			keypadButton = 8;
    22c6:	88 e0       	ldi	r24, 0x08	; 8
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	2b c0       	rjmp	.+86     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 3:
			keypadButton = 9;
    22cc:	89 e0       	ldi	r24, 0x09	; 9
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	28 c0       	rjmp	.+80     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 4:
			keypadButton = '%';
    22d2:	85 e2       	ldi	r24, 0x25	; 37
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	25 c0       	rjmp	.+74     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 5:
			keypadButton = 4;
    22d8:	84 e0       	ldi	r24, 0x04	; 4
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	22 c0       	rjmp	.+68     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 6:
			keypadButton = 5;
    22de:	85 e0       	ldi	r24, 0x05	; 5
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	1f c0       	rjmp	.+62     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 7:
			keypadButton = 6;
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	1c c0       	rjmp	.+56     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 8:
			keypadButton = '*';
    22ea:	8a e2       	ldi	r24, 0x2A	; 42
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	19 c0       	rjmp	.+50     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 9:
			keypadButton = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	16 c0       	rjmp	.+44     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 10:
			keypadButton = 2;
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	13 c0       	rjmp	.+38     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 11:
			keypadButton = 3;
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	10 c0       	rjmp	.+32     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 12:
			keypadButton = '-';
    2302:	8d e2       	ldi	r24, 0x2D	; 45
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	0d c0       	rjmp	.+26     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 13:
			keypadButton = 13;
    2308:	8d e0       	ldi	r24, 0x0D	; 13
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	0a c0       	rjmp	.+20     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 14:
			keypadButton = 0;
    230e:	19 82       	std	Y+1, r1	; 0x01
    2310:	08 c0       	rjmp	.+16     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 15:
			keypadButton = '=';
    2312:	8d e3       	ldi	r24, 0x3D	; 61
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	05 c0       	rjmp	.+10     	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 16:
			keypadButton = '+';
    2318:	8b e2       	ldi	r24, 0x2B	; 43
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		default:
			keypadButton = buttonNumber;
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Return the selected value */
	return keypadButton;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <LCD_init>:
 * 			2. Setup the LCD data mode (4 BIT MODE/8 BIT MODE).
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_init(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	2e 97       	sbiw	r28, 0x0e	; 14
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
	/* Configure direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	62 e0       	ldi	r22, 0x02	; 2
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 ea       	ldi	r26, 0xA0	; 160
    2374:	b1 e4       	ldi	r27, 0x41	; 65
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a ef       	ldi	r20, 0xFA	; 250
    238c:	54 e4       	ldi	r21, 0x44	; 68
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <LCD_init+0x8e>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <LCD_init+0x10c>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <LCD_init+0xee>
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_init+0xdc>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <LCD_init+0xd0>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_init+0x118>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	6f ef       	ldi	r22, 0xFF	; 255
    2456:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>
	/* Use two lines LCD in 8-bits data mode & (5x7) dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    245a:	88 e3       	ldi	r24, 0x38	; 56
    245c:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Turn cursor off */
    2460:	8c e0       	ldi	r24, 0x0C	; 12
    2462:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
}
    246c:	2e 96       	adiw	r28, 0x0e	; 14
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <LCD_sendCommand>:
 * [Args]	:
 * [In] command	: Indicates the command that is sent.
 * [Return]		: Void.
 */
void LCD_sendCommand(uint8 command)
{
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	e9 97       	sbiw	r28, 0x39	; 57
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS = 0 */
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 e8       	ldi	r26, 0x80	; 128
    24a4:	bf e3       	ldi	r27, 0x3F	; 63
    24a6:	8d ab       	std	Y+53, r24	; 0x35
    24a8:	9e ab       	std	Y+54, r25	; 0x36
    24aa:	af ab       	std	Y+55, r26	; 0x37
    24ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6d a9       	ldd	r22, Y+53	; 0x35
    24b0:	7e a9       	ldd	r23, Y+54	; 0x36
    24b2:	8f a9       	ldd	r24, Y+55	; 0x37
    24b4:	98 ad       	ldd	r25, Y+56	; 0x38
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a ef       	ldi	r20, 0xFA	; 250
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	89 ab       	std	Y+49, r24	; 0x31
    24c8:	9a ab       	std	Y+50, r25	; 0x32
    24ca:	ab ab       	std	Y+51, r26	; 0x33
    24cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ce:	69 a9       	ldd	r22, Y+49	; 0x31
    24d0:	7a a9       	ldd	r23, Y+50	; 0x32
    24d2:	8b a9       	ldd	r24, Y+51	; 0x33
    24d4:	9c a9       	ldd	r25, Y+52	; 0x34
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_sendCommand+0x72>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	98 ab       	std	Y+48, r25	; 0x30
    24ec:	8f a7       	std	Y+47, r24	; 0x2f
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    24f0:	69 a9       	ldd	r22, Y+49	; 0x31
    24f2:	7a a9       	ldd	r23, Y+50	; 0x32
    24f4:	8b a9       	ldd	r24, Y+51	; 0x33
    24f6:	9c a9       	ldd	r25, Y+52	; 0x34
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6d a9       	ldd	r22, Y+53	; 0x35
    250a:	7e a9       	ldd	r23, Y+54	; 0x36
    250c:	8f a9       	ldd	r24, Y+55	; 0x37
    250e:	98 ad       	ldd	r25, Y+56	; 0x38
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	98 ab       	std	Y+48, r25	; 0x30
    252e:	8f a7       	std	Y+47, r24	; 0x2f
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_sendCommand+0xd2>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9e a7       	std	Y+46, r25	; 0x2e
    2538:	8d a7       	std	Y+45, r24	; 0x2d
    253a:	8d a5       	ldd	r24, Y+45	; 0x2d
    253c:	9e a5       	ldd	r25, Y+46	; 0x2e
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_sendCommand+0xc0>
    2542:	9e a7       	std	Y+46, r25	; 0x2e
    2544:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8f a5       	ldd	r24, Y+47	; 0x2f
    2548:	98 a9       	ldd	r25, Y+48	; 0x30
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	98 ab       	std	Y+48, r25	; 0x30
    254e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8f a5       	ldd	r24, Y+47	; 0x2f
    2552:	98 a9       	ldd	r25, Y+48	; 0x30
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_sendCommand+0xb4>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	69 a9       	ldd	r22, Y+49	; 0x31
    255c:	7a a9       	ldd	r23, Y+50	; 0x32
    255e:	8b a9       	ldd	r24, Y+51	; 0x33
    2560:	9c a9       	ldd	r25, Y+52	; 0x34
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	98 ab       	std	Y+48, r25	; 0x30
    256c:	8f a7       	std	Y+47, r24	; 0x2f
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	9c a7       	std	Y+44, r25	; 0x2c
    2574:	8b a7       	std	Y+43, r24	; 0x2b
    2576:	8b a5       	ldd	r24, Y+43	; 0x2b
    2578:	9c a5       	ldd	r25, Y+44	; 0x2c
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_sendCommand+0xfc>
    257e:	9c a7       	std	Y+44, r25	; 0x2c
    2580:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	8f a3       	std	Y+39, r24	; 0x27
    2596:	98 a7       	std	Y+40, r25	; 0x28
    2598:	a9 a7       	std	Y+41, r26	; 0x29
    259a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6f a1       	ldd	r22, Y+39	; 0x27
    259e:	78 a5       	ldd	r23, Y+40	; 0x28
    25a0:	89 a5       	ldd	r24, Y+41	; 0x29
    25a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8b a3       	std	Y+35, r24	; 0x23
    25b6:	9c a3       	std	Y+36, r25	; 0x24
    25b8:	ad a3       	std	Y+37, r26	; 0x25
    25ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25bc:	6b a1       	ldd	r22, Y+35	; 0x23
    25be:	7c a1       	ldd	r23, Y+36	; 0x24
    25c0:	8d a1       	ldd	r24, Y+37	; 0x25
    25c2:	9e a1       	ldd	r25, Y+38	; 0x26
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <LCD_sendCommand+0x160>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    25de:	6b a1       	ldd	r22, Y+35	; 0x23
    25e0:	7c a1       	ldd	r23, Y+36	; 0x24
    25e2:	8d a1       	ldd	r24, Y+37	; 0x25
    25e4:	9e a1       	ldd	r25, Y+38	; 0x26
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6f a1       	ldd	r22, Y+39	; 0x27
    25f8:	78 a5       	ldd	r23, Y+40	; 0x28
    25fa:	89 a5       	ldd	r24, Y+41	; 0x29
    25fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9a a3       	std	Y+34, r25	; 0x22
    261c:	89 a3       	std	Y+33, r24	; 0x21
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_sendCommand+0x1c0>
    2620:	88 ec       	ldi	r24, 0xC8	; 200
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	98 a3       	std	Y+32, r25	; 0x20
    2626:	8f 8f       	std	Y+31, r24	; 0x1f
    2628:	8f 8d       	ldd	r24, Y+31	; 0x1f
    262a:	98 a1       	ldd	r25, Y+32	; 0x20
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_sendCommand+0x1ae>
    2630:	98 a3       	std	Y+32, r25	; 0x20
    2632:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	89 a1       	ldd	r24, Y+33	; 0x21
    2636:	9a a1       	ldd	r25, Y+34	; 0x22
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9a a3       	std	Y+34, r25	; 0x22
    263c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	89 a1       	ldd	r24, Y+33	; 0x21
    2640:	9a a1       	ldd	r25, Y+34	; 0x22
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <LCD_sendCommand+0x1a2>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	6b a1       	ldd	r22, Y+35	; 0x23
    264a:	7c a1       	ldd	r23, Y+36	; 0x24
    264c:	8d a1       	ldd	r24, Y+37	; 0x25
    264e:	9e a1       	ldd	r25, Y+38	; 0x26
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9a a3       	std	Y+34, r25	; 0x22
    265a:	89 a3       	std	Y+33, r24	; 0x21
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	9e 8f       	std	Y+30, r25	; 0x1e
    2662:	8d 8f       	std	Y+29, r24	; 0x1d
    2664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2666:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_sendCommand+0x1ea>
    266c:	9e 8f       	std	Y+30, r25	; 0x1e
    266e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190 ns */

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* Write to the data bus from D0 to D7 */
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	69 ad       	ldd	r22, Y+57	; 0x39
    2688:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e8       	ldi	r26, 0x80	; 128
    2692:	bf e3       	ldi	r27, 0x3F	; 63
    2694:	89 8f       	std	Y+25, r24	; 0x19
    2696:	9a 8f       	std	Y+26, r25	; 0x1a
    2698:	ab 8f       	std	Y+27, r26	; 0x1b
    269a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	69 8d       	ldd	r22, Y+25	; 0x19
    269e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a ef       	ldi	r20, 0xFA	; 250
    26aa:	54 e4       	ldi	r21, 0x44	; 68
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8d 8b       	std	Y+21, r24	; 0x15
    26b6:	9e 8b       	std	Y+22, r25	; 0x16
    26b8:	af 8b       	std	Y+23, r26	; 0x17
    26ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <LCD_sendCommand+0x260>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	0f c0       	rjmp	.+30     	; 0x273e <LCD_sendCommand+0x2c0>
    2720:	88 ec       	ldi	r24, 0xC8	; 200
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9a 8b       	std	Y+18, r25	; 0x12
    2726:	89 8b       	std	Y+17, r24	; 0x11
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_sendCommand+0x2ae>
    2730:	9a 8b       	std	Y+18, r25	; 0x12
    2732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <LCD_sendCommand+0x2a2>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	8b 89       	ldd	r24, Y+19	; 0x13
    275e:	9c 89       	ldd	r25, Y+20	; 0x14
    2760:	98 8b       	std	Y+16, r25	; 0x10
    2762:	8f 87       	std	Y+15, r24	; 0x0f
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	98 89       	ldd	r25, Y+16	; 0x10
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_sendCommand+0x2ea>
    276c:	98 8b       	std	Y+16, r25	; 0x10
    276e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	62 e0       	ldi	r22, 0x02	; 2
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e8       	ldi	r26, 0x80	; 128
    2780:	bf e3       	ldi	r27, 0x3F	; 63
    2782:	8b 87       	std	Y+11, r24	; 0x0b
    2784:	9c 87       	std	Y+12, r25	; 0x0c
    2786:	ad 87       	std	Y+13, r26	; 0x0d
    2788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	6b 85       	ldd	r22, Y+11	; 0x0b
    278c:	7c 85       	ldd	r23, Y+12	; 0x0c
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a ef       	ldi	r20, 0xFA	; 250
    2798:	54 e4       	ldi	r21, 0x44	; 68
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8f 83       	std	Y+7, r24	; 0x07
    27a4:	98 87       	std	Y+8, r25	; 0x08
    27a6:	a9 87       	std	Y+9, r26	; 0x09
    27a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_sendCommand+0x34e>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <LCD_sendCommand+0x3cc>
	else if (__tmp > 65535)
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <LCD_sendCommand+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	0f c0       	rjmp	.+30     	; 0x282c <LCD_sendCommand+0x3ae>
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_sendCommand+0x39c>
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <LCD_sendCommand+0x390>
    2834:	14 c0       	rjmp	.+40     	; 0x285e <LCD_sendCommand+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_sendCommand+0x3d8>
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    285e:	e9 96       	adiw	r28, 0x39	; 57
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <LCD_displayCharacter>:
 * [Args]	:
 * [In] data	: Indicates the character that is sent.
 * [Return]		: Void.
 */
void LCD_displayCharacter(uint8 data)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	e9 97       	sbiw	r28, 0x39	; 57
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS = 1 */
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e8       	ldi	r26, 0x80	; 128
    2896:	bf e3       	ldi	r27, 0x3F	; 63
    2898:	8d ab       	std	Y+53, r24	; 0x35
    289a:	9e ab       	std	Y+54, r25	; 0x36
    289c:	af ab       	std	Y+55, r26	; 0x37
    289e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	6d a9       	ldd	r22, Y+53	; 0x35
    28a2:	7e a9       	ldd	r23, Y+54	; 0x36
    28a4:	8f a9       	ldd	r24, Y+55	; 0x37
    28a6:	98 ad       	ldd	r25, Y+56	; 0x38
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a ef       	ldi	r20, 0xFA	; 250
    28ae:	54 e4       	ldi	r21, 0x44	; 68
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	89 ab       	std	Y+49, r24	; 0x31
    28ba:	9a ab       	std	Y+50, r25	; 0x32
    28bc:	ab ab       	std	Y+51, r26	; 0x33
    28be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28c0:	69 a9       	ldd	r22, Y+49	; 0x31
    28c2:	7a a9       	ldd	r23, Y+50	; 0x32
    28c4:	8b a9       	ldd	r24, Y+51	; 0x33
    28c6:	9c a9       	ldd	r25, Y+52	; 0x34
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	98 ab       	std	Y+48, r25	; 0x30
    28de:	8f a7       	std	Y+47, r24	; 0x2f
    28e0:	3f c0       	rjmp	.+126    	; 0x2960 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    28e2:	69 a9       	ldd	r22, Y+49	; 0x31
    28e4:	7a a9       	ldd	r23, Y+50	; 0x32
    28e6:	8b a9       	ldd	r24, Y+51	; 0x33
    28e8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	4c f5       	brge	.+82     	; 0x294c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	6d a9       	ldd	r22, Y+53	; 0x35
    28fc:	7e a9       	ldd	r23, Y+54	; 0x36
    28fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2900:	98 ad       	ldd	r25, Y+56	; 0x38
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	98 ab       	std	Y+48, r25	; 0x30
    2920:	8f a7       	std	Y+47, r24	; 0x2f
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <LCD_displayCharacter+0xd2>
    2924:	88 ec       	ldi	r24, 0xC8	; 200
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9e a7       	std	Y+46, r25	; 0x2e
    292a:	8d a7       	std	Y+45, r24	; 0x2d
    292c:	8d a5       	ldd	r24, Y+45	; 0x2d
    292e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_displayCharacter+0xc0>
    2934:	9e a7       	std	Y+46, r25	; 0x2e
    2936:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	8f a5       	ldd	r24, Y+47	; 0x2f
    293a:	98 a9       	ldd	r25, Y+48	; 0x30
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	98 ab       	std	Y+48, r25	; 0x30
    2940:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	8f a5       	ldd	r24, Y+47	; 0x2f
    2944:	98 a9       	ldd	r25, Y+48	; 0x30
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	69 f7       	brne	.-38     	; 0x2924 <LCD_displayCharacter+0xb4>
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	69 a9       	ldd	r22, Y+49	; 0x31
    294e:	7a a9       	ldd	r23, Y+50	; 0x32
    2950:	8b a9       	ldd	r24, Y+51	; 0x33
    2952:	9c a9       	ldd	r25, Y+52	; 0x34
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	98 ab       	std	Y+48, r25	; 0x30
    295e:	8f a7       	std	Y+47, r24	; 0x2f
    2960:	8f a5       	ldd	r24, Y+47	; 0x2f
    2962:	98 a9       	ldd	r25, Y+48	; 0x30
    2964:	9c a7       	std	Y+44, r25	; 0x2c
    2966:	8b a7       	std	Y+43, r24	; 0x2b
    2968:	8b a5       	ldd	r24, Y+43	; 0x2b
    296a:	9c a5       	ldd	r25, Y+44	; 0x2c
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_displayCharacter+0xfc>
    2970:	9c a7       	std	Y+44, r25	; 0x2c
    2972:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	62 e0       	ldi	r22, 0x02	; 2
    2978:	41 e0       	ldi	r20, 0x01	; 1
    297a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a0 e8       	ldi	r26, 0x80	; 128
    2984:	bf e3       	ldi	r27, 0x3F	; 63
    2986:	8f a3       	std	Y+39, r24	; 0x27
    2988:	98 a7       	std	Y+40, r25	; 0x28
    298a:	a9 a7       	std	Y+41, r26	; 0x29
    298c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298e:	6f a1       	ldd	r22, Y+39	; 0x27
    2990:	78 a5       	ldd	r23, Y+40	; 0x28
    2992:	89 a5       	ldd	r24, Y+41	; 0x29
    2994:	9a a5       	ldd	r25, Y+42	; 0x2a
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a ef       	ldi	r20, 0xFA	; 250
    299c:	54 e4       	ldi	r21, 0x44	; 68
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8b a3       	std	Y+35, r24	; 0x23
    29a8:	9c a3       	std	Y+36, r25	; 0x24
    29aa:	ad a3       	std	Y+37, r26	; 0x25
    29ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ae:	6b a1       	ldd	r22, Y+35	; 0x23
    29b0:	7c a1       	ldd	r23, Y+36	; 0x24
    29b2:	8d a1       	ldd	r24, Y+37	; 0x25
    29b4:	9e a1       	ldd	r25, Y+38	; 0x26
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	2c f4       	brge	.+10     	; 0x29d0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9a a3       	std	Y+34, r25	; 0x22
    29cc:	89 a3       	std	Y+33, r24	; 0x21
    29ce:	3f c0       	rjmp	.+126    	; 0x2a4e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    29d0:	6b a1       	ldd	r22, Y+35	; 0x23
    29d2:	7c a1       	ldd	r23, Y+36	; 0x24
    29d4:	8d a1       	ldd	r24, Y+37	; 0x25
    29d6:	9e a1       	ldd	r25, Y+38	; 0x26
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	3f ef       	ldi	r19, 0xFF	; 255
    29dc:	4f e7       	ldi	r20, 0x7F	; 127
    29de:	57 e4       	ldi	r21, 0x47	; 71
    29e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e4:	18 16       	cp	r1, r24
    29e6:	4c f5       	brge	.+82     	; 0x2a3a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ea:	78 a5       	ldd	r23, Y+40	; 0x28
    29ec:	89 a5       	ldd	r24, Y+41	; 0x29
    29ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9a a3       	std	Y+34, r25	; 0x22
    2a0e:	89 a3       	std	Y+33, r24	; 0x21
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <LCD_displayCharacter+0x1c0>
    2a12:	88 ec       	ldi	r24, 0xC8	; 200
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	98 a3       	std	Y+32, r25	; 0x20
    2a18:	8f 8f       	std	Y+31, r24	; 0x1f
    2a1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a1c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <LCD_displayCharacter+0x1ae>
    2a22:	98 a3       	std	Y+32, r25	; 0x20
    2a24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a26:	89 a1       	ldd	r24, Y+33	; 0x21
    2a28:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	9a a3       	std	Y+34, r25	; 0x22
    2a2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	89 a1       	ldd	r24, Y+33	; 0x21
    2a32:	9a a1       	ldd	r25, Y+34	; 0x22
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <LCD_displayCharacter+0x1a2>
    2a38:	14 c0       	rjmp	.+40     	; 0x2a62 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a40:	9e a1       	ldd	r25, Y+38	; 0x26
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9a a3       	std	Y+34, r25	; 0x22
    2a4c:	89 a3       	std	Y+33, r24	; 0x21
    2a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a50:	9a a1       	ldd	r25, Y+34	; 0x22
    2a52:	9e 8f       	std	Y+30, r25	; 0x1e
    2a54:	8d 8f       	std	Y+29, r24	; 0x1d
    2a56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_displayCharacter+0x1ea>
    2a5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a60:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* Write to the data bus from D0 to D7 */
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	69 ad       	ldd	r22, Y+57	; 0x39
    2a66:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 e8       	ldi	r26, 0x80	; 128
    2a70:	bf e3       	ldi	r27, 0x3F	; 63
    2a72:	89 8f       	std	Y+25, r24	; 0x19
    2a74:	9a 8f       	std	Y+26, r25	; 0x1a
    2a76:	ab 8f       	std	Y+27, r26	; 0x1b
    2a78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a ef       	ldi	r20, 0xFA	; 250
    2a88:	54 e4       	ldi	r21, 0x44	; 68
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8d 8b       	std	Y+21, r24	; 0x15
    2a94:	9e 8b       	std	Y+22, r25	; 0x16
    2a96:	af 8b       	std	Y+23, r26	; 0x17
    2a98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9c 8b       	std	Y+20, r25	; 0x14
    2ab8:	8b 8b       	std	Y+19, r24	; 0x13
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	4f e7       	ldi	r20, 0x7F	; 127
    2aca:	57 e4       	ldi	r21, 0x47	; 71
    2acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	4c f5       	brge	.+82     	; 0x2b26 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e2       	ldi	r20, 0x20	; 32
    2ae2:	51 e4       	ldi	r21, 0x41	; 65
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <LCD_displayCharacter+0x2ac>
    2afe:	88 ec       	ldi	r24, 0xC8	; 200
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	9a 8b       	std	Y+18, r25	; 0x12
    2b04:	89 8b       	std	Y+17, r24	; 0x11
    2b06:	89 89       	ldd	r24, Y+17	; 0x11
    2b08:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <LCD_displayCharacter+0x29a>
    2b0e:	9a 8b       	std	Y+18, r25	; 0x12
    2b10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	69 f7       	brne	.-38     	; 0x2afe <LCD_displayCharacter+0x28e>
    2b24:	14 c0       	rjmp	.+40     	; 0x2b4e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9c 8b       	std	Y+20, r25	; 0x14
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	98 8b       	std	Y+16, r25	; 0x10
    2b40:	8f 87       	std	Y+15, r24	; 0x0f
    2b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b44:	98 89       	ldd	r25, Y+16	; 0x10
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <LCD_displayCharacter+0x2d6>
    2b4a:	98 8b       	std	Y+16, r25	; 0x10
    2b4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	62 e0       	ldi	r22, 0x02	; 2
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 e8       	ldi	r26, 0x80	; 128
    2b5e:	bf e3       	ldi	r27, 0x3F	; 63
    2b60:	8b 87       	std	Y+11, r24	; 0x0b
    2b62:	9c 87       	std	Y+12, r25	; 0x0c
    2b64:	ad 87       	std	Y+13, r26	; 0x0d
    2b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a ef       	ldi	r20, 0xFA	; 250
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8f 83       	std	Y+7, r24	; 0x07
    2b82:	98 87       	std	Y+8, r25	; 0x08
    2b84:	a9 87       	std	Y+9, r26	; 0x09
    2b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b88:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8a:	78 85       	ldd	r23, Y+8	; 0x08
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <LCD_displayCharacter+0x39a>
    2bec:	88 ec       	ldi	r24, 0xC8	; 200
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_displayCharacter+0x388>
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <LCD_displayCharacter+0x37c>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_displayCharacter+0x3c4>
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    2c3c:	e9 96       	adiw	r28, 0x39	; 57
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <LCD_displayString>:
 * [Args] 	:
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayString(const uint8 *string)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <LCD_displayString+0x6>
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	9b 83       	std	Y+3, r25	; 0x03
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
	/* Display each character in the recieved string array */
	uint8 i = 0;
    2c5e:	19 82       	std	Y+1, r1	; 0x01
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <LCD_displayString+0x30>
	while (string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	80 81       	ld	r24, Z
    2c74:	0e 94 38 14 	call	0x2870	; 0x2870 <LCD_displayCharacter>
		i++;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	8f 5f       	subi	r24, 0xFF	; 255
    2c7c:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const uint8 *string)
{
	/* Display each character in the recieved string array */
	uint8 i = 0;
	while (string[i] != '\0')
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	fc 01       	movw	r30, r24
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 23       	and	r24, r24
    2c92:	39 f7       	brne	.-50     	; 0x2c62 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*string);
		string++;
	}
	 *********************************************************/
}
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <LCD_moveCursor>:
 * [In] row		: Indicates the row required.
 * [In] column	: Indicates the column required.
 * [Return]		: Void.
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <LCD_moveCursor+0x6>
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <LCD_moveCursor+0x8>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	6a 83       	std	Y+2, r22	; 0x02
	/* Calculate the address in the LCD DDRAM, */
	/* then move the LCD cursor to this specific address. */
	switch (row)
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	3c 83       	std	Y+4, r19	; 0x04
    2cb8:	2b 83       	std	Y+3, r18	; 0x03
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	d1 f0       	breq	.+52     	; 0x2cf8 <LCD_moveCursor+0x58>
    2cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc8:	22 30       	cpi	r18, 0x02	; 2
    2cca:	31 05       	cpc	r19, r1
    2ccc:	2c f4       	brge	.+10     	; 0x2cd8 <LCD_moveCursor+0x38>
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	61 f0       	breq	.+24     	; 0x2cee <LCD_moveCursor+0x4e>
    2cd6:	21 c0       	rjmp	.+66     	; 0x2d1a <LCD_moveCursor+0x7a>
    2cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2cda:	3c 81       	ldd	r19, Y+4	; 0x04
    2cdc:	22 30       	cpi	r18, 0x02	; 2
    2cde:	31 05       	cpc	r19, r1
    2ce0:	89 f0       	breq	.+34     	; 0x2d04 <LCD_moveCursor+0x64>
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce6:	83 30       	cpi	r24, 0x03	; 3
    2ce8:	91 05       	cpc	r25, r1
    2cea:	91 f0       	breq	.+36     	; 0x2d10 <LCD_moveCursor+0x70>
    2cec:	16 c0       	rjmp	.+44     	; 0x2d1a <LCD_moveCursor+0x7a>
	{
		case 0:
			LCD_sendCommand(column | LCD_SET_CURSOR_LOCATION);
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	80 68       	ori	r24, 0x80	; 128
    2cf2:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
    2cf6:	11 c0       	rjmp	.+34     	; 0x2d1a <LCD_moveCursor+0x7a>
		break;
		case 1:
			LCD_sendCommand((column + 0x40) | LCD_SET_CURSOR_LOCATION);
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	80 5c       	subi	r24, 0xC0	; 192
    2cfc:	80 68       	ori	r24, 0x80	; 128
    2cfe:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
    2d02:	0b c0       	rjmp	.+22     	; 0x2d1a <LCD_moveCursor+0x7a>
		break;
		case 2:
			LCD_sendCommand((column + 0x10) | LCD_SET_CURSOR_LOCATION);
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	80 5f       	subi	r24, 0xF0	; 240
    2d08:	80 68       	ori	r24, 0x80	; 128
    2d0a:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
    2d0e:	05 c0       	rjmp	.+10     	; 0x2d1a <LCD_moveCursor+0x7a>
		break;
		case 3:
			LCD_sendCommand((column + 0x50) | LCD_SET_CURSOR_LOCATION);
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	80 5b       	subi	r24, 0xB0	; 176
    2d14:	80 68       	ori	r24, 0x80	; 128
    2d16:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
		break;
	}
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <LCD_displayStringRowColumn>:
 * [In] column	: Indicates the column required.
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *string)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <LCD_displayStringRowColumn+0x6>
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <LCD_displayStringRowColumn+0x8>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	6a 83       	std	Y+2, r22	; 0x02
    2d38:	5c 83       	std	Y+4, r21	; 0x04
    2d3a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column); /* Go to to the specified LCD position */
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d40:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString(string); /* Display string */
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <LCD_intgerToString>:
 * [Args]	:
 * [In] data	: Indicates the decimal value required.
 * [Return]		: Void.
 */
void LCD_intgerToString(uint16 data)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	62 97       	sbiw	r28, 0x12	; 18
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	9a 8b       	std	Y+18, r25	; 0x12
    2d70:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; /* Hold the ASCII result */
	itoa(data, buffer, 10); /* Convert data to it's ASCII value - 10 for decimal */
    2d72:	89 89       	ldd	r24, Y+17	; 0x11
    2d74:	9a 89       	ldd	r25, Y+18	; 0x12
    2d76:	9e 01       	movw	r18, r28
    2d78:	2f 5f       	subi	r18, 0xFF	; 255
    2d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7c:	b9 01       	movw	r22, r18
    2d7e:	4a e0       	ldi	r20, 0x0A	; 10
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <itoa>
	LCD_displayString(buffer); /* Display string */
    2d86:	ce 01       	movw	r24, r28
    2d88:	01 96       	adiw	r24, 0x01	; 1
    2d8a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
}
    2d8e:	62 96       	adiw	r28, 0x12	; 18
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <LCD_clearScreen>:
 * 		Send the clear screen command
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_clearScreen(void)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
}
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <LCD_cursorToggle>:
 * 		Function that toggles LCD cursor every 0.5 second.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_cursorToggle(void)
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <LCD_cursorToggle+0x6>
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
	/* Define a static toggle variable */
	static volatile uint8 toggle = LOGIC_LOW;
	/* Switch toggle & cursor value */
	switch (toggle)
    2dbe:	80 91 6e 01 	lds	r24, 0x016E
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	3a 83       	std	Y+2, r19	; 0x02
    2dc8:	29 83       	std	Y+1, r18	; 0x01
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	31 f0       	breq	.+12     	; 0x2dde <LCD_cursorToggle+0x2a>
    2dd2:	29 81       	ldd	r18, Y+1	; 0x01
    2dd4:	3a 81       	ldd	r19, Y+2	; 0x02
    2dd6:	21 30       	cpi	r18, 0x01	; 1
    2dd8:	31 05       	cpc	r19, r1
    2dda:	41 f0       	breq	.+16     	; 0x2dec <LCD_cursorToggle+0x38>
    2ddc:	0c c0       	rjmp	.+24     	; 0x2df6 <LCD_cursorToggle+0x42>
	{
		case LOGIC_LOW:
			/* Turn cursor ON */
			LCD_sendCommand(LCD_CURSOR_ON);
    2dde:	8e e0       	ldi	r24, 0x0E	; 14
    2de0:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
			toggle = LOGIC_HIGH;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	80 93 6e 01 	sts	0x016E, r24
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <LCD_cursorToggle+0x42>
		break;
		case LOGIC_HIGH:
			/* Turn cursor OFF */
			LCD_sendCommand(LCD_CURSOR_OFF);
    2dec:	8c e0       	ldi	r24, 0x0C	; 12
    2dee:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
			toggle = LOGIC_LOW;
    2df2:	10 92 6e 01 	sts	0x016E, r1
		break;
	}
}
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <removePassword>:
 * 		Function that removes password from LCD screen.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void removePassword(void)
{
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
	/* Remove written password */
	LCD_moveCursor(1, 0);
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("                ");
    2e10:	80 e6       	ldi	r24, 0x60	; 96
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <sendNewPassword>:
 * 		Function that sends a new password set by user to CONTROL_ECU.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void sendNewPassword(void)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	ab 97       	sbiw	r28, 0x2b	; 43
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
	/* A counter variable for loops */
	uint8 counter = 0;
    2e3a:	1b a6       	std	Y+43, r1	; 0x2b
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e2       	ldi	r26, 0x20	; 32
    2e42:	b1 e4       	ldi	r27, 0x41	; 65
    2e44:	8f a3       	std	Y+39, r24	; 0x27
    2e46:	98 a7       	std	Y+40, r25	; 0x28
    2e48:	a9 a7       	std	Y+41, r26	; 0x29
    2e4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e50:	89 a5       	ldd	r24, Y+41	; 0x29
    2e52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a ef       	ldi	r20, 0xFA	; 250
    2e5a:	54 e4       	ldi	r21, 0x44	; 68
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8b a3       	std	Y+35, r24	; 0x23
    2e66:	9c a3       	std	Y+36, r25	; 0x24
    2e68:	ad a3       	std	Y+37, r26	; 0x25
    2e6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e70:	8d a1       	ldd	r24, Y+37	; 0x25
    2e72:	9e a1       	ldd	r25, Y+38	; 0x26
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <sendNewPassword+0x68>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9a a3       	std	Y+34, r25	; 0x22
    2e8a:	89 a3       	std	Y+33, r24	; 0x21
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <sendNewPassword+0xe6>
	else if (__tmp > 65535)
    2e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e90:	7c a1       	ldd	r23, Y+36	; 0x24
    2e92:	8d a1       	ldd	r24, Y+37	; 0x25
    2e94:	9e a1       	ldd	r25, Y+38	; 0x26
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	4c f5       	brge	.+82     	; 0x2ef8 <sendNewPassword+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eaa:	89 a5       	ldd	r24, Y+41	; 0x29
    2eac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9a a3       	std	Y+34, r25	; 0x22
    2ecc:	89 a3       	std	Y+33, r24	; 0x21
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <sendNewPassword+0xc8>
    2ed0:	88 ec       	ldi	r24, 0xC8	; 200
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	98 a3       	std	Y+32, r25	; 0x20
    2ed6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eda:	98 a1       	ldd	r25, Y+32	; 0x20
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <sendNewPassword+0xb6>
    2ee0:	98 a3       	std	Y+32, r25	; 0x20
    2ee2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	9a a3       	std	Y+34, r25	; 0x22
    2eec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <sendNewPassword+0xaa>
    2ef6:	14 c0       	rjmp	.+40     	; 0x2f20 <sendNewPassword+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef8:	6b a1       	ldd	r22, Y+35	; 0x23
    2efa:	7c a1       	ldd	r23, Y+36	; 0x24
    2efc:	8d a1       	ldd	r24, Y+37	; 0x25
    2efe:	9e a1       	ldd	r25, Y+38	; 0x26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9a a3       	std	Y+34, r25	; 0x22
    2f0a:	89 a3       	std	Y+33, r24	; 0x21
    2f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f10:	9e 8f       	std	Y+30, r25	; 0x1e
    2f12:	8d 8f       	std	Y+29, r24	; 0x1d
    2f14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <sendNewPassword+0xf2>
    2f1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f1e:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Send password to CONTROL_ECU */
	_delay_ms(10);
	USART_sendByte(0x02);
    2f20:	82 e0       	ldi	r24, 0x02	; 2
    2f22:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
	for (counter = 0; counter < 5; counter++)
    2f26:	1b a6       	std	Y+43, r1	; 0x2b
    2f28:	7e c0       	rjmp	.+252    	; 0x3026 <sendNewPassword+0x200>
	{
		USART_sendByte(password[counter]);
    2f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f2c:	88 2f       	mov	r24, r24
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	fc 01       	movw	r30, r24
    2f32:	ed 58       	subi	r30, 0x8D	; 141
    2f34:	fe 4f       	sbci	r31, 0xFE	; 254
    2f36:	80 81       	ld	r24, Z
    2f38:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	a0 e2       	ldi	r26, 0x20	; 32
    2f42:	b1 e4       	ldi	r27, 0x41	; 65
    2f44:	89 8f       	std	Y+25, r24	; 0x19
    2f46:	9a 8f       	std	Y+26, r25	; 0x1a
    2f48:	ab 8f       	std	Y+27, r26	; 0x1b
    2f4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	4a ef       	ldi	r20, 0xFA	; 250
    2f5a:	54 e4       	ldi	r21, 0x44	; 68
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	8d 8b       	std	Y+21, r24	; 0x15
    2f66:	9e 8b       	std	Y+22, r25	; 0x16
    2f68:	af 8b       	std	Y+23, r26	; 0x17
    2f6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f70:	8f 89       	ldd	r24, Y+23	; 0x17
    2f72:	98 8d       	ldd	r25, Y+24	; 0x18
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e8       	ldi	r20, 0x80	; 128
    2f7a:	5f e3       	ldi	r21, 0x3F	; 63
    2f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f80:	88 23       	and	r24, r24
    2f82:	2c f4       	brge	.+10     	; 0x2f8e <sendNewPassword+0x168>
		__ticks = 1;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9c 8b       	std	Y+20, r25	; 0x14
    2f8a:	8b 8b       	std	Y+19, r24	; 0x13
    2f8c:	3f c0       	rjmp	.+126    	; 0x300c <sendNewPassword+0x1e6>
	else if (__tmp > 65535)
    2f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f90:	7e 89       	ldd	r23, Y+22	; 0x16
    2f92:	8f 89       	ldd	r24, Y+23	; 0x17
    2f94:	98 8d       	ldd	r25, Y+24	; 0x18
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	3f ef       	ldi	r19, 0xFF	; 255
    2f9a:	4f e7       	ldi	r20, 0x7F	; 127
    2f9c:	57 e4       	ldi	r21, 0x47	; 71
    2f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa2:	18 16       	cp	r1, r24
    2fa4:	4c f5       	brge	.+82     	; 0x2ff8 <sendNewPassword+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e2       	ldi	r20, 0x20	; 32
    2fb4:	51 e4       	ldi	r21, 0x41	; 65
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9c 8b       	std	Y+20, r25	; 0x14
    2fcc:	8b 8b       	std	Y+19, r24	; 0x13
    2fce:	0f c0       	rjmp	.+30     	; 0x2fee <sendNewPassword+0x1c8>
    2fd0:	88 ec       	ldi	r24, 0xC8	; 200
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9a 8b       	std	Y+18, r25	; 0x12
    2fd6:	89 8b       	std	Y+17, r24	; 0x11
    2fd8:	89 89       	ldd	r24, Y+17	; 0x11
    2fda:	9a 89       	ldd	r25, Y+18	; 0x12
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <sendNewPassword+0x1b6>
    2fe0:	9a 8b       	std	Y+18, r25	; 0x12
    2fe2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	69 f7       	brne	.-38     	; 0x2fd0 <sendNewPassword+0x1aa>
    2ff6:	14 c0       	rjmp	.+40     	; 0x3020 <sendNewPassword+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    2ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9c 8b       	std	Y+20, r25	; 0x14
    300a:	8b 8b       	std	Y+19, r24	; 0x13
    300c:	8b 89       	ldd	r24, Y+19	; 0x13
    300e:	9c 89       	ldd	r25, Y+20	; 0x14
    3010:	98 8b       	std	Y+16, r25	; 0x10
    3012:	8f 87       	std	Y+15, r24	; 0x0f
    3014:	8f 85       	ldd	r24, Y+15	; 0x0f
    3016:	98 89       	ldd	r25, Y+16	; 0x10
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <sendNewPassword+0x1f2>
    301c:	98 8b       	std	Y+16, r25	; 0x10
    301e:	8f 87       	std	Y+15, r24	; 0x0f
	/* A counter variable for loops */
	uint8 counter = 0;
	/* Send password to CONTROL_ECU */
	_delay_ms(10);
	USART_sendByte(0x02);
	for (counter = 0; counter < 5; counter++)
    3020:	8b a5       	ldd	r24, Y+43	; 0x2b
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	8b a7       	std	Y+43, r24	; 0x2b
    3026:	8b a5       	ldd	r24, Y+43	; 0x2b
    3028:	85 30       	cpi	r24, 0x05	; 5
    302a:	08 f4       	brcc	.+2      	; 0x302e <sendNewPassword+0x208>
    302c:	7e cf       	rjmp	.-260    	; 0x2f2a <sendNewPassword+0x104>
	{
		USART_sendByte(password[counter]);
		_delay_ms(10);
	}
	for (counter = 0; counter < 5; counter++)
    302e:	1b a6       	std	Y+43, r1	; 0x2b
    3030:	7e c0       	rjmp	.+252    	; 0x312e <sendNewPassword+0x308>
	{
		USART_sendByte(passwordReEnter[counter]);
    3032:	8b a5       	ldd	r24, Y+43	; 0x2b
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	fc 01       	movw	r30, r24
    303a:	e8 58       	subi	r30, 0x88	; 136
    303c:	fe 4f       	sbci	r31, 0xFE	; 254
    303e:	80 81       	ld	r24, Z
    3040:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	a0 e2       	ldi	r26, 0x20	; 32
    304a:	b1 e4       	ldi	r27, 0x41	; 65
    304c:	8b 87       	std	Y+11, r24	; 0x0b
    304e:	9c 87       	std	Y+12, r25	; 0x0c
    3050:	ad 87       	std	Y+13, r26	; 0x0d
    3052:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	6b 85       	ldd	r22, Y+11	; 0x0b
    3056:	7c 85       	ldd	r23, Y+12	; 0x0c
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
    305a:	9e 85       	ldd	r25, Y+14	; 0x0e
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a ef       	ldi	r20, 0xFA	; 250
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8f 83       	std	Y+7, r24	; 0x07
    306e:	98 87       	std	Y+8, r25	; 0x08
    3070:	a9 87       	std	Y+9, r26	; 0x09
    3072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3074:	6f 81       	ldd	r22, Y+7	; 0x07
    3076:	78 85       	ldd	r23, Y+8	; 0x08
    3078:	89 85       	ldd	r24, Y+9	; 0x09
    307a:	9a 85       	ldd	r25, Y+10	; 0x0a
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <sendNewPassword+0x270>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <sendNewPassword+0x2ee>
	else if (__tmp > 65535)
    3096:	6f 81       	ldd	r22, Y+7	; 0x07
    3098:	78 85       	ldd	r23, Y+8	; 0x08
    309a:	89 85       	ldd	r24, Y+9	; 0x09
    309c:	9a 85       	ldd	r25, Y+10	; 0x0a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <sendNewPassword+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <sendNewPassword+0x2d0>
    30d8:	88 ec       	ldi	r24, 0xC8	; 200
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <sendNewPassword+0x2be>
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <sendNewPassword+0x2b2>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <sendNewPassword+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9e 83       	std	Y+6, r25	; 0x06
    3112:	8d 83       	std	Y+5, r24	; 0x05
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <sendNewPassword+0x2fa>
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
	for (counter = 0; counter < 5; counter++)
	{
		USART_sendByte(password[counter]);
		_delay_ms(10);
	}
	for (counter = 0; counter < 5; counter++)
    3128:	8b a5       	ldd	r24, Y+43	; 0x2b
    312a:	8f 5f       	subi	r24, 0xFF	; 255
    312c:	8b a7       	std	Y+43, r24	; 0x2b
    312e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3130:	85 30       	cpi	r24, 0x05	; 5
    3132:	08 f4       	brcc	.+2      	; 0x3136 <sendNewPassword+0x310>
    3134:	7e cf       	rjmp	.-260    	; 0x3032 <sendNewPassword+0x20c>
	{
		USART_sendByte(passwordReEnter[counter]);
		_delay_ms(10);
	}
}
    3136:	ab 96       	adiw	r28, 0x2b	; 43
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <sendPassword>:
 * 		EEPROM to CONTROL_ECU.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void sendPassword(void)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	6d 97       	sbiw	r28, 0x1d	; 29
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
	/* A counter variable for loops */
	uint8 counter = 0;
    315c:	1d 8e       	std	Y+29, r1	; 0x1d
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	a0 e2       	ldi	r26, 0x20	; 32
    3164:	b1 e4       	ldi	r27, 0x41	; 65
    3166:	89 8f       	std	Y+25, r24	; 0x19
    3168:	9a 8f       	std	Y+26, r25	; 0x1a
    316a:	ab 8f       	std	Y+27, r26	; 0x1b
    316c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316e:	69 8d       	ldd	r22, Y+25	; 0x19
    3170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4a ef       	ldi	r20, 0xFA	; 250
    317c:	54 e4       	ldi	r21, 0x44	; 68
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	8d 8b       	std	Y+21, r24	; 0x15
    3188:	9e 8b       	std	Y+22, r25	; 0x16
    318a:	af 8b       	std	Y+23, r26	; 0x17
    318c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    318e:	6d 89       	ldd	r22, Y+21	; 0x15
    3190:	7e 89       	ldd	r23, Y+22	; 0x16
    3192:	8f 89       	ldd	r24, Y+23	; 0x17
    3194:	98 8d       	ldd	r25, Y+24	; 0x18
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e8       	ldi	r20, 0x80	; 128
    319c:	5f e3       	ldi	r21, 0x3F	; 63
    319e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <sendPassword+0x68>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9c 8b       	std	Y+20, r25	; 0x14
    31ac:	8b 8b       	std	Y+19, r24	; 0x13
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <sendPassword+0xe6>
	else if (__tmp > 65535)
    31b0:	6d 89       	ldd	r22, Y+21	; 0x15
    31b2:	7e 89       	ldd	r23, Y+22	; 0x16
    31b4:	8f 89       	ldd	r24, Y+23	; 0x17
    31b6:	98 8d       	ldd	r25, Y+24	; 0x18
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <sendPassword+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	69 8d       	ldd	r22, Y+25	; 0x19
    31ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9c 8b       	std	Y+20, r25	; 0x14
    31ee:	8b 8b       	std	Y+19, r24	; 0x13
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <sendPassword+0xc8>
    31f2:	88 ec       	ldi	r24, 0xC8	; 200
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9a 8b       	std	Y+18, r25	; 0x12
    31f8:	89 8b       	std	Y+17, r24	; 0x11
    31fa:	89 89       	ldd	r24, Y+17	; 0x11
    31fc:	9a 89       	ldd	r25, Y+18	; 0x12
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <sendPassword+0xb6>
    3202:	9a 8b       	std	Y+18, r25	; 0x12
    3204:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	8b 89       	ldd	r24, Y+19	; 0x13
    3208:	9c 89       	ldd	r25, Y+20	; 0x14
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	9c 8b       	std	Y+20, r25	; 0x14
    320e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	8b 89       	ldd	r24, Y+19	; 0x13
    3212:	9c 89       	ldd	r25, Y+20	; 0x14
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	69 f7       	brne	.-38     	; 0x31f2 <sendPassword+0xaa>
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <sendPassword+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	6d 89       	ldd	r22, Y+21	; 0x15
    321c:	7e 89       	ldd	r23, Y+22	; 0x16
    321e:	8f 89       	ldd	r24, Y+23	; 0x17
    3220:	98 8d       	ldd	r25, Y+24	; 0x18
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9c 8b       	std	Y+20, r25	; 0x14
    322c:	8b 8b       	std	Y+19, r24	; 0x13
    322e:	8b 89       	ldd	r24, Y+19	; 0x13
    3230:	9c 89       	ldd	r25, Y+20	; 0x14
    3232:	98 8b       	std	Y+16, r25	; 0x10
    3234:	8f 87       	std	Y+15, r24	; 0x0f
    3236:	8f 85       	ldd	r24, Y+15	; 0x0f
    3238:	98 89       	ldd	r25, Y+16	; 0x10
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <sendPassword+0xf2>
    323e:	98 8b       	std	Y+16, r25	; 0x10
    3240:	8f 87       	std	Y+15, r24	; 0x0f
	/* Send password to CONTROL_ECU */
	_delay_ms(10);
	USART_sendByte(0x03);
    3242:	83 e0       	ldi	r24, 0x03	; 3
    3244:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
	for (counter = 0; counter < 5; counter++)
    3248:	1d 8e       	std	Y+29, r1	; 0x1d
    324a:	7e c0       	rjmp	.+252    	; 0x3348 <sendPassword+0x200>
	{
		USART_sendByte(password[counter]);
    324c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    324e:	88 2f       	mov	r24, r24
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	fc 01       	movw	r30, r24
    3254:	ed 58       	subi	r30, 0x8D	; 141
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	80 81       	ld	r24, Z
    325a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	a0 e2       	ldi	r26, 0x20	; 32
    3264:	b1 e4       	ldi	r27, 0x41	; 65
    3266:	8b 87       	std	Y+11, r24	; 0x0b
    3268:	9c 87       	std	Y+12, r25	; 0x0c
    326a:	ad 87       	std	Y+13, r26	; 0x0d
    326c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3270:	7c 85       	ldd	r23, Y+12	; 0x0c
    3272:	8d 85       	ldd	r24, Y+13	; 0x0d
    3274:	9e 85       	ldd	r25, Y+14	; 0x0e
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a ef       	ldi	r20, 0xFA	; 250
    327c:	54 e4       	ldi	r21, 0x44	; 68
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	8f 83       	std	Y+7, r24	; 0x07
    3288:	98 87       	std	Y+8, r25	; 0x08
    328a:	a9 87       	std	Y+9, r26	; 0x09
    328c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    328e:	6f 81       	ldd	r22, Y+7	; 0x07
    3290:	78 85       	ldd	r23, Y+8	; 0x08
    3292:	89 85       	ldd	r24, Y+9	; 0x09
    3294:	9a 85       	ldd	r25, Y+10	; 0x0a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e8       	ldi	r20, 0x80	; 128
    329c:	5f e3       	ldi	r21, 0x3F	; 63
    329e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a2:	88 23       	and	r24, r24
    32a4:	2c f4       	brge	.+10     	; 0x32b0 <sendPassword+0x168>
		__ticks = 1;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	3f c0       	rjmp	.+126    	; 0x332e <sendPassword+0x1e6>
	else if (__tmp > 65535)
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	3f ef       	ldi	r19, 0xFF	; 255
    32bc:	4f e7       	ldi	r20, 0x7F	; 127
    32be:	57 e4       	ldi	r21, 0x47	; 71
    32c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c4:	18 16       	cp	r1, r24
    32c6:	4c f5       	brge	.+82     	; 0x331a <sendPassword+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    32cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e2       	ldi	r20, 0x20	; 32
    32d6:	51 e4       	ldi	r21, 0x41	; 65
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
    32f0:	0f c0       	rjmp	.+30     	; 0x3310 <sendPassword+0x1c8>
    32f2:	88 ec       	ldi	r24, 0xC8	; 200
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	9c 83       	std	Y+4, r25	; 0x04
    32f8:	8b 83       	std	Y+3, r24	; 0x03
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <sendPassword+0x1b6>
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	00 97       	sbiw	r24, 0x00	; 0
    3316:	69 f7       	brne	.-38     	; 0x32f2 <sendPassword+0x1aa>
    3318:	14 c0       	rjmp	.+40     	; 0x3342 <sendPassword+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <sendPassword+0x1f2>
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
	/* A counter variable for loops */
	uint8 counter = 0;
	/* Send password to CONTROL_ECU */
	_delay_ms(10);
	USART_sendByte(0x03);
	for (counter = 0; counter < 5; counter++)
    3342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	8d 8f       	std	Y+29, r24	; 0x1d
    3348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    334a:	85 30       	cpi	r24, 0x05	; 5
    334c:	08 f4       	brcc	.+2      	; 0x3350 <sendPassword+0x208>
    334e:	7e cf       	rjmp	.-260    	; 0x324c <sendPassword+0x104>
	{
		USART_sendByte(password[counter]);
		_delay_ms(10);
	}
}
    3350:	6d 96       	adiw	r28, 0x1d	; 29
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <breachDetection>:
 * 		Function that is executes when user enters wrong password 3 times.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void breachDetection(void)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	2f 97       	sbiw	r28, 0x0f	; 15
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
	/* A counter variable for loops */
	uint8 counter = 0;
    3376:	1f 86       	std	Y+15, r1	; 0x0f
	/* Display error and stop the micro-controller */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("      ERROR");
    3386:	81 e7       	ldi	r24, 0x71	; 113
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	/* Stop cursor blinking */
	Timer1_stop();
    338e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer1_stop>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3392:	8c e0       	ldi	r24, 0x0C	; 12
    3394:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	/* Tell CONTROL_ECU user entered wrong password (3) times */
	USART_sendByte(0xF0);
    3398:	80 ef       	ldi	r24, 0xF0	; 240
    339a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
	/* Wait for (60) seconds*/
	for (counter = 0; counter < 5; counter++)
    339e:	1f 86       	std	Y+15, r1	; 0x0f
    33a0:	75 c0       	rjmp	.+234    	; 0x348c <breachDetection+0x12a>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e4       	ldi	r25, 0x40	; 64
    33a6:	ac e1       	ldi	r26, 0x1C	; 28
    33a8:	b6 e4       	ldi	r27, 0x46	; 70
    33aa:	8b 87       	std	Y+11, r24	; 0x0b
    33ac:	9c 87       	std	Y+12, r25	; 0x0c
    33ae:	ad 87       	std	Y+13, r26	; 0x0d
    33b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a ef       	ldi	r20, 0xFA	; 250
    33c0:	54 e4       	ldi	r21, 0x44	; 68
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8f 83       	std	Y+7, r24	; 0x07
    33cc:	98 87       	std	Y+8, r25	; 0x08
    33ce:	a9 87       	std	Y+9, r26	; 0x09
    33d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <breachDetection+0x92>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <breachDetection+0x110>
	else if (__tmp > 65535)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <breachDetection+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9e 83       	std	Y+6, r25	; 0x06
    3432:	8d 83       	std	Y+5, r24	; 0x05
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <breachDetection+0xf2>
    3436:	88 ec       	ldi	r24, 0xC8	; 200
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <breachDetection+0xe0>
    3446:	9c 83       	std	Y+4, r25	; 0x04
    3448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <breachDetection+0xd4>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <breachDetection+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <breachDetection+0x11c>
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	8f 85       	ldd	r24, Y+15	; 0x0f
    3488:	8f 5f       	subi	r24, 0xFF	; 255
    348a:	8f 87       	std	Y+15, r24	; 0x0f
    348c:	8f 85       	ldd	r24, Y+15	; 0x0f
    348e:	85 30       	cpi	r24, 0x05	; 5
    3490:	08 f4       	brcc	.+2      	; 0x3494 <breachDetection+0x132>
    3492:	87 cf       	rjmp	.-242    	; 0x33a2 <breachDetection+0x40>
	{
		_delay_ms(10000);
	}
	/* Clear the screen and prompt the user to try again */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("Enter Password: ");
    34a2:	8d e7       	ldi	r24, 0x7D	; 125
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	60 e0       	ldi	r22, 0x00	; 0
    34ae:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	/* Restart timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    34b2:	84 e0       	ldi	r24, 0x04	; 4
    34b4:	60 e0       	ldi	r22, 0x00	; 0
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	49 e0       	ldi	r20, 0x09	; 9
    34ba:	5d e3       	ldi	r21, 0x3D	; 61
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer1_start>
}
    34c4:	2f 96       	adiw	r28, 0x0f	; 15
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <passwordSuccessful>:
 * 		Function that represents device options upon entering successful password.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void passwordSuccessful(void)
{
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
	/* Reset number of entries */
	reenter = 0;
    34de:	10 92 70 01 	sts	0x0170, r1
	/* Reset number of button clicks */
	buttonCount = 0;
    34e2:	10 92 72 01 	sts	0x0172, r1
	/* Stop cursor blinking */
	Timer1_stop();
    34e6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer1_stop>
	/* Turn LCD cursor OFF */
	LCD_sendCommand(LCD_CURSOR_OFF);
    34ea:	8c e0       	ldi	r24, 0x0C	; 12
    34ec:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	/* Set password as saved in EEPROM */
	passwordState = 1;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	80 93 71 01 	sts	0x0171, r24
	/* Clear LCD screen & prompt user for options */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("+ : Open Door");
    3504:	8e e8       	ldi	r24, 0x8E	; 142
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    3514:	8c e9       	ldi	r24, 0x9C	; 156
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	/* Wait for user to press a key */
	key = Keypad_getPressedKey();
    351c:	0e 94 84 10 	call	0x2108	; 0x2108 <Keypad_getPressedKey>
    3520:	80 93 6f 01 	sts	0x016F, r24
	/* If user selected to open the door */
	if (key == '+')
    3524:	80 91 6f 01 	lds	r24, 0x016F
    3528:	8b 32       	cpi	r24, 0x2B	; 43
    352a:	09 f0       	breq	.+2      	; 0x352e <passwordSuccessful+0x58>
    352c:	54 c0       	rjmp	.+168    	; 0x35d6 <passwordSuccessful+0x100>
	{
		/* Tell CONTROL_ECU that user selected opening the door */
		USART_sendByte(0x04);
    352e:	84 e0       	ldi	r24, 0x04	; 4
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <USART_sendByte>
		/* Wait for CONTROL_ECU to initiate door opening & display status on screen */
		if (USART_recieveByte() == 0x04)
    3536:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    353a:	84 30       	cpi	r24, 0x04	; 4
    353c:	91 05       	cpc	r25, r1
    353e:	59 f4       	brne	.+22     	; 0x3556 <passwordSuccessful+0x80>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
			LCD_moveCursor(0, 0);
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
			LCD_displayString("  Opening Door");
    354e:	8c ea       	ldi	r24, 0xAC	; 172
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
		}
		/* Wait for CONTROL_ECU to initiate door holding & display status on screen */
		if (USART_recieveByte() == 0x04)
    3556:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    355a:	84 30       	cpi	r24, 0x04	; 4
    355c:	91 05       	cpc	r25, r1
    355e:	59 f4       	brne	.+22     	; 0x3576 <passwordSuccessful+0xa0>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
			LCD_moveCursor(0, 0);
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
			LCD_displayString("  Door Opened");
    356e:	8b eb       	ldi	r24, 0xBB	; 187
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
		}
		/* Wait for CONTROL_ECU to initiate door closing & display status on screen */
		if (USART_recieveByte() == 0x04)
    3576:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    357a:	84 30       	cpi	r24, 0x04	; 4
    357c:	91 05       	cpc	r25, r1
    357e:	59 f4       	brne	.+22     	; 0x3596 <passwordSuccessful+0xc0>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
			LCD_moveCursor(0, 0);
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
			LCD_displayString("  Closing Door");
    358e:	89 ec       	ldi	r24, 0xC9	; 201
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
		}
		/* Wait for CONTROL_ECU to finish and prompt the user to re-enter the password */
		if (USART_recieveByte() == 0x04)
    3596:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    359a:	84 30       	cpi	r24, 0x04	; 4
    359c:	91 05       	cpc	r25, r1
    359e:	c9 f5       	brne	.+114    	; 0x3612 <passwordSuccessful+0x13c>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
			LCD_moveCursor(0, 0);
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
			LCD_displayString("Enter Password: ");
    35ae:	88 ed       	ldi	r24, 0xD8	; 216
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
			LCD_moveCursor(1, 0);
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
			/* Restart timer1 for LCD cursor blink */
			Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    35be:	84 e0       	ldi	r24, 0x04	; 4
    35c0:	60 e0       	ldi	r22, 0x00	; 0
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	49 e0       	ldi	r20, 0x09	; 9
    35c6:	5d e3       	ldi	r21, 0x3D	; 61
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer1_start>
			/* Reset button clicks to (0) */
			buttonCount = 0;
    35d0:	10 92 72 01 	sts	0x0172, r1
    35d4:	1e c0       	rjmp	.+60     	; 0x3612 <passwordSuccessful+0x13c>
		}
	}
	/* If user selected to change the password */
	else if (key == '-')
    35d6:	80 91 6f 01 	lds	r24, 0x016F
    35da:	8d 32       	cpi	r24, 0x2D	; 45
    35dc:	d1 f4       	brne	.+52     	; 0x3612 <passwordSuccessful+0x13c>
	{
		/* Change the state of the password to unsaved in EEPROM */
		passwordState = 0;
    35de:	10 92 71 01 	sts	0x0171, r1
		/* Clear the screen and prompt the user to enter the new password */
		LCD_sendCommand(LCD_CLEAR_COMMAND);
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
		LCD_moveCursor(0, 0);
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
		LCD_displayString("Enter Password: ");
    35f0:	88 ed       	ldi	r24, 0xD8	; 216
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
		LCD_moveCursor(1, 0);
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
		/* Restart timer1 for LCD cursor blink */
		Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    3600:	84 e0       	ldi	r24, 0x04	; 4
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	49 e0       	ldi	r20, 0x09	; 9
    3608:	5d e3       	ldi	r21, 0x3D	; 61
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer1_start>
	}
}
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <passwordNoMatch>:
 * 		Function that represents un-matched passwords screen.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void passwordNoMatch(void)
{
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	2e 97       	sbiw	r28, 0x0e	; 14
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
	/* Change the state of the password to unsaved in EEPROM */
	passwordState = 0;
    362c:	10 92 71 01 	sts	0x0171, r1
	/* Change re-entry state into first entry */
	reenter = 0;
    3630:	10 92 70 01 	sts	0x0170, r1
	/* Reset button clicks to (0) */
	buttonCount = 0;
    3634:	10 92 72 01 	sts	0x0172, r1
	/* Stop cursor blinking */
	Timer1_stop();
    3638:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer1_stop>
	LCD_sendCommand(LCD_CURSOR_OFF);
    363c:	8c e0       	ldi	r24, 0x0C	; 12
    363e:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	/* Display a message to user when passwords entered are not matched */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("  PASSWORDS DO");
    3650:	89 ee       	ldi	r24, 0xE9	; 233
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	60 e0       	ldi	r22, 0x00	; 0
    365c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("   NOT MATCH");
    3660:	88 ef       	ldi	r24, 0xF8	; 248
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	90 e8       	ldi	r25, 0x80	; 128
    366c:	ab e3       	ldi	r26, 0x3B	; 59
    366e:	b5 e4       	ldi	r27, 0x45	; 69
    3670:	8b 87       	std	Y+11, r24	; 0x0b
    3672:	9c 87       	std	Y+12, r25	; 0x0c
    3674:	ad 87       	std	Y+13, r26	; 0x0d
    3676:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3678:	6b 85       	ldd	r22, Y+11	; 0x0b
    367a:	7c 85       	ldd	r23, Y+12	; 0x0c
    367c:	8d 85       	ldd	r24, Y+13	; 0x0d
    367e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	4a ef       	ldi	r20, 0xFA	; 250
    3686:	54 e4       	ldi	r21, 0x44	; 68
    3688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	8f 83       	std	Y+7, r24	; 0x07
    3692:	98 87       	std	Y+8, r25	; 0x08
    3694:	a9 87       	std	Y+9, r26	; 0x09
    3696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3698:	6f 81       	ldd	r22, Y+7	; 0x07
    369a:	78 85       	ldd	r23, Y+8	; 0x08
    369c:	89 85       	ldd	r24, Y+9	; 0x09
    369e:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e8       	ldi	r20, 0x80	; 128
    36a6:	5f e3       	ldi	r21, 0x3F	; 63
    36a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ac:	88 23       	and	r24, r24
    36ae:	2c f4       	brge	.+10     	; 0x36ba <passwordNoMatch+0xa2>
		__ticks = 1;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	8d 83       	std	Y+5, r24	; 0x05
    36b8:	3f c0       	rjmp	.+126    	; 0x3738 <passwordNoMatch+0x120>
	else if (__tmp > 65535)
    36ba:	6f 81       	ldd	r22, Y+7	; 0x07
    36bc:	78 85       	ldd	r23, Y+8	; 0x08
    36be:	89 85       	ldd	r24, Y+9	; 0x09
    36c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	3f ef       	ldi	r19, 0xFF	; 255
    36c6:	4f e7       	ldi	r20, 0x7F	; 127
    36c8:	57 e4       	ldi	r21, 0x47	; 71
    36ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ce:	18 16       	cp	r1, r24
    36d0:	4c f5       	brge	.+82     	; 0x3724 <passwordNoMatch+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e2       	ldi	r20, 0x20	; 32
    36e0:	51 e4       	ldi	r21, 0x41	; 65
    36e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	bc 01       	movw	r22, r24
    36ec:	cd 01       	movw	r24, r26
    36ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	9e 83       	std	Y+6, r25	; 0x06
    36f8:	8d 83       	std	Y+5, r24	; 0x05
    36fa:	0f c0       	rjmp	.+30     	; 0x371a <passwordNoMatch+0x102>
    36fc:	88 ec       	ldi	r24, 0xC8	; 200
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9c 83       	std	Y+4, r25	; 0x04
    3702:	8b 83       	std	Y+3, r24	; 0x03
    3704:	8b 81       	ldd	r24, Y+3	; 0x03
    3706:	9c 81       	ldd	r25, Y+4	; 0x04
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	f1 f7       	brne	.-4      	; 0x3708 <passwordNoMatch+0xf0>
    370c:	9c 83       	std	Y+4, r25	; 0x04
    370e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3710:	8d 81       	ldd	r24, Y+5	; 0x05
    3712:	9e 81       	ldd	r25, Y+6	; 0x06
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371a:	8d 81       	ldd	r24, Y+5	; 0x05
    371c:	9e 81       	ldd	r25, Y+6	; 0x06
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	69 f7       	brne	.-38     	; 0x36fc <passwordNoMatch+0xe4>
    3722:	14 c0       	rjmp	.+40     	; 0x374c <passwordNoMatch+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3724:	6f 81       	ldd	r22, Y+7	; 0x07
    3726:	78 85       	ldd	r23, Y+8	; 0x08
    3728:	89 85       	ldd	r24, Y+9	; 0x09
    372a:	9a 85       	ldd	r25, Y+10	; 0x0a
    372c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	9e 83       	std	Y+6, r25	; 0x06
    3736:	8d 83       	std	Y+5, r24	; 0x05
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	9e 81       	ldd	r25, Y+6	; 0x06
    373c:	9a 83       	std	Y+2, r25	; 0x02
    373e:	89 83       	std	Y+1, r24	; 0x01
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	9a 81       	ldd	r25, Y+2	; 0x02
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	f1 f7       	brne	.-4      	; 0x3744 <passwordNoMatch+0x12c>
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for (3) seconds */
	_delay_ms(3000);
	/* Clear the screen and prompt the user to try again */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("Enter Password: ");
    375a:	88 ed       	ldi	r24, 0xD8	; 216
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	/* Restart timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    376a:	84 e0       	ldi	r24, 0x04	; 4
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	49 e0       	ldi	r20, 0x09	; 9
    3772:	5d e3       	ldi	r21, 0x3D	; 61
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer1_start>
}
    377c:	2e 96       	adiw	r28, 0x0e	; 14
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	cf 91       	pop	r28
    378a:	df 91       	pop	r29
    378c:	08 95       	ret

0000378e <passwordFail>:
 * 		Function that represents password entry failure screen.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void passwordFail(void)
{
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	2e 97       	sbiw	r28, 0x0e	; 14
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
	reenter = 0;
    37a2:	10 92 70 01 	sts	0x0170, r1
	/* Reset button clicks to (0) */
	buttonCount = 0;
    37a6:	10 92 72 01 	sts	0x0172, r1
	/* Stop cursor blinking */
	Timer1_stop();
    37aa:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer1_stop>
	LCD_sendCommand(LCD_CURSOR_OFF);
    37ae:	8c e0       	ldi	r24, 0x0C	; 12
    37b0:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	/* Display a message to user when password is incorrect */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("   PASSWORD");
    37c2:	85 e0       	ldi	r24, 0x05	; 5
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("   INCORRECT");
    37d2:	81 e1       	ldi	r24, 0x11	; 17
    37d4:	91 e0       	ldi	r25, 0x01	; 1
    37d6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e8       	ldi	r25, 0x80	; 128
    37de:	ab e3       	ldi	r26, 0x3B	; 59
    37e0:	b5 e4       	ldi	r27, 0x45	; 69
    37e2:	8b 87       	std	Y+11, r24	; 0x0b
    37e4:	9c 87       	std	Y+12, r25	; 0x0c
    37e6:	ad 87       	std	Y+13, r26	; 0x0d
    37e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	4a ef       	ldi	r20, 0xFA	; 250
    37f8:	54 e4       	ldi	r21, 0x44	; 68
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	8f 83       	std	Y+7, r24	; 0x07
    3804:	98 87       	std	Y+8, r25	; 0x08
    3806:	a9 87       	std	Y+9, r26	; 0x09
    3808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    380a:	6f 81       	ldd	r22, Y+7	; 0x07
    380c:	78 85       	ldd	r23, Y+8	; 0x08
    380e:	89 85       	ldd	r24, Y+9	; 0x09
    3810:	9a 85       	ldd	r25, Y+10	; 0x0a
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e8       	ldi	r20, 0x80	; 128
    3818:	5f e3       	ldi	r21, 0x3F	; 63
    381a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381e:	88 23       	and	r24, r24
    3820:	2c f4       	brge	.+10     	; 0x382c <passwordFail+0x9e>
		__ticks = 1;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	3f c0       	rjmp	.+126    	; 0x38aa <passwordFail+0x11c>
	else if (__tmp > 65535)
    382c:	6f 81       	ldd	r22, Y+7	; 0x07
    382e:	78 85       	ldd	r23, Y+8	; 0x08
    3830:	89 85       	ldd	r24, Y+9	; 0x09
    3832:	9a 85       	ldd	r25, Y+10	; 0x0a
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	4f e7       	ldi	r20, 0x7F	; 127
    383a:	57 e4       	ldi	r21, 0x47	; 71
    383c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3840:	18 16       	cp	r1, r24
    3842:	4c f5       	brge	.+82     	; 0x3896 <passwordFail+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3844:	6b 85       	ldd	r22, Y+11	; 0x0b
    3846:	7c 85       	ldd	r23, Y+12	; 0x0c
    3848:	8d 85       	ldd	r24, Y+13	; 0x0d
    384a:	9e 85       	ldd	r25, Y+14	; 0x0e
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e2       	ldi	r20, 0x20	; 32
    3852:	51 e4       	ldi	r21, 0x41	; 65
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	9e 83       	std	Y+6, r25	; 0x06
    386a:	8d 83       	std	Y+5, r24	; 0x05
    386c:	0f c0       	rjmp	.+30     	; 0x388c <passwordFail+0xfe>
    386e:	88 ec       	ldi	r24, 0xC8	; 200
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	9c 83       	std	Y+4, r25	; 0x04
    3874:	8b 83       	std	Y+3, r24	; 0x03
    3876:	8b 81       	ldd	r24, Y+3	; 0x03
    3878:	9c 81       	ldd	r25, Y+4	; 0x04
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <passwordFail+0xec>
    387e:	9c 83       	std	Y+4, r25	; 0x04
    3880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	69 f7       	brne	.-38     	; 0x386e <passwordFail+0xe0>
    3894:	14 c0       	rjmp	.+40     	; 0x38be <passwordFail+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	8d 81       	ldd	r24, Y+5	; 0x05
    38ac:	9e 81       	ldd	r25, Y+6	; 0x06
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <passwordFail+0x128>
    38ba:	9a 83       	std	Y+2, r25	; 0x02
    38bc:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for (3) seconds */
	_delay_ms(3000);
	/* Clear the screen and prompt the user to try again */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	LCD_displayString("Enter Password: ");
    38cc:	88 ed       	ldi	r24, 0xD8	; 216
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	LCD_moveCursor(1, 0);
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	60 e0       	ldi	r22, 0x00	; 0
    38d8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	/* Restart timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    38dc:	84 e0       	ldi	r24, 0x04	; 4
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	70 e0       	ldi	r23, 0x00	; 0
    38e2:	49 e0       	ldi	r20, 0x09	; 9
    38e4:	5d e3       	ldi	r21, 0x3D	; 61
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer1_start>
}
    38ee:	2e 96       	adiw	r28, 0x0e	; 14
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <enterPassword>:
 * 		Function that represents the password entry screen.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void enterPassword(void)
{
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	2e 97       	sbiw	r28, 0x0e	; 14
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
	/* Show a message when user tries to enter a password more than 5 digits */
	if (buttonCount == 5)
    3914:	80 91 72 01 	lds	r24, 0x0172
    3918:	85 30       	cpi	r24, 0x05	; 5
    391a:	69 f4       	brne	.+26     	; 0x3936 <enterPassword+0x36>
	{
		LCD_moveCursor(1, 8);
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	68 e0       	ldi	r22, 0x08	; 8
    3920:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
		LCD_displayString("5 Only");
    3924:	8e e1       	ldi	r24, 0x1E	; 30
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
		LCD_moveCursor(1, 5);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	65 e0       	ldi	r22, 0x05	; 5
    3930:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
    3934:	29 c0       	rjmp	.+82     	; 0x3988 <enterPassword+0x88>
	}
	else
	{
		/* If it is not a re-entry */
		if (reenter == 0)
    3936:	80 91 70 01 	lds	r24, 0x0170
    393a:	88 23       	and	r24, r24
    393c:	99 f4       	brne	.+38     	; 0x3964 <enterPassword+0x64>
		{
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
    393e:	8a e2       	ldi	r24, 0x2A	; 42
    3940:	0e 94 38 14 	call	0x2870	; 0x2870 <LCD_displayCharacter>
			password[buttonCount] = key; /* Save the key in first password array */
    3944:	80 91 72 01 	lds	r24, 0x0172
    3948:	88 2f       	mov	r24, r24
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	20 91 6f 01 	lds	r18, 0x016F
    3950:	fc 01       	movw	r30, r24
    3952:	ed 58       	subi	r30, 0x8D	; 141
    3954:	fe 4f       	sbci	r31, 0xFE	; 254
    3956:	20 83       	st	Z, r18
			buttonCount++; /* Count button click */
    3958:	80 91 72 01 	lds	r24, 0x0172
    395c:	8f 5f       	subi	r24, 0xFF	; 255
    395e:	80 93 72 01 	sts	0x0172, r24
    3962:	12 c0       	rjmp	.+36     	; 0x3988 <enterPassword+0x88>
		}
		/* If it is a re-entry */
		else
		{
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
    3964:	8a e2       	ldi	r24, 0x2A	; 42
    3966:	0e 94 38 14 	call	0x2870	; 0x2870 <LCD_displayCharacter>
			passwordReEnter[buttonCount] = key; /* Save the key in second password array */
    396a:	80 91 72 01 	lds	r24, 0x0172
    396e:	88 2f       	mov	r24, r24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	20 91 6f 01 	lds	r18, 0x016F
    3976:	fc 01       	movw	r30, r24
    3978:	e8 58       	subi	r30, 0x88	; 136
    397a:	fe 4f       	sbci	r31, 0xFE	; 254
    397c:	20 83       	st	Z, r18
			buttonCount++; /* Count button click */
    397e:	80 91 72 01 	lds	r24, 0x0172
    3982:	8f 5f       	subi	r24, 0xFF	; 255
    3984:	80 93 72 01 	sts	0x0172, r24
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	aa ef       	ldi	r26, 0xFA	; 250
    398e:	b3 e4       	ldi	r27, 0x43	; 67
    3990:	8b 87       	std	Y+11, r24	; 0x0b
    3992:	9c 87       	std	Y+12, r25	; 0x0c
    3994:	ad 87       	std	Y+13, r26	; 0x0d
    3996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3998:	6b 85       	ldd	r22, Y+11	; 0x0b
    399a:	7c 85       	ldd	r23, Y+12	; 0x0c
    399c:	8d 85       	ldd	r24, Y+13	; 0x0d
    399e:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	4a ef       	ldi	r20, 0xFA	; 250
    39a6:	54 e4       	ldi	r21, 0x44	; 68
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	8f 83       	std	Y+7, r24	; 0x07
    39b2:	98 87       	std	Y+8, r25	; 0x08
    39b4:	a9 87       	std	Y+9, r26	; 0x09
    39b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ba:	78 85       	ldd	r23, Y+8	; 0x08
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e8       	ldi	r20, 0x80	; 128
    39c6:	5f e3       	ldi	r21, 0x3F	; 63
    39c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39cc:	88 23       	and	r24, r24
    39ce:	2c f4       	brge	.+10     	; 0x39da <enterPassword+0xda>
		__ticks = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	9e 83       	std	Y+6, r25	; 0x06
    39d6:	8d 83       	std	Y+5, r24	; 0x05
    39d8:	3f c0       	rjmp	.+126    	; 0x3a58 <enterPassword+0x158>
	else if (__tmp > 65535)
    39da:	6f 81       	ldd	r22, Y+7	; 0x07
    39dc:	78 85       	ldd	r23, Y+8	; 0x08
    39de:	89 85       	ldd	r24, Y+9	; 0x09
    39e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	4f e7       	ldi	r20, 0x7F	; 127
    39e8:	57 e4       	ldi	r21, 0x47	; 71
    39ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ee:	18 16       	cp	r1, r24
    39f0:	4c f5       	brge	.+82     	; 0x3a44 <enterPassword+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	51 e4       	ldi	r21, 0x41	; 65
    3a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9e 83       	std	Y+6, r25	; 0x06
    3a18:	8d 83       	std	Y+5, r24	; 0x05
    3a1a:	0f c0       	rjmp	.+30     	; 0x3a3a <enterPassword+0x13a>
    3a1c:	88 ec       	ldi	r24, 0xC8	; 200
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9c 83       	std	Y+4, r25	; 0x04
    3a22:	8b 83       	std	Y+3, r24	; 0x03
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	9c 81       	ldd	r25, Y+4	; 0x04
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <enterPassword+0x128>
    3a2c:	9c 83       	std	Y+4, r25	; 0x04
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	69 f7       	brne	.-38     	; 0x3a1c <enterPassword+0x11c>
    3a42:	14 c0       	rjmp	.+40     	; 0x3a6c <enterPassword+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a44:	6f 81       	ldd	r22, Y+7	; 0x07
    3a46:	78 85       	ldd	r23, Y+8	; 0x08
    3a48:	89 85       	ldd	r24, Y+9	; 0x09
    3a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	9a 81       	ldd	r25, Y+2	; 0x02
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <enterPassword+0x164>
    3a68:	9a 83       	std	Y+2, r25	; 0x02
    3a6a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	_delay_ms(500); /* Delay for keyboard presses */
}
    3a6c:	2e 96       	adiw	r28, 0x0e	; 14
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
    3a86:	27 97       	sbiw	r28, 0x07	; 7
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	de bf       	out	0x3e, r29	; 62
    3a8e:	0f be       	out	0x3f, r0	; 63
    3a90:	cd bf       	out	0x3d, r28	; 61
	/* Variables definations */
	uint8 failCount = 0; /* Variable indicating number of password entries failure */
    3a92:	19 82       	std	Y+1, r1	; 0x01
	/* Enable global interrupt */
	SET_BIT(SREG, 7);
    3a94:	af e5       	ldi	r26, 0x5F	; 95
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	ef e5       	ldi	r30, 0x5F	; 95
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	80 68       	ori	r24, 0x80	; 128
    3aa0:	8c 93       	st	X, r24
	/* Initialize LCD */
	LCD_init();
    3aa2:	0e 94 99 11 	call	0x2332	; 0x2332 <LCD_init>
	/* Create an instance of timer1 initialization structure */
	Timer_initConfig timerConfig =
			{ TIMER16BIT_CTC_OCR1A, NORMAL_OC, LOGIC_HIGH };
    3aa6:	1a 82       	std	Y+2, r1	; 0x02
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	80 7f       	andi	r24, 0xF0	; 240
    3aac:	84 60       	ori	r24, 0x04	; 4
    3aae:	8a 83       	std	Y+2, r24	; 0x02
    3ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab2:	80 64       	ori	r24, 0x40	; 64
    3ab4:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialize timer1 */
	Timer1_init(&timerConfig);
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	02 96       	adiw	r24, 0x02	; 2
    3aba:	0e 94 83 09 	call	0x1306	; 0x1306 <Timer1_init>
	/* Set call-back function for timer1 */
	Timer1_setCallBack(LCD_cursorToggle);
    3abe:	8a ed       	ldi	r24, 0xDA	; 218
    3ac0:	96 e1       	ldi	r25, 0x16	; 22
    3ac2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <Timer1_setCallBack>
	/* Create an instance of USART initialization structure */
	USART_initConfig USARTConfig = { 9600, USART_DATA_8BIT, PARITY_EVEN,
	LOGIC_LOW };
    3ac6:	85 e0       	ldi	r24, 0x05	; 5
    3ac8:	fe 01       	movw	r30, r28
    3aca:	33 96       	adiw	r30, 0x03	; 3
    3acc:	df 01       	movw	r26, r30
    3ace:	98 2f       	mov	r25, r24
    3ad0:	1d 92       	st	X+, r1
    3ad2:	9a 95       	dec	r25
    3ad4:	e9 f7       	brne	.-6      	; 0x3ad0 <main+0x52>
    3ad6:	80 e8       	ldi	r24, 0x80	; 128
    3ad8:	95 e2       	ldi	r25, 0x25	; 37
    3ada:	a0 e0       	ldi	r26, 0x00	; 0
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	8b 83       	std	Y+3, r24	; 0x03
    3ae0:	9c 83       	std	Y+4, r25	; 0x04
    3ae2:	ad 83       	std	Y+5, r26	; 0x05
    3ae4:	be 83       	std	Y+6, r27	; 0x06
    3ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ae8:	88 7f       	andi	r24, 0xF8	; 248
    3aea:	83 60       	ori	r24, 0x03	; 3
    3aec:	8f 83       	std	Y+7, r24	; 0x07
    3aee:	8f 81       	ldd	r24, Y+7	; 0x07
    3af0:	87 7e       	andi	r24, 0xE7	; 231
    3af2:	80 61       	ori	r24, 0x10	; 16
    3af4:	8f 83       	std	Y+7, r24	; 0x07
	/* Initialize USART */
	USART_init(&USARTConfig);
    3af6:	ce 01       	movw	r24, r28
    3af8:	03 96       	adiw	r24, 0x03	; 3
    3afa:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <USART_init>
	/* Display text on LCD */
	LCD_displayString("Enter Password: ");
    3afe:	85 e2       	ldi	r24, 0x25	; 37
    3b00:	91 e0       	ldi	r25, 0x01	; 1
    3b02:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
	/* Move to row 0 column 10 */
	LCD_moveCursor(1, 0);
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
	/* Start timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    3b0e:	84 e0       	ldi	r24, 0x04	; 4
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	70 e0       	ldi	r23, 0x00	; 0
    3b14:	49 e0       	ldi	r20, 0x09	; 9
    3b16:	5d e3       	ldi	r21, 0x3D	; 61
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer1_start>
	/* Determine if the password is saved in EEPROM or not */
	if (USART_recieveByte() == 0xFF)
    3b20:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    3b24:	8f 3f       	cpi	r24, 0xFF	; 255
    3b26:	19 f4       	brne	.+6      	; 0x3b2e <main+0xb0>
	{
		passwordState = 1;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	80 93 71 01 	sts	0x0171, r24
	}
	/* Execute program loop */
	while (TRUE)
	{
		/* Wait for user to press a key */
		key = Keypad_getPressedKey();
    3b2e:	0e 94 84 10 	call	0x2108	; 0x2108 <Keypad_getPressedKey>
    3b32:	80 93 6f 01 	sts	0x016F, r24
		if ((key <= 9) && (key >= 0))
    3b36:	80 91 6f 01 	lds	r24, 0x016F
    3b3a:	8a 30       	cpi	r24, 0x0A	; 10
    3b3c:	18 f4       	brcc	.+6      	; 0x3b44 <main+0xc6>
		{
			/* Enter the password on the screen */
			enterPassword();
    3b3e:	0e 94 80 1c 	call	0x3900	; 0x3900 <enterPassword>
    3b42:	f5 cf       	rjmp	.-22     	; 0x3b2e <main+0xb0>
		}
		/* If user clicked '-' */
		else if (key == '-')
    3b44:	80 91 6f 01 	lds	r24, 0x016F
    3b48:	8d 32       	cpi	r24, 0x2D	; 45
    3b4a:	29 f4       	brne	.+10     	; 0x3b56 <main+0xd8>
		{
			/* Remove the password on the screen */
			removePassword();
    3b4c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <removePassword>
			/* Reset button clicks to (0) */
			buttonCount = 0;
    3b50:	10 92 72 01 	sts	0x0172, r1
    3b54:	ec cf       	rjmp	.-40     	; 0x3b2e <main+0xb0>
		}
		/* If user enters the password */
		else if (key == '=')
    3b56:	80 91 6f 01 	lds	r24, 0x016F
    3b5a:	8d 33       	cpi	r24, 0x3D	; 61
    3b5c:	41 f7       	brne	.-48     	; 0x3b2e <main+0xb0>
		{
			/* Show a message when user tries to enter a password less than 5 digits */
			if (buttonCount != 5)
    3b5e:	80 91 72 01 	lds	r24, 0x0172
    3b62:	85 30       	cpi	r24, 0x05	; 5
    3b64:	79 f0       	breq	.+30     	; 0x3b84 <main+0x106>
			{
				LCD_moveCursor(1, 7);
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	67 e0       	ldi	r22, 0x07	; 7
    3b6a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
				LCD_displayString("Must Be 5");
    3b6e:	86 e3       	ldi	r24, 0x36	; 54
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
				LCD_moveCursor(1, buttonCount);
    3b76:	90 91 72 01 	lds	r25, 0x0172
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	69 2f       	mov	r22, r25
    3b7e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
    3b82:	d5 cf       	rjmp	.-86     	; 0x3b2e <main+0xb0>
			}
			else
			{
				/* Reset button clicks to (0) */
				buttonCount = 0;
    3b84:	10 92 72 01 	sts	0x0172, r1
				/* If no password exists in EEPROM & it is the first entry */
				if (passwordState == 0 && reenter == 0)
    3b88:	80 91 71 01 	lds	r24, 0x0171
    3b8c:	88 23       	and	r24, r24
    3b8e:	f9 f4       	brne	.+62     	; 0x3bce <main+0x150>
    3b90:	80 91 70 01 	lds	r24, 0x0170
    3b94:	88 23       	and	r24, r24
    3b96:	d9 f4       	brne	.+54     	; 0x3bce <main+0x150>
				{
					/* Prompt to re-enter the password for confirmation */
					LCD_sendCommand(LCD_CLEAR_COMMAND);
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_sendCommand>
					LCD_moveCursor(0, 0);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	60 e0       	ldi	r22, 0x00	; 0
    3ba2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
					LCD_displayString("Re-Enter Pass: ");
    3ba6:	80 e4       	ldi	r24, 0x40	; 64
    3ba8:	91 e0       	ldi	r25, 0x01	; 1
    3baa:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
					LCD_moveCursor(1, 0);
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
					LCD_displayString("                ");
    3bb6:	80 e5       	ldi	r24, 0x50	; 80
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_displayString>
					LCD_moveCursor(1, 0);
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	60 e0       	ldi	r22, 0x00	; 0
    3bc2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_moveCursor>
					/* Count the next entry as the second entry */
					reenter = 1;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	80 93 70 01 	sts	0x0170, r24
    3bcc:	b0 cf       	rjmp	.-160    	; 0x3b2e <main+0xb0>
				}
				/* If the user already re-entered the password */
				else if (reenter == 1)
    3bce:	80 91 70 01 	lds	r24, 0x0170
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	61 f4       	brne	.+24     	; 0x3bee <main+0x170>
				{
					/* Send the new password entries to be checked by CONTROL_ECU */
					sendNewPassword();
    3bd6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <sendNewPassword>
					/* If CONTROL_ECU replied with success */
					if (USART_recieveByte() == 0x02)
    3bda:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    3bde:	82 30       	cpi	r24, 0x02	; 2
    3be0:	19 f4       	brne	.+6      	; 0x3be8 <main+0x16a>
					{
						/* Proceed to the next step */
						passwordSuccessful();
    3be2:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <passwordSuccessful>
    3be6:	a3 cf       	rjmp	.-186    	; 0x3b2e <main+0xb0>
					}
					else
					{
						/* Clear screen for repeating */
						passwordNoMatch();
    3be8:	0e 94 0c 1b 	call	0x3618	; 0x3618 <passwordNoMatch>
    3bec:	a0 cf       	rjmp	.-192    	; 0x3b2e <main+0xb0>
					}
				}
				/* If password already found in EEPROM*/
				else if (passwordState == 1)
    3bee:	80 91 71 01 	lds	r24, 0x0171
    3bf2:	81 30       	cpi	r24, 0x01	; 1
    3bf4:	09 f0       	breq	.+2      	; 0x3bf8 <main+0x17a>
    3bf6:	9b cf       	rjmp	.-202    	; 0x3b2e <main+0xb0>
				{
					/* Send the password to be checked by CONTROL_ECU */
					sendPassword();
    3bf8:	0e 94 a4 18 	call	0x3148	; 0x3148 <sendPassword>
					/* If CONTROL_ECU replied with success */
					if (USART_recieveByte() == 0x03)
    3bfc:	0e 94 09 10 	call	0x2012	; 0x2012 <USART_recieveByte>
    3c00:	83 30       	cpi	r24, 0x03	; 3
    3c02:	21 f4       	brne	.+8      	; 0x3c0c <main+0x18e>
					{
						/* Proceed to the next step */
						passwordSuccessful();
    3c04:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <passwordSuccessful>
						/* Reset failure times */
						failCount = 0;
    3c08:	19 82       	std	Y+1, r1	; 0x01
    3c0a:	91 cf       	rjmp	.-222    	; 0x3b2e <main+0xb0>
					}
					else
					{
						/* Clear screen for repeating */
						passwordFail();
    3c0c:	0e 94 c7 1b 	call	0x378e	; 0x378e <passwordFail>
						/* Count for maximum number of wrong entries */
						failCount++;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	89 83       	std	Y+1, r24	; 0x01
						/* If maximum number of wrong entries reached */
						if (failCount == 3)
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	83 30       	cpi	r24, 0x03	; 3
    3c1a:	09 f0       	breq	.+2      	; 0x3c1e <main+0x1a0>
    3c1c:	88 cf       	rjmp	.-240    	; 0x3b2e <main+0xb0>
						{
							/* Execute breach detection protocol */
							breachDetection();
    3c1e:	0e 94 b1 19 	call	0x3362	; 0x3362 <breachDetection>
							/* Reset failure times */
							failCount = 0;
    3c22:	19 82       	std	Y+1, r1	; 0x01
    3c24:	84 cf       	rjmp	.-248    	; 0x3b2e <main+0xb0>

00003c26 <__udivmodsi4>:
    3c26:	a1 e2       	ldi	r26, 0x21	; 33
    3c28:	1a 2e       	mov	r1, r26
    3c2a:	aa 1b       	sub	r26, r26
    3c2c:	bb 1b       	sub	r27, r27
    3c2e:	fd 01       	movw	r30, r26
    3c30:	0d c0       	rjmp	.+26     	; 0x3c4c <__udivmodsi4_ep>

00003c32 <__udivmodsi4_loop>:
    3c32:	aa 1f       	adc	r26, r26
    3c34:	bb 1f       	adc	r27, r27
    3c36:	ee 1f       	adc	r30, r30
    3c38:	ff 1f       	adc	r31, r31
    3c3a:	a2 17       	cp	r26, r18
    3c3c:	b3 07       	cpc	r27, r19
    3c3e:	e4 07       	cpc	r30, r20
    3c40:	f5 07       	cpc	r31, r21
    3c42:	20 f0       	brcs	.+8      	; 0x3c4c <__udivmodsi4_ep>
    3c44:	a2 1b       	sub	r26, r18
    3c46:	b3 0b       	sbc	r27, r19
    3c48:	e4 0b       	sbc	r30, r20
    3c4a:	f5 0b       	sbc	r31, r21

00003c4c <__udivmodsi4_ep>:
    3c4c:	66 1f       	adc	r22, r22
    3c4e:	77 1f       	adc	r23, r23
    3c50:	88 1f       	adc	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	1a 94       	dec	r1
    3c56:	69 f7       	brne	.-38     	; 0x3c32 <__udivmodsi4_loop>
    3c58:	60 95       	com	r22
    3c5a:	70 95       	com	r23
    3c5c:	80 95       	com	r24
    3c5e:	90 95       	com	r25
    3c60:	9b 01       	movw	r18, r22
    3c62:	ac 01       	movw	r20, r24
    3c64:	bd 01       	movw	r22, r26
    3c66:	cf 01       	movw	r24, r30
    3c68:	08 95       	ret

00003c6a <__prologue_saves__>:
    3c6a:	2f 92       	push	r2
    3c6c:	3f 92       	push	r3
    3c6e:	4f 92       	push	r4
    3c70:	5f 92       	push	r5
    3c72:	6f 92       	push	r6
    3c74:	7f 92       	push	r7
    3c76:	8f 92       	push	r8
    3c78:	9f 92       	push	r9
    3c7a:	af 92       	push	r10
    3c7c:	bf 92       	push	r11
    3c7e:	cf 92       	push	r12
    3c80:	df 92       	push	r13
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	ca 1b       	sub	r28, r26
    3c94:	db 0b       	sbc	r29, r27
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	f8 94       	cli
    3c9a:	de bf       	out	0x3e, r29	; 62
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	09 94       	ijmp

00003ca2 <__epilogue_restores__>:
    3ca2:	2a 88       	ldd	r2, Y+18	; 0x12
    3ca4:	39 88       	ldd	r3, Y+17	; 0x11
    3ca6:	48 88       	ldd	r4, Y+16	; 0x10
    3ca8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3caa:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cac:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cae:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cb4:	b9 84       	ldd	r11, Y+9	; 0x09
    3cb6:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb8:	df 80       	ldd	r13, Y+7	; 0x07
    3cba:	ee 80       	ldd	r14, Y+6	; 0x06
    3cbc:	fd 80       	ldd	r15, Y+5	; 0x05
    3cbe:	0c 81       	ldd	r16, Y+4	; 0x04
    3cc0:	1b 81       	ldd	r17, Y+3	; 0x03
    3cc2:	aa 81       	ldd	r26, Y+2	; 0x02
    3cc4:	b9 81       	ldd	r27, Y+1	; 0x01
    3cc6:	ce 0f       	add	r28, r30
    3cc8:	d1 1d       	adc	r29, r1
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
    3cd4:	ed 01       	movw	r28, r26
    3cd6:	08 95       	ret

00003cd8 <itoa>:
    3cd8:	fb 01       	movw	r30, r22
    3cda:	9f 01       	movw	r18, r30
    3cdc:	e8 94       	clt
    3cde:	42 30       	cpi	r20, 0x02	; 2
    3ce0:	c4 f0       	brlt	.+48     	; 0x3d12 <itoa+0x3a>
    3ce2:	45 32       	cpi	r20, 0x25	; 37
    3ce4:	b4 f4       	brge	.+44     	; 0x3d12 <itoa+0x3a>
    3ce6:	4a 30       	cpi	r20, 0x0A	; 10
    3ce8:	29 f4       	brne	.+10     	; 0x3cf4 <itoa+0x1c>
    3cea:	97 fb       	bst	r25, 7
    3cec:	1e f4       	brtc	.+6      	; 0x3cf4 <itoa+0x1c>
    3cee:	90 95       	com	r25
    3cf0:	81 95       	neg	r24
    3cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf4:	64 2f       	mov	r22, r20
    3cf6:	77 27       	eor	r23, r23
    3cf8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__udivmodhi4>
    3cfc:	80 5d       	subi	r24, 0xD0	; 208
    3cfe:	8a 33       	cpi	r24, 0x3A	; 58
    3d00:	0c f0       	brlt	.+2      	; 0x3d04 <itoa+0x2c>
    3d02:	89 5d       	subi	r24, 0xD9	; 217
    3d04:	81 93       	st	Z+, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	a1 f7       	brne	.-24     	; 0x3cf4 <itoa+0x1c>
    3d0c:	16 f4       	brtc	.+4      	; 0x3d12 <itoa+0x3a>
    3d0e:	5d e2       	ldi	r21, 0x2D	; 45
    3d10:	51 93       	st	Z+, r21
    3d12:	10 82       	st	Z, r1
    3d14:	c9 01       	movw	r24, r18
    3d16:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <strrev>

00003d1a <strrev>:
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	67 2f       	mov	r22, r23
    3d20:	71 91       	ld	r23, Z+
    3d22:	77 23       	and	r23, r23
    3d24:	e1 f7       	brne	.-8      	; 0x3d1e <strrev+0x4>
    3d26:	32 97       	sbiw	r30, 0x02	; 2
    3d28:	04 c0       	rjmp	.+8      	; 0x3d32 <strrev+0x18>
    3d2a:	7c 91       	ld	r23, X
    3d2c:	6d 93       	st	X+, r22
    3d2e:	70 83       	st	Z, r23
    3d30:	62 91       	ld	r22, -Z
    3d32:	ae 17       	cp	r26, r30
    3d34:	bf 07       	cpc	r27, r31
    3d36:	c8 f3       	brcs	.-14     	; 0x3d2a <strrev+0x10>
    3d38:	08 95       	ret

00003d3a <__udivmodhi4>:
    3d3a:	aa 1b       	sub	r26, r26
    3d3c:	bb 1b       	sub	r27, r27
    3d3e:	51 e1       	ldi	r21, 0x11	; 17
    3d40:	07 c0       	rjmp	.+14     	; 0x3d50 <__udivmodhi4_ep>

00003d42 <__udivmodhi4_loop>:
    3d42:	aa 1f       	adc	r26, r26
    3d44:	bb 1f       	adc	r27, r27
    3d46:	a6 17       	cp	r26, r22
    3d48:	b7 07       	cpc	r27, r23
    3d4a:	10 f0       	brcs	.+4      	; 0x3d50 <__udivmodhi4_ep>
    3d4c:	a6 1b       	sub	r26, r22
    3d4e:	b7 0b       	sbc	r27, r23

00003d50 <__udivmodhi4_ep>:
    3d50:	88 1f       	adc	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	5a 95       	dec	r21
    3d56:	a9 f7       	brne	.-22     	; 0x3d42 <__udivmodhi4_loop>
    3d58:	80 95       	com	r24
    3d5a:	90 95       	com	r25
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	08 95       	ret

00003d62 <_exit>:
    3d62:	f8 94       	cli

00003d64 <__stop_program>:
    3d64:	ff cf       	rjmp	.-2      	; 0x3d64 <__stop_program>
