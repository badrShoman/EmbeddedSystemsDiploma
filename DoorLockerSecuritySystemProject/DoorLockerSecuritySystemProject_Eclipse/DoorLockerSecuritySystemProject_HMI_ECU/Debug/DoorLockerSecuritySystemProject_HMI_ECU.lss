
DoorLockerSecuritySystemProject_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ee4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00003ee4  00003f78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800136  00800136  0000404e  2**0
                  ALLOC
  3 .stab         000036d8  00000000  00000000  00004050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000169b  00000000  00000000  00007728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000acbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c954  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d50f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__vector_7>
      20:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__vector_8>
      24:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <main>
      8a:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_cursorToggle>:
 * 		Function that toggles LCD cursor every 0.5 second.
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_cursorToggle(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <LCD_cursorToggle+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	/* Define a static toggle variable */
	static volatile uint8 toggle = LOGIC_LOW;
	/* Switch toggle & cursor value */
	switch (toggle)
     b50:	80 91 3a 01 	lds	r24, 0x013A
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	31 f0       	breq	.+12     	; 0xb70 <LCD_cursorToggle+0x2a>
     b64:	29 81       	ldd	r18, Y+1	; 0x01
     b66:	3a 81       	ldd	r19, Y+2	; 0x02
     b68:	21 30       	cpi	r18, 0x01	; 1
     b6a:	31 05       	cpc	r19, r1
     b6c:	41 f0       	breq	.+16     	; 0xb7e <LCD_cursorToggle+0x38>
     b6e:	0c c0       	rjmp	.+24     	; 0xb88 <LCD_cursorToggle+0x42>
	{
		case LOGIC_LOW:
			/* Turn cursor ON */
			LCD_sendCommand(LCD_CURSOR_ON);
     b70:	8e e0       	ldi	r24, 0x0E	; 14
     b72:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
			toggle = LOGIC_HIGH;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 3a 01 	sts	0x013A, r24
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <LCD_cursorToggle+0x42>
		break;
		case LOGIC_HIGH:
			/* Turn cursor OFF */
			LCD_sendCommand(LCD_CURSOR_OFF);
     b7e:	8c e0       	ldi	r24, 0x0C	; 12
     b80:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
			toggle = LOGIC_LOW;
     b84:	10 92 3a 01 	sts	0x013A, r1
		break;
	}
}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <passwordSuccessful>:
 * 		Function that is executed upon entering a successful password.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void passwordSuccessful(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	/* Reset number of entries */
	reenter = 0;
     b9a:	10 92 37 01 	sts	0x0137, r1
	/* Reset number of button clicks */
	buttonCount = 0;
     b9e:	10 92 39 01 	sts	0x0139, r1
	/* Stop cursor blinking */
	Timer1_stop();
     ba2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <Timer1_stop>
	/* Turn LCD cursor OFF */
	LCD_sendCommand(LCD_CURSOR_OFF);
     ba6:	8c e0       	ldi	r24, 0x0C	; 12
     ba8:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	/* Set password as saved in EEPROM */
	passwordState = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 38 01 	sts	0x0138, r24
	/* Clear LCD screen & prompt user for options */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_moveCursor(0, 0);
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("+ : Open Door");
     bc0:	80 e6       	ldi	r24, 0x60	; 96
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	LCD_moveCursor(1, 0);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     bd0:	8e e6       	ldi	r24, 0x6E	; 110
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	/* Wait for user to press a key */
	key = Keypad_getPressedKey();
     bd8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Keypad_getPressedKey>
     bdc:	80 93 36 01 	sts	0x0136, r24
	/* If user selected to open the door */
	if (key == '+')
     be0:	80 91 36 01 	lds	r24, 0x0136
     be4:	8b 32       	cpi	r24, 0x2B	; 43
     be6:	09 f0       	breq	.+2      	; 0xbea <passwordSuccessful+0x58>
     be8:	4f c0       	rjmp	.+158    	; 0xc88 <passwordSuccessful+0xf6>
	{
		/* Tell CONTROL_ECU that user selected opening the door */
		USART_sendByte(0x04);
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
		/* Wait for CONTROL_ECU to initiate door opening & display status on screen */
		if (USART_recieveByte() == 0x04)
     bf0:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	59 f4       	brne	.+22     	; 0xc0e <passwordSuccessful+0x7c>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
			LCD_moveCursor(0, 0);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			LCD_displayString("  Opening Door");
     c06:	8e e7       	ldi	r24, 0x7E	; 126
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
		}
		/* Wait for CONTROL_ECU to initiate door holding & display status on screen */
		if (USART_recieveByte() == 0x04)
     c0e:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	59 f4       	brne	.+22     	; 0xc2c <passwordSuccessful+0x9a>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
			LCD_moveCursor(0, 0);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			LCD_displayString("  Door Opened");
     c24:	8d e8       	ldi	r24, 0x8D	; 141
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
		}
		/* Wait for CONTROL_ECU to initiate door closing & display status on screen */
		if (USART_recieveByte() == 0x04)
     c2c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
     c30:	84 30       	cpi	r24, 0x04	; 4
     c32:	59 f4       	brne	.+22     	; 0xc4a <passwordSuccessful+0xb8>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
			LCD_moveCursor(0, 0);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			LCD_displayString("  Closing Door");
     c42:	8b e9       	ldi	r24, 0x9B	; 155
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
		}
		/* Wait for CONTROL_ECU to finish and prompt the user to re-enter the password */
		if (USART_recieveByte() == 0x04)
     c4a:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	c9 f5       	brne	.+114    	; 0xcc4 <passwordSuccessful+0x132>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
			LCD_moveCursor(0, 0);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			LCD_displayString("Enter Password: ");
     c60:	8a ea       	ldi	r24, 0xAA	; 170
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
			LCD_moveCursor(1, 0);
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			/* Restart timer1 for LCD cursor blink */
			Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	49 e0       	ldi	r20, 0x09	; 9
     c78:	5d e3       	ldi	r21, 0x3D	; 61
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <Timer1_start>
			/* Reset button clicks to (0) */
			buttonCount = 0;
     c82:	10 92 39 01 	sts	0x0139, r1
     c86:	1e c0       	rjmp	.+60     	; 0xcc4 <passwordSuccessful+0x132>
		}
	}
	/* If user selected to change the password */
	else if (key == '-')
     c88:	80 91 36 01 	lds	r24, 0x0136
     c8c:	8d 32       	cpi	r24, 0x2D	; 45
     c8e:	d1 f4       	brne	.+52     	; 0xcc4 <passwordSuccessful+0x132>
	{
		/* Change the state of the password to unsaved in EEPROM */
		passwordState = 0;
     c90:	10 92 38 01 	sts	0x0138, r1
		/* Clear the screen and prompt the user to enter the new password */
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
		LCD_moveCursor(0, 0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
		LCD_displayString("Enter Password: ");
     ca2:	8a ea       	ldi	r24, 0xAA	; 170
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
		LCD_moveCursor(1, 0);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
		/* Restart timer1 for LCD cursor blink */
		Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	49 e0       	ldi	r20, 0x09	; 9
     cba:	5d e3       	ldi	r21, 0x3D	; 61
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <Timer1_start>
	}
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <passwordNoMatch>:
 * 		Function that is executed upon entering un-matched passwords.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void passwordNoMatch(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	2e 97       	sbiw	r28, 0x0e	; 14
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	/* Change the state of the password to unsaved in EEPROM */
	passwordState = 0;
     cde:	10 92 38 01 	sts	0x0138, r1
	/* Change re-entry state into first entry */
	reenter = 0;
     ce2:	10 92 37 01 	sts	0x0137, r1
	/* Reset button clicks to (0) */
	buttonCount = 0;
     ce6:	10 92 39 01 	sts	0x0139, r1
	/* Stop cursor blinking */
	Timer1_stop();
     cea:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <Timer1_stop>
	LCD_sendCommand(LCD_CURSOR_OFF);
     cee:	8c e0       	ldi	r24, 0x0C	; 12
     cf0:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	/* Display a message to user when passwords entered are not matched */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_moveCursor(0, 0);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("  PASSWORDS DO");
     d02:	8b eb       	ldi	r24, 0xBB	; 187
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	LCD_moveCursor(1, 0);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("   NOT MATCH");
     d12:	8a ec       	ldi	r24, 0xCA	; 202
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e8       	ldi	r25, 0x80	; 128
     d1e:	ab e3       	ldi	r26, 0x3B	; 59
     d20:	b5 e4       	ldi	r27, 0x45	; 69
     d22:	8b 87       	std	Y+11, r24	; 0x0b
     d24:	9c 87       	std	Y+12, r25	; 0x0c
     d26:	ad 87       	std	Y+13, r26	; 0x0d
     d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d30:	9e 85       	ldd	r25, Y+14	; 0x0e
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a ef       	ldi	r20, 0xFA	; 250
     d38:	54 e4       	ldi	r21, 0x44	; 68
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8f 83       	std	Y+7, r24	; 0x07
     d44:	98 87       	std	Y+8, r25	; 0x08
     d46:	a9 87       	std	Y+9, r26	; 0x09
     d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d4a:	6f 81       	ldd	r22, Y+7	; 0x07
     d4c:	78 85       	ldd	r23, Y+8	; 0x08
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <passwordNoMatch+0xa2>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9e 83       	std	Y+6, r25	; 0x06
     d68:	8d 83       	std	Y+5, r24	; 0x05
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <passwordNoMatch+0x120>
	else if (__tmp > 65535)
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <passwordNoMatch+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	6b 85       	ldd	r22, Y+11	; 0x0b
     d86:	7c 85       	ldd	r23, Y+12	; 0x0c
     d88:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9e 83       	std	Y+6, r25	; 0x06
     daa:	8d 83       	std	Y+5, r24	; 0x05
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <passwordNoMatch+0x102>
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <passwordNoMatch+0xf0>
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <passwordNoMatch+0xe4>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <passwordNoMatch+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6f 81       	ldd	r22, Y+7	; 0x07
     dd8:	78 85       	ldd	r23, Y+8	; 0x08
     dda:	89 85       	ldd	r24, Y+9	; 0x09
     ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <passwordNoMatch+0x12c>
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for (3) seconds */
	_delay_ms(3000);
	/* Clear the screen and prompt the user to try again */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_moveCursor(0, 0);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("Enter Password: ");
     e0c:	8a ea       	ldi	r24, 0xAA	; 170
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	LCD_moveCursor(1, 0);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	/* Restart timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	49 e0       	ldi	r20, 0x09	; 9
     e24:	5d e3       	ldi	r21, 0x3D	; 61
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <Timer1_start>
}
     e2e:	2e 96       	adiw	r28, 0x0e	; 14
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <passwordFail>:
 * 		Function that is executed upon entering a wrong password.
 * [Args]	: Void.
 * [Return]	: Void.
 */
static void passwordFail(void)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	2e 97       	sbiw	r28, 0x0e	; 14
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
	reenter = 0;
     e54:	10 92 37 01 	sts	0x0137, r1
	/* Reset button clicks to (0) */
	buttonCount = 0;
     e58:	10 92 39 01 	sts	0x0139, r1
	/* Stop cursor blinking */
	Timer1_stop();
     e5c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <Timer1_stop>
	LCD_sendCommand(LCD_CURSOR_OFF);
     e60:	8c e0       	ldi	r24, 0x0C	; 12
     e62:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	/* Display a message to user when password is incorrect */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_moveCursor(0, 0);
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("   PASSWORD");
     e74:	87 ed       	ldi	r24, 0xD7	; 215
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	LCD_moveCursor(1, 0);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("   INCORRECT");
     e84:	83 ee       	ldi	r24, 0xE3	; 227
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e8       	ldi	r25, 0x80	; 128
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b5 e4       	ldi	r27, 0x45	; 69
     e94:	8b 87       	std	Y+11, r24	; 0x0b
     e96:	9c 87       	std	Y+12, r25	; 0x0c
     e98:	ad 87       	std	Y+13, r26	; 0x0d
     e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8f 83       	std	Y+7, r24	; 0x07
     eb6:	98 87       	std	Y+8, r25	; 0x08
     eb8:	a9 87       	std	Y+9, r26	; 0x09
     eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <passwordFail+0x9e>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <passwordFail+0x11c>
	else if (__tmp > 65535)
     ede:	6f 81       	ldd	r22, Y+7	; 0x07
     ee0:	78 85       	ldd	r23, Y+8	; 0x08
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <passwordFail+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <passwordFail+0xfe>
     f20:	88 ec       	ldi	r24, 0xC8	; 200
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <passwordFail+0xec>
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <passwordFail+0xe0>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <passwordFail+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <passwordFail+0x128>
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for (3) seconds */
	_delay_ms(3000);
	/* Clear the screen and prompt the user to try again */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_moveCursor(0, 0);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString("Enter Password: ");
     f7e:	8a ea       	ldi	r24, 0xAA	; 170
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	LCD_moveCursor(1, 0);
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	/* Restart timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	49 e0       	ldi	r20, 0x09	; 9
     f96:	5d e3       	ldi	r21, 0x3D	; 61
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <Timer1_start>
}
     fa0:	2e 96       	adiw	r28, 0x0e	; 14
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	c4 57       	subi	r28, 0x74	; 116
     fc0:	d0 40       	sbci	r29, 0x00	; 0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
	/* Variable definations */
	uint8 password[5] = { 0, 0, 0, 0, 0 }; /* Array holding first password */
     fcc:	ce 01       	movw	r24, r28
     fce:	8b 59       	subi	r24, 0x9B	; 155
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	25 e0       	ldi	r18, 0x05	; 5
     fd4:	fc 01       	movw	r30, r24
     fd6:	df 01       	movw	r26, r30
     fd8:	82 2f       	mov	r24, r18
     fda:	1d 92       	st	X+, r1
     fdc:	8a 95       	dec	r24
     fde:	e9 f7       	brne	.-6      	; 0xfda <main+0x28>
	uint8 passwordReEnter[5] = { 0, 0, 0, 0, 0 }; /* Array holding re-entered password */
     fe0:	ce 01       	movw	r24, r28
     fe2:	86 59       	subi	r24, 0x96	; 150
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	25 e0       	ldi	r18, 0x05	; 5
     fe8:	fc 01       	movw	r30, r24
     fea:	df 01       	movw	r26, r30
     fec:	82 2f       	mov	r24, r18
     fee:	1d 92       	st	X+, r1
     ff0:	8a 95       	dec	r24
     ff2:	e9 f7       	brne	.-6      	; 0xfee <main+0x3c>
	uint8 failCount = 0; /* Variable indicating number of password entries failure */
     ff4:	fe 01       	movw	r30, r28
     ff6:	ec 59       	subi	r30, 0x9C	; 156
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	10 82       	st	Z, r1
	uint8 counter = 0; /* A counter variable for loops */
     ffc:	fe 01       	movw	r30, r28
     ffe:	ed 59       	subi	r30, 0x9D	; 157
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	10 82       	st	Z, r1
	/* Enable global interrupt */
	SET_BIT(SREG, 7);
    1004:	af e5       	ldi	r26, 0x5F	; 95
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e5       	ldi	r30, 0x5F	; 95
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	8c 93       	st	X, r24
	/* Initialize LCD */
	LCD_init();
    1012:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_init>
	/* Create an instance of timer1 initialization structure */
	Timer_initConfig timerConfig =
			{ TIMER16BIT_CTC_OCR1A, NORMAL_OC, LOGIC_HIGH };
    1016:	fe 01       	movw	r30, r28
    1018:	e1 59       	subi	r30, 0x91	; 145
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	10 82       	st	Z, r1
    101e:	fe 01       	movw	r30, r28
    1020:	e1 59       	subi	r30, 0x91	; 145
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	80 7f       	andi	r24, 0xF0	; 240
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	80 83       	st	Z, r24
    102c:	fe 01       	movw	r30, r28
    102e:	e1 59       	subi	r30, 0x91	; 145
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	80 64       	ori	r24, 0x40	; 64
    1036:	80 83       	st	Z, r24
	/* Initialize timer1 */
	Timer1_init(&timerConfig);
    1038:	ce 01       	movw	r24, r28
    103a:	81 59       	subi	r24, 0x91	; 145
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <Timer1_init>
	/* Set call-back function for timer1 */
	Timer1_setCallBack(LCD_cursorToggle);
    1042:	83 ea       	ldi	r24, 0xA3	; 163
    1044:	95 e0       	ldi	r25, 0x05	; 5
    1046:	0e 94 3e 1c 	call	0x387c	; 0x387c <Timer1_setCallBack>
	/* Create an instance of USART initialization structure */
	USART_initConfig USARTConfig = { 9600, USART_DATA_8BIT, PARITY_EVEN,
	LOGIC_LOW };
    104a:	ce 01       	movw	r24, r28
    104c:	80 59       	subi	r24, 0x90	; 144
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	25 e0       	ldi	r18, 0x05	; 5
    1052:	fc 01       	movw	r30, r24
    1054:	df 01       	movw	r26, r30
    1056:	82 2f       	mov	r24, r18
    1058:	1d 92       	st	X+, r1
    105a:	8a 95       	dec	r24
    105c:	e9 f7       	brne	.-6      	; 0x1058 <main+0xa6>
    105e:	fe 01       	movw	r30, r28
    1060:	e0 59       	subi	r30, 0x90	; 144
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	95 e2       	ldi	r25, 0x25	; 37
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	80 83       	st	Z, r24
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	a2 83       	std	Z+2, r26	; 0x02
    1072:	b3 83       	std	Z+3, r27	; 0x03
    1074:	fe 01       	movw	r30, r28
    1076:	e0 59       	subi	r30, 0x90	; 144
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	84 81       	ldd	r24, Z+4	; 0x04
    107c:	88 7f       	andi	r24, 0xF8	; 248
    107e:	83 60       	ori	r24, 0x03	; 3
    1080:	84 83       	std	Z+4, r24	; 0x04
    1082:	fe 01       	movw	r30, r28
    1084:	e0 59       	subi	r30, 0x90	; 144
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	84 81       	ldd	r24, Z+4	; 0x04
    108a:	87 7e       	andi	r24, 0xE7	; 231
    108c:	80 61       	ori	r24, 0x10	; 16
    108e:	84 83       	std	Z+4, r24	; 0x04
	/* Initialize USART */
	USART_init(&USARTConfig);
    1090:	ce 01       	movw	r24, r28
    1092:	80 59       	subi	r24, 0x90	; 144
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <USART_init>
	/* Display text on LCD */
	LCD_displayString("Enter Password: ");
    109a:	8a ea       	ldi	r24, 0xAA	; 170
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
	/* Move to row 0 column 10 */
	LCD_moveCursor(1, 0);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	/* Start timer1 for LCD cursor blink */
	Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    10aa:	84 e0       	ldi	r24, 0x04	; 4
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	49 e0       	ldi	r20, 0x09	; 9
    10b2:	5d e3       	ldi	r21, 0x3D	; 61
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <Timer1_start>
	/* Determine if the password is saved in EEPROM or not */
	if (USART_recieveByte() == 0xFF)
    10bc:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
    10c0:	8f 3f       	cpi	r24, 0xFF	; 255
    10c2:	19 f4       	brne	.+6      	; 0x10ca <main+0x118>
	{
		passwordState = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	80 93 38 01 	sts	0x0138, r24
	}
	/* Execute program loop */
	while (TRUE)
	{
		/* Wait for user to press a key */
		key = Keypad_getPressedKey();
    10ca:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Keypad_getPressedKey>
    10ce:	80 93 36 01 	sts	0x0136, r24
		if ((key <= 9) && (key >= 0))
    10d2:	80 91 36 01 	lds	r24, 0x0136
    10d6:	8a 30       	cpi	r24, 0x0A	; 10
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <main+0x12a>
    10da:	f5 c0       	rjmp	.+490    	; 0x12c6 <main+0x314>
		{
			/* Show a message when user tries to enter a password more than 5 digits */
			if (buttonCount == 5)
    10dc:	80 91 39 01 	lds	r24, 0x0139
    10e0:	85 30       	cpi	r24, 0x05	; 5
    10e2:	69 f4       	brne	.+26     	; 0x10fe <main+0x14c>
			{
				LCD_moveCursor(1, 8);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	68 e0       	ldi	r22, 0x08	; 8
    10e8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
				LCD_displayString("5 Only");
    10ec:	80 ef       	ldi	r24, 0xF0	; 240
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
				LCD_moveCursor(1, 5);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	65 e0       	ldi	r22, 0x05	; 5
    10f8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
    10fc:	2f c0       	rjmp	.+94     	; 0x115c <main+0x1aa>
			}
			else
			{
				/* If it is not a re-entry */
				if (reenter == 0)
    10fe:	80 91 37 01 	lds	r24, 0x0137
    1102:	88 23       	and	r24, r24
    1104:	b1 f4       	brne	.+44     	; 0x1132 <main+0x180>
				{
					LCD_displayCharacter('*'); /* display the pressed keypad switch */
    1106:	8a e2       	ldi	r24, 0x2A	; 42
    1108:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_displayCharacter>
					password[buttonCount] = key; /* Save the key in first password array */
    110c:	80 91 39 01 	lds	r24, 0x0139
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 91 36 01 	lds	r20, 0x0136
    1118:	ce 01       	movw	r24, r28
    111a:	8b 59       	subi	r24, 0x9B	; 155
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	fc 01       	movw	r30, r24
    1120:	e2 0f       	add	r30, r18
    1122:	f3 1f       	adc	r31, r19
    1124:	40 83       	st	Z, r20
					buttonCount++; /* Count button click */
    1126:	80 91 39 01 	lds	r24, 0x0139
    112a:	8f 5f       	subi	r24, 0xFF	; 255
    112c:	80 93 39 01 	sts	0x0139, r24
    1130:	15 c0       	rjmp	.+42     	; 0x115c <main+0x1aa>
				}
				/* If it is a re-entry */
				else
				{
					LCD_displayCharacter('*'); /* display the pressed keypad switch */
    1132:	8a e2       	ldi	r24, 0x2A	; 42
    1134:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_displayCharacter>
					passwordReEnter[buttonCount] = key; /* Save the key in second password array */
    1138:	80 91 39 01 	lds	r24, 0x0139
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 91 36 01 	lds	r20, 0x0136
    1144:	ce 01       	movw	r24, r28
    1146:	86 59       	subi	r24, 0x96	; 150
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	fc 01       	movw	r30, r24
    114c:	e2 0f       	add	r30, r18
    114e:	f3 1f       	adc	r31, r19
    1150:	40 83       	st	Z, r20
					buttonCount++; /* Count button click */
    1152:	80 91 39 01 	lds	r24, 0x0139
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	80 93 39 01 	sts	0x0139, r24
    115c:	fe 01       	movw	r30, r28
    115e:	e1 5a       	subi	r30, 0xA1	; 161
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	aa ef       	ldi	r26, 0xFA	; 250
    1168:	b3 e4       	ldi	r27, 0x43	; 67
    116a:	80 83       	st	Z, r24
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	a2 83       	std	Z+2, r26	; 0x02
    1170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	8e 01       	movw	r16, r28
    1174:	05 5a       	subi	r16, 0xA5	; 165
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	e1 5a       	subi	r30, 0xA1	; 161
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a ef       	ldi	r20, 0xFA	; 250
    118c:	54 e4       	ldi	r21, 0x44	; 68
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11a0:	fe 01       	movw	r30, r28
    11a2:	e5 5a       	subi	r30, 0xA5	; 165
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	44 f4       	brge	.+16     	; 0x11ce <main+0x21c>
		__ticks = 1;
    11be:	fe 01       	movw	r30, r28
    11c0:	e7 5a       	subi	r30, 0xA7	; 167
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
    11cc:	64 c0       	rjmp	.+200    	; 0x1296 <main+0x2e4>
	else if (__tmp > 65535)
    11ce:	fe 01       	movw	r30, r28
    11d0:	e5 5a       	subi	r30, 0xA5	; 165
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	0c f0       	brlt	.+2      	; 0x11ee <main+0x23c>
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <main+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	fe 01       	movw	r30, r28
    11f0:	e1 5a       	subi	r30, 0xA1	; 161
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8e 01       	movw	r16, r28
    120e:	07 5a       	subi	r16, 0xA7	; 167
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	f8 01       	movw	r30, r16
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    1224:	1f c0       	rjmp	.+62     	; 0x1264 <main+0x2b2>
    1226:	fe 01       	movw	r30, r28
    1228:	e9 5a       	subi	r30, 0xA9	; 169
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
    1234:	fe 01       	movw	r30, r28
    1236:	e9 5a       	subi	r30, 0xA9	; 169
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <main+0x28c>
    1242:	fe 01       	movw	r30, r28
    1244:	e9 5a       	subi	r30, 0xA9	; 169
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	de 01       	movw	r26, r28
    124e:	a7 5a       	subi	r26, 0xA7	; 167
    1250:	bf 4f       	sbci	r27, 0xFF	; 255
    1252:	fe 01       	movw	r30, r28
    1254:	e7 5a       	subi	r30, 0xA7	; 167
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	9c 93       	st	X, r25
    1262:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	fe 01       	movw	r30, r28
    1266:	e7 5a       	subi	r30, 0xA7	; 167
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	d1 f6       	brne	.-76     	; 0x1226 <main+0x274>
    1272:	2b cf       	rjmp	.-426    	; 0x10ca <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	8e 01       	movw	r16, r28
    1276:	07 5a       	subi	r16, 0xA7	; 167
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	fe 01       	movw	r30, r28
    127c:	e5 5a       	subi	r30, 0xA5	; 165
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
    1296:	de 01       	movw	r26, r28
    1298:	ab 5a       	subi	r26, 0xAB	; 171
    129a:	bf 4f       	sbci	r27, 0xFF	; 255
    129c:	fe 01       	movw	r30, r28
    129e:	e7 5a       	subi	r30, 0xA7	; 167
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	9c 93       	st	X, r25
    12aa:	8e 93       	st	-X, r24
    12ac:	fe 01       	movw	r30, r28
    12ae:	eb 5a       	subi	r30, 0xAB	; 171
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <main+0x304>
    12ba:	fe 01       	movw	r30, r28
    12bc:	eb 5a       	subi	r30, 0xAB	; 171
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
    12c4:	02 cf       	rjmp	.-508    	; 0x10ca <main+0x118>
				}
			}
			_delay_ms(500); /* Delay for keyboard presses */
		}
		/* If user clicked '-' */
		else if (key == '-')
    12c6:	80 91 36 01 	lds	r24, 0x0136
    12ca:	8d 32       	cpi	r24, 0x2D	; 45
    12cc:	79 f4       	brne	.+30     	; 0x12ec <main+0x33a>
		{
			/* Remove written password */
			LCD_moveCursor(1, 0);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			LCD_displayString("                ");
    12d6:	87 ef       	ldi	r24, 0xF7	; 247
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
			LCD_moveCursor(1, 0);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
			/* Reset button clicks to (0) */
			buttonCount = 0;
    12e6:	10 92 39 01 	sts	0x0139, r1
    12ea:	ef ce       	rjmp	.-546    	; 0x10ca <main+0x118>
		}
		/* If user enters the password */
		else if (key == '=')
    12ec:	80 91 36 01 	lds	r24, 0x0136
    12f0:	8d 33       	cpi	r24, 0x3D	; 61
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <main+0x344>
    12f4:	ea ce       	rjmp	.-556    	; 0x10ca <main+0x118>
		{
			/* Show a message when user tries to enter a password less than 5 digits */
			if (buttonCount != 5)
    12f6:	80 91 39 01 	lds	r24, 0x0139
    12fa:	85 30       	cpi	r24, 0x05	; 5
    12fc:	79 f0       	breq	.+30     	; 0x131c <main+0x36a>
			{
				LCD_moveCursor(1, 7);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	67 e0       	ldi	r22, 0x07	; 7
    1302:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
				LCD_displayString("Must Be 5");
    1306:	88 e0       	ldi	r24, 0x08	; 8
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
				LCD_moveCursor(1, buttonCount);
    130e:	90 91 39 01 	lds	r25, 0x0139
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	69 2f       	mov	r22, r25
    1316:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
    131a:	d7 ce       	rjmp	.-594    	; 0x10ca <main+0x118>
			}
			else
			{
				/* Reset button clicks to (0) */
				buttonCount = 0;
    131c:	10 92 39 01 	sts	0x0139, r1
				/* If the no password exists in EEPROM & it is the first entry */
				if (passwordState == 0 && reenter == 0)
    1320:	80 91 38 01 	lds	r24, 0x0138
    1324:	88 23       	and	r24, r24
    1326:	f9 f4       	brne	.+62     	; 0x1366 <main+0x3b4>
    1328:	80 91 37 01 	lds	r24, 0x0137
    132c:	88 23       	and	r24, r24
    132e:	d9 f4       	brne	.+54     	; 0x1366 <main+0x3b4>
				{
					/* Prompt to re-enter the password for confirmation */
					LCD_sendCommand(LCD_CLEAR_COMMAND);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
					LCD_moveCursor(0, 0);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
					LCD_displayString("Re-Enter Pass: ");
    133e:	82 e1       	ldi	r24, 0x12	; 18
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
					LCD_moveCursor(1, 0);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
					LCD_displayString("                ");
    134e:	87 ef       	ldi	r24, 0xF7	; 247
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
					LCD_moveCursor(1, 0);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
					/* Count the next entry as the second entry */
					reenter = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 37 01 	sts	0x0137, r24
    1364:	b2 ce       	rjmp	.-668    	; 0x10ca <main+0x118>
				}
				/* If the user already re-entered the password */
				else if (reenter == 1)
    1366:	80 91 37 01 	lds	r24, 0x0137
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	09 f0       	breq	.+2      	; 0x1370 <main+0x3be>
    136e:	ff c1       	rjmp	.+1022   	; 0x176e <main+0x7bc>
    1370:	fe 01       	movw	r30, r28
    1372:	ef 5a       	subi	r30, 0xAF	; 175
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b1 e4       	ldi	r27, 0x41	; 65
    137e:	80 83       	st	Z, r24
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	a2 83       	std	Z+2, r26	; 0x02
    1384:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	8e 01       	movw	r16, r28
    1388:	03 5b       	subi	r16, 0xB3	; 179
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	fe 01       	movw	r30, r28
    138e:	ef 5a       	subi	r30, 0xAF	; 175
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4a ef       	ldi	r20, 0xFA	; 250
    13a0:	54 e4       	ldi	r21, 0x44	; 68
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	f8 01       	movw	r30, r16
    13ac:	80 83       	st	Z, r24
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	a2 83       	std	Z+2, r26	; 0x02
    13b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13b4:	fe 01       	movw	r30, r28
    13b6:	e3 5b       	subi	r30, 0xB3	; 179
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	44 f4       	brge	.+16     	; 0x13e2 <main+0x430>
		__ticks = 1;
    13d2:	fe 01       	movw	r30, r28
    13d4:	e5 5b       	subi	r30, 0xB5	; 181
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
    13e0:	64 c0       	rjmp	.+200    	; 0x14aa <main+0x4f8>
	else if (__tmp > 65535)
    13e2:	fe 01       	movw	r30, r28
    13e4:	e3 5b       	subi	r30, 0xB3	; 179
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <main+0x450>
    1400:	43 c0       	rjmp	.+134    	; 0x1488 <main+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	fe 01       	movw	r30, r28
    1404:	ef 5a       	subi	r30, 0xAF	; 175
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8e 01       	movw	r16, r28
    1422:	05 5b       	subi	r16, 0xB5	; 181
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	f8 01       	movw	r30, r16
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
    1438:	1f c0       	rjmp	.+62     	; 0x1478 <main+0x4c6>
    143a:	fe 01       	movw	r30, r28
    143c:	e7 5b       	subi	r30, 0xB7	; 183
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	88 ec       	ldi	r24, 0xC8	; 200
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
    1448:	fe 01       	movw	r30, r28
    144a:	e7 5b       	subi	r30, 0xB7	; 183
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <main+0x4a0>
    1456:	fe 01       	movw	r30, r28
    1458:	e7 5b       	subi	r30, 0xB7	; 183
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	de 01       	movw	r26, r28
    1462:	a5 5b       	subi	r26, 0xB5	; 181
    1464:	bf 4f       	sbci	r27, 0xFF	; 255
    1466:	fe 01       	movw	r30, r28
    1468:	e5 5b       	subi	r30, 0xB5	; 181
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	11 96       	adiw	r26, 0x01	; 1
    1474:	9c 93       	st	X, r25
    1476:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	fe 01       	movw	r30, r28
    147a:	e5 5b       	subi	r30, 0xB5	; 181
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	d1 f6       	brne	.-76     	; 0x143a <main+0x488>
    1486:	27 c0       	rjmp	.+78     	; 0x14d6 <main+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	8e 01       	movw	r16, r28
    148a:	05 5b       	subi	r16, 0xB5	; 181
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	fe 01       	movw	r30, r28
    1490:	e3 5b       	subi	r30, 0xB3	; 179
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	f8 01       	movw	r30, r16
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
    14aa:	de 01       	movw	r26, r28
    14ac:	a9 5b       	subi	r26, 0xB9	; 185
    14ae:	bf 4f       	sbci	r27, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	e5 5b       	subi	r30, 0xB5	; 181
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	8d 93       	st	X+, r24
    14bc:	9c 93       	st	X, r25
    14be:	fe 01       	movw	r30, r28
    14c0:	e9 5b       	subi	r30, 0xB9	; 185
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <main+0x516>
    14cc:	fe 01       	movw	r30, r28
    14ce:	e9 5b       	subi	r30, 0xB9	; 185
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	80 83       	st	Z, r24
				{
					/* Send password to CONTROL_ECU */
					_delay_ms(10);
					USART_sendByte(0x02);
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
					for (counter = 0; counter < 5; counter++)
    14dc:	fe 01       	movw	r30, r28
    14de:	ed 59       	subi	r30, 0x9D	; 157
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	10 82       	st	Z, r1
    14e4:	9d c0       	rjmp	.+314    	; 0x1620 <main+0x66e>
					{
						USART_sendByte(password[counter]);
    14e6:	fe 01       	movw	r30, r28
    14e8:	ed 59       	subi	r30, 0x9D	; 157
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	ce 01       	movw	r24, r28
    14f4:	8b 59       	subi	r24, 0x9B	; 155
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 0f       	add	r30, r18
    14fc:	f3 1f       	adc	r31, r19
    14fe:	80 81       	ld	r24, Z
    1500:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
    1504:	fe 01       	movw	r30, r28
    1506:	ed 5b       	subi	r30, 0xBD	; 189
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e2       	ldi	r26, 0x20	; 32
    1510:	b1 e4       	ldi	r27, 0x41	; 65
    1512:	80 83       	st	Z, r24
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	a2 83       	std	Z+2, r26	; 0x02
    1518:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151a:	8e 01       	movw	r16, r28
    151c:	01 5c       	subi	r16, 0xC1	; 193
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	ed 5b       	subi	r30, 0xBD	; 189
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a ef       	ldi	r20, 0xFA	; 250
    1534:	54 e4       	ldi	r21, 0x44	; 68
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	f8 01       	movw	r30, r16
    1540:	80 83       	st	Z, r24
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	a2 83       	std	Z+2, r26	; 0x02
    1546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1548:	fe 01       	movw	r30, r28
    154a:	ff 96       	adiw	r30, 0x3f	; 63
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <main+0x5bc>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9e af       	std	Y+62, r25	; 0x3e
    156a:	8d af       	std	Y+61, r24	; 0x3d
    156c:	46 c0       	rjmp	.+140    	; 0x15fa <main+0x648>
	else if (__tmp > 65535)
    156e:	fe 01       	movw	r30, r28
    1570:	ff 96       	adiw	r30, 0x3f	; 63
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	64 f5       	brge	.+88     	; 0x15e2 <main+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	fe 01       	movw	r30, r28
    158c:	ed 5b       	subi	r30, 0xBD	; 189
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e af       	std	Y+62, r25	; 0x3e
    15b6:	8d af       	std	Y+61, r24	; 0x3d
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <main+0x626>
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c af       	std	Y+60, r25	; 0x3c
    15c0:	8b af       	std	Y+59, r24	; 0x3b
    15c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    15c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <main+0x614>
    15ca:	9c af       	std	Y+60, r25	; 0x3c
    15cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    15d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9e af       	std	Y+62, r25	; 0x3e
    15d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15da:	9e ad       	ldd	r25, Y+62	; 0x3e
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <main+0x608>
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <main+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	fe 01       	movw	r30, r28
    15e4:	ff 96       	adiw	r30, 0x3f	; 63
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9e af       	std	Y+62, r25	; 0x3e
    15f8:	8d af       	std	Y+61, r24	; 0x3d
    15fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    15fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    15fe:	9a af       	std	Y+58, r25	; 0x3a
    1600:	89 af       	std	Y+57, r24	; 0x39
    1602:	89 ad       	ldd	r24, Y+57	; 0x39
    1604:	9a ad       	ldd	r25, Y+58	; 0x3a
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <main+0x654>
    160a:	9a af       	std	Y+58, r25	; 0x3a
    160c:	89 af       	std	Y+57, r24	; 0x39
				else if (reenter == 1)
				{
					/* Send password to CONTROL_ECU */
					_delay_ms(10);
					USART_sendByte(0x02);
					for (counter = 0; counter < 5; counter++)
    160e:	de 01       	movw	r26, r28
    1610:	ad 59       	subi	r26, 0x9D	; 157
    1612:	bf 4f       	sbci	r27, 0xFF	; 255
    1614:	fe 01       	movw	r30, r28
    1616:	ed 59       	subi	r30, 0x9D	; 157
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 81       	ld	r24, Z
    161c:	8f 5f       	subi	r24, 0xFF	; 255
    161e:	8c 93       	st	X, r24
    1620:	fe 01       	movw	r30, r28
    1622:	ed 59       	subi	r30, 0x9D	; 157
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	85 30       	cpi	r24, 0x05	; 5
    162a:	08 f4       	brcc	.+2      	; 0x162e <main+0x67c>
    162c:	5c cf       	rjmp	.-328    	; 0x14e6 <main+0x534>
					{
						USART_sendByte(password[counter]);
						_delay_ms(10);
					}
					for (counter = 0; counter < 5; counter++)
    162e:	fe 01       	movw	r30, r28
    1630:	ed 59       	subi	r30, 0x9D	; 157
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	10 82       	st	Z, r1
    1636:	8a c0       	rjmp	.+276    	; 0x174c <main+0x79a>
					{
						USART_sendByte(passwordReEnter[counter]);
    1638:	fe 01       	movw	r30, r28
    163a:	ed 59       	subi	r30, 0x9D	; 157
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	ce 01       	movw	r24, r28
    1646:	86 59       	subi	r24, 0x96	; 150
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	fc 01       	movw	r30, r24
    164c:	e2 0f       	add	r30, r18
    164e:	f3 1f       	adc	r31, r19
    1650:	80 81       	ld	r24, Z
    1652:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e2       	ldi	r26, 0x20	; 32
    165c:	b1 e4       	ldi	r27, 0x41	; 65
    165e:	8d ab       	std	Y+53, r24	; 0x35
    1660:	9e ab       	std	Y+54, r25	; 0x36
    1662:	af ab       	std	Y+55, r26	; 0x37
    1664:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6d a9       	ldd	r22, Y+53	; 0x35
    1668:	7e a9       	ldd	r23, Y+54	; 0x36
    166a:	8f a9       	ldd	r24, Y+55	; 0x37
    166c:	98 ad       	ldd	r25, Y+56	; 0x38
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a ef       	ldi	r20, 0xFA	; 250
    1674:	54 e4       	ldi	r21, 0x44	; 68
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	89 ab       	std	Y+49, r24	; 0x31
    1680:	9a ab       	std	Y+50, r25	; 0x32
    1682:	ab ab       	std	Y+51, r26	; 0x33
    1684:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1686:	69 a9       	ldd	r22, Y+49	; 0x31
    1688:	7a a9       	ldd	r23, Y+50	; 0x32
    168a:	8b a9       	ldd	r24, Y+51	; 0x33
    168c:	9c a9       	ldd	r25, Y+52	; 0x34
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <main+0x6f6>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	98 ab       	std	Y+48, r25	; 0x30
    16a4:	8f a7       	std	Y+47, r24	; 0x2f
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <main+0x774>
	else if (__tmp > 65535)
    16a8:	69 a9       	ldd	r22, Y+49	; 0x31
    16aa:	7a a9       	ldd	r23, Y+50	; 0x32
    16ac:	8b a9       	ldd	r24, Y+51	; 0x33
    16ae:	9c a9       	ldd	r25, Y+52	; 0x34
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6d a9       	ldd	r22, Y+53	; 0x35
    16c2:	7e a9       	ldd	r23, Y+54	; 0x36
    16c4:	8f a9       	ldd	r24, Y+55	; 0x37
    16c6:	98 ad       	ldd	r25, Y+56	; 0x38
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	98 ab       	std	Y+48, r25	; 0x30
    16e6:	8f a7       	std	Y+47, r24	; 0x2f
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <main+0x756>
    16ea:	88 ec       	ldi	r24, 0xC8	; 200
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e a7       	std	Y+46, r25	; 0x2e
    16f0:	8d a7       	std	Y+45, r24	; 0x2d
    16f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <main+0x744>
    16fa:	9e a7       	std	Y+46, r25	; 0x2e
    16fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1700:	98 a9       	ldd	r25, Y+48	; 0x30
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	98 ab       	std	Y+48, r25	; 0x30
    1706:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8f a5       	ldd	r24, Y+47	; 0x2f
    170a:	98 a9       	ldd	r25, Y+48	; 0x30
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <main+0x738>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <main+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	69 a9       	ldd	r22, Y+49	; 0x31
    1714:	7a a9       	ldd	r23, Y+50	; 0x32
    1716:	8b a9       	ldd	r24, Y+51	; 0x33
    1718:	9c a9       	ldd	r25, Y+52	; 0x34
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	98 ab       	std	Y+48, r25	; 0x30
    1724:	8f a7       	std	Y+47, r24	; 0x2f
    1726:	8f a5       	ldd	r24, Y+47	; 0x2f
    1728:	98 a9       	ldd	r25, Y+48	; 0x30
    172a:	9c a7       	std	Y+44, r25	; 0x2c
    172c:	8b a7       	std	Y+43, r24	; 0x2b
    172e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1730:	9c a5       	ldd	r25, Y+44	; 0x2c
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <main+0x780>
    1736:	9c a7       	std	Y+44, r25	; 0x2c
    1738:	8b a7       	std	Y+43, r24	; 0x2b
					for (counter = 0; counter < 5; counter++)
					{
						USART_sendByte(password[counter]);
						_delay_ms(10);
					}
					for (counter = 0; counter < 5; counter++)
    173a:	de 01       	movw	r26, r28
    173c:	ad 59       	subi	r26, 0x9D	; 157
    173e:	bf 4f       	sbci	r27, 0xFF	; 255
    1740:	fe 01       	movw	r30, r28
    1742:	ed 59       	subi	r30, 0x9D	; 157
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	8c 93       	st	X, r24
    174c:	fe 01       	movw	r30, r28
    174e:	ed 59       	subi	r30, 0x9D	; 157
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	85 30       	cpi	r24, 0x05	; 5
    1756:	08 f4       	brcc	.+2      	; 0x175a <main+0x7a8>
    1758:	6f cf       	rjmp	.-290    	; 0x1638 <main+0x686>
					{
						USART_sendByte(passwordReEnter[counter]);
						_delay_ms(10);
					}
					/* If CONTROL_ECU replied with success */
					if (USART_recieveByte() == 0x02)
    175a:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	19 f4       	brne	.+6      	; 0x1768 <main+0x7b6>
					{
						/* Proceed to the next step */
						passwordSuccessful();
    1762:	0e 94 c9 05 	call	0xb92	; 0xb92 <passwordSuccessful>
    1766:	b1 cc       	rjmp	.-1694   	; 0x10ca <main+0x118>
					}
					else
					{
						/* Clear screen for repeating */
						passwordNoMatch();
    1768:	0e 94 65 06 	call	0xcca	; 0xcca <passwordNoMatch>
    176c:	ae cc       	rjmp	.-1700   	; 0x10ca <main+0x118>
					}
				}
				/* If password already found in EEPROM*/
				else if (passwordState == 1)
    176e:	80 91 38 01 	lds	r24, 0x0138
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	09 f0       	breq	.+2      	; 0x1778 <main+0x7c6>
    1776:	a9 cc       	rjmp	.-1710   	; 0x10ca <main+0x118>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e2       	ldi	r26, 0x20	; 32
    177e:	b1 e4       	ldi	r27, 0x41	; 65
    1780:	8f a3       	std	Y+39, r24	; 0x27
    1782:	98 a7       	std	Y+40, r25	; 0x28
    1784:	a9 a7       	std	Y+41, r26	; 0x29
    1786:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	6f a1       	ldd	r22, Y+39	; 0x27
    178a:	78 a5       	ldd	r23, Y+40	; 0x28
    178c:	89 a5       	ldd	r24, Y+41	; 0x29
    178e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4a ef       	ldi	r20, 0xFA	; 250
    1796:	54 e4       	ldi	r21, 0x44	; 68
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8b a3       	std	Y+35, r24	; 0x23
    17a2:	9c a3       	std	Y+36, r25	; 0x24
    17a4:	ad a3       	std	Y+37, r26	; 0x25
    17a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a8:	6b a1       	ldd	r22, Y+35	; 0x23
    17aa:	7c a1       	ldd	r23, Y+36	; 0x24
    17ac:	8d a1       	ldd	r24, Y+37	; 0x25
    17ae:	9e a1       	ldd	r25, Y+38	; 0x26
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	2c f4       	brge	.+10     	; 0x17ca <main+0x818>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9a a3       	std	Y+34, r25	; 0x22
    17c6:	89 a3       	std	Y+33, r24	; 0x21
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <main+0x896>
	else if (__tmp > 65535)
    17ca:	6b a1       	ldd	r22, Y+35	; 0x23
    17cc:	7c a1       	ldd	r23, Y+36	; 0x24
    17ce:	8d a1       	ldd	r24, Y+37	; 0x25
    17d0:	9e a1       	ldd	r25, Y+38	; 0x26
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	4c f5       	brge	.+82     	; 0x1834 <main+0x882>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	6f a1       	ldd	r22, Y+39	; 0x27
    17e4:	78 a5       	ldd	r23, Y+40	; 0x28
    17e6:	89 a5       	ldd	r24, Y+41	; 0x29
    17e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e2       	ldi	r20, 0x20	; 32
    17f0:	51 e4       	ldi	r21, 0x41	; 65
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9a a3       	std	Y+34, r25	; 0x22
    1808:	89 a3       	std	Y+33, r24	; 0x21
    180a:	0f c0       	rjmp	.+30     	; 0x182a <main+0x878>
    180c:	88 ec       	ldi	r24, 0xC8	; 200
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	98 a3       	std	Y+32, r25	; 0x20
    1812:	8f 8f       	std	Y+31, r24	; 0x1f
    1814:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1816:	98 a1       	ldd	r25, Y+32	; 0x20
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <main+0x866>
    181c:	98 a3       	std	Y+32, r25	; 0x20
    181e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	89 a1       	ldd	r24, Y+33	; 0x21
    1822:	9a a1       	ldd	r25, Y+34	; 0x22
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9a a3       	std	Y+34, r25	; 0x22
    1828:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	89 a1       	ldd	r24, Y+33	; 0x21
    182c:	9a a1       	ldd	r25, Y+34	; 0x22
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	69 f7       	brne	.-38     	; 0x180c <main+0x85a>
    1832:	14 c0       	rjmp	.+40     	; 0x185c <main+0x8aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6b a1       	ldd	r22, Y+35	; 0x23
    1836:	7c a1       	ldd	r23, Y+36	; 0x24
    1838:	8d a1       	ldd	r24, Y+37	; 0x25
    183a:	9e a1       	ldd	r25, Y+38	; 0x26
    183c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
    1848:	89 a1       	ldd	r24, Y+33	; 0x21
    184a:	9a a1       	ldd	r25, Y+34	; 0x22
    184c:	9e 8f       	std	Y+30, r25	; 0x1e
    184e:	8d 8f       	std	Y+29, r24	; 0x1d
    1850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1852:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <main+0x8a2>
    1858:	9e 8f       	std	Y+30, r25	; 0x1e
    185a:	8d 8f       	std	Y+29, r24	; 0x1d
				{
					/* Send password to CONTROL_ECU */
					_delay_ms(10);
					USART_sendByte(0x03);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
					for (counter = 0; counter < 5; counter++)
    1862:	fe 01       	movw	r30, r28
    1864:	ed 59       	subi	r30, 0x9D	; 157
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	10 82       	st	Z, r1
    186a:	8a c0       	rjmp	.+276    	; 0x1980 <main+0x9ce>
					{
						USART_sendByte(password[counter]);
    186c:	fe 01       	movw	r30, r28
    186e:	ed 59       	subi	r30, 0x9D	; 157
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	ce 01       	movw	r24, r28
    187a:	8b 59       	subi	r24, 0x9B	; 155
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
    187e:	fc 01       	movw	r30, r24
    1880:	e2 0f       	add	r30, r18
    1882:	f3 1f       	adc	r31, r19
    1884:	80 81       	ld	r24, Z
    1886:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e2       	ldi	r26, 0x20	; 32
    1890:	b1 e4       	ldi	r27, 0x41	; 65
    1892:	89 8f       	std	Y+25, r24	; 0x19
    1894:	9a 8f       	std	Y+26, r25	; 0x1a
    1896:	ab 8f       	std	Y+27, r26	; 0x1b
    1898:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	69 8d       	ldd	r22, Y+25	; 0x19
    189c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a ef       	ldi	r20, 0xFA	; 250
    18a8:	54 e4       	ldi	r21, 0x44	; 68
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8d 8b       	std	Y+21, r24	; 0x15
    18b4:	9e 8b       	std	Y+22, r25	; 0x16
    18b6:	af 8b       	std	Y+23, r26	; 0x17
    18b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <main+0x92a>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
    18da:	3f c0       	rjmp	.+126    	; 0x195a <main+0x9a8>
	else if (__tmp > 65535)
    18dc:	6d 89       	ldd	r22, Y+21	; 0x15
    18de:	7e 89       	ldd	r23, Y+22	; 0x16
    18e0:	8f 89       	ldd	r24, Y+23	; 0x17
    18e2:	98 8d       	ldd	r25, Y+24	; 0x18
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <main+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	69 8d       	ldd	r22, Y+25	; 0x19
    18f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9c 8b       	std	Y+20, r25	; 0x14
    191a:	8b 8b       	std	Y+19, r24	; 0x13
    191c:	0f c0       	rjmp	.+30     	; 0x193c <main+0x98a>
    191e:	88 ec       	ldi	r24, 0xC8	; 200
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9a 8b       	std	Y+18, r25	; 0x12
    1924:	89 8b       	std	Y+17, r24	; 0x11
    1926:	89 89       	ldd	r24, Y+17	; 0x11
    1928:	9a 89       	ldd	r25, Y+18	; 0x12
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <main+0x978>
    192e:	9a 8b       	std	Y+18, r25	; 0x12
    1930:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9c 8b       	std	Y+20, r25	; 0x14
    193a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	8b 89       	ldd	r24, Y+19	; 0x13
    193e:	9c 89       	ldd	r25, Y+20	; 0x14
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <main+0x96c>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <main+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6d 89       	ldd	r22, Y+21	; 0x15
    1948:	7e 89       	ldd	r23, Y+22	; 0x16
    194a:	8f 89       	ldd	r24, Y+23	; 0x17
    194c:	98 8d       	ldd	r25, Y+24	; 0x18
    194e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9c 8b       	std	Y+20, r25	; 0x14
    1958:	8b 8b       	std	Y+19, r24	; 0x13
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	9c 89       	ldd	r25, Y+20	; 0x14
    195e:	98 8b       	std	Y+16, r25	; 0x10
    1960:	8f 87       	std	Y+15, r24	; 0x0f
    1962:	8f 85       	ldd	r24, Y+15	; 0x0f
    1964:	98 89       	ldd	r25, Y+16	; 0x10
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <main+0x9b4>
    196a:	98 8b       	std	Y+16, r25	; 0x10
    196c:	8f 87       	std	Y+15, r24	; 0x0f
				else if (passwordState == 1)
				{
					/* Send password to CONTROL_ECU */
					_delay_ms(10);
					USART_sendByte(0x03);
					for (counter = 0; counter < 5; counter++)
    196e:	de 01       	movw	r26, r28
    1970:	ad 59       	subi	r26, 0x9D	; 157
    1972:	bf 4f       	sbci	r27, 0xFF	; 255
    1974:	fe 01       	movw	r30, r28
    1976:	ed 59       	subi	r30, 0x9D	; 157
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	8f 5f       	subi	r24, 0xFF	; 255
    197e:	8c 93       	st	X, r24
    1980:	fe 01       	movw	r30, r28
    1982:	ed 59       	subi	r30, 0x9D	; 157
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	85 30       	cpi	r24, 0x05	; 5
    198a:	08 f4       	brcc	.+2      	; 0x198e <main+0x9dc>
    198c:	6f cf       	rjmp	.-290    	; 0x186c <main+0x8ba>
					{
						USART_sendByte(password[counter]);
						_delay_ms(10);
					}
					/* If CONTROL_ECU replied with success */
					if (USART_recieveByte() == 0x03)
    198e:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	39 f4       	brne	.+14     	; 0x19a4 <main+0x9f2>
					{
						/* Proceed to the next step */
						passwordSuccessful();
    1996:	0e 94 c9 05 	call	0xb92	; 0xb92 <passwordSuccessful>
						failCount = 0;
    199a:	fe 01       	movw	r30, r28
    199c:	ec 59       	subi	r30, 0x9C	; 156
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	10 82       	st	Z, r1
    19a2:	93 cb       	rjmp	.-2266   	; 0x10ca <main+0x118>
					}
					else
					{
						/* Clear screen for repeating */
						passwordFail();
    19a4:	0e 94 20 07 	call	0xe40	; 0xe40 <passwordFail>
						/* Count for maximum number of wrong entries */
						failCount++;
    19a8:	de 01       	movw	r26, r28
    19aa:	ac 59       	subi	r26, 0x9C	; 156
    19ac:	bf 4f       	sbci	r27, 0xFF	; 255
    19ae:	fe 01       	movw	r30, r28
    19b0:	ec 59       	subi	r30, 0x9C	; 156
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	8c 93       	st	X, r24
						/* If maximum number of wrong entries reached */
						if (failCount == 3)
    19ba:	fe 01       	movw	r30, r28
    19bc:	ec 59       	subi	r30, 0x9C	; 156
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <main+0xa16>
    19c6:	81 cb       	rjmp	.-2302   	; 0x10ca <main+0x118>
						{
							/* Display error and stop the micro-controller */
							LCD_sendCommand(LCD_CLEAR_COMMAND);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
							LCD_moveCursor(0, 0);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
							LCD_displayString("      ERROR");
    19d6:	82 e2       	ldi	r24, 0x22	; 34
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
							/* Stop cursor blinking */
							Timer1_stop();
    19de:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <Timer1_stop>
							LCD_sendCommand(LCD_CURSOR_OFF);
    19e2:	8c e0       	ldi	r24, 0x0C	; 12
    19e4:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
							/* Tell CONTROL_ECU user entered wrong password (3) times */
							USART_sendByte(0xF0);
    19e8:	80 ef       	ldi	r24, 0xF0	; 240
    19ea:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
							/* Wait for (60) seconds*/
							for (counter = 0; counter < 5; counter++)
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 59       	subi	r30, 0x9D	; 157
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	10 82       	st	Z, r1
    19f6:	7b c0       	rjmp	.+246    	; 0x1aee <main+0xb3c>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e4       	ldi	r25, 0x40	; 64
    19fc:	ac e1       	ldi	r26, 0x1C	; 28
    19fe:	b6 e4       	ldi	r27, 0x46	; 70
    1a00:	8b 87       	std	Y+11, r24	; 0x0b
    1a02:	9c 87       	std	Y+12, r25	; 0x0c
    1a04:	ad 87       	std	Y+13, r26	; 0x0d
    1a06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a ef       	ldi	r20, 0xFA	; 250
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8f 83       	std	Y+7, r24	; 0x07
    1a22:	98 87       	std	Y+8, r25	; 0x08
    1a24:	a9 87       	std	Y+9, r26	; 0x09
    1a26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <main+0xa98>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <main+0xb16>
	else if (__tmp > 65535)
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <main+0xb02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <main+0xaf8>
    1a8c:	88 ec       	ldi	r24, 0xC8	; 200
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <main+0xae6>
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <main+0xada>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <main+0xb2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <main+0xb22>
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	de 01       	movw	r26, r28
    1ade:	ad 59       	subi	r26, 0x9D	; 157
    1ae0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ed 59       	subi	r30, 0x9D	; 157
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
    1aec:	8c 93       	st	X, r24
    1aee:	fe 01       	movw	r30, r28
    1af0:	ed 59       	subi	r30, 0x9D	; 157
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	85 30       	cpi	r24, 0x05	; 5
    1af8:	08 f4       	brcc	.+2      	; 0x1afc <main+0xb4a>
    1afa:	7e cf       	rjmp	.-260    	; 0x19f8 <main+0xa46>
							{
								_delay_ms(10000);
							}
							/* Clear the screen and prompt the user to try again */
							LCD_sendCommand(LCD_CLEAR_COMMAND);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
							LCD_moveCursor(0, 0);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
							LCD_displayString("Enter Password: ");
    1b0a:	8a ea       	ldi	r24, 0xAA	; 170
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
							LCD_moveCursor(1, 0);
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
							/* Restart timer1 for LCD cursor blink */
							Timer1_start(TIMER01_PRESCALER_256, 0, 15625, 0);
    1b1a:	84 e0       	ldi	r24, 0x04	; 4
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	49 e0       	ldi	r20, 0x09	; 9
    1b22:	5d e3       	ldi	r21, 0x3D	; 61
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <Timer1_start>
							/* Reset failure times */
							failCount = 0;
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ec 59       	subi	r30, 0x9C	; 156
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	10 82       	st	Z, r1
    1b34:	ca ca       	rjmp	.-2668   	; 0x10ca <main+0x118>

00001b36 <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_setupPinDirection+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <GPIO_setupPinDirection+0x8>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	6a 83       	std	Y+2, r22	; 0x02
    1b48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	88 30       	cpi	r24, 0x08	; 8
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <GPIO_setupPinDirection+0x1c>
    1b50:	d5 c0       	rjmp	.+426    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <GPIO_setupPinDirection+0x24>
    1b58:	d1 c0       	rjmp	.+418    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3d 83       	std	Y+5, r19	; 0x05
    1b62:	2c 83       	std	Y+4, r18	; 0x04
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	9d 81       	ldd	r25, Y+5	; 0x05
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <GPIO_setupPinDirection+0x3a>
    1b6e:	43 c0       	rjmp	.+134    	; 0x1bf6 <GPIO_setupPinDirection+0xc0>
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <GPIO_setupPinDirection+0x4e>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	71 f0       	breq	.+28     	; 0x1b9e <GPIO_setupPinDirection+0x68>
    1b82:	bc c0       	rjmp	.+376    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
    1b84:	2c 81       	ldd	r18, Y+4	; 0x04
    1b86:	3d 81       	ldd	r19, Y+5	; 0x05
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <GPIO_setupPinDirection+0x5a>
    1b8e:	5f c0       	rjmp	.+190    	; 0x1c4e <GPIO_setupPinDirection+0x118>
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <GPIO_setupPinDirection+0x66>
    1b9a:	85 c0       	rjmp	.+266    	; 0x1ca6 <GPIO_setupPinDirection+0x170>
    1b9c:	af c0       	rjmp	.+350    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	a1 f4       	brne	.+40     	; 0x1bcc <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
    1ba4:	aa e3       	ldi	r26, 0x3A	; 58
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	ea e3       	ldi	r30, 0x3A	; 58
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <GPIO_setupPinDirection+0x8c>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <GPIO_setupPinDirection+0x88>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	98 c0       	rjmp	.+304    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
    1bcc:	aa e3       	ldi	r26, 0x3A	; 58
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ea e3       	ldi	r30, 0x3A	; 58
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_setupPinDirection+0xb4>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_setupPinDirection+0xb0>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	83 c0       	rjmp	.+262    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	a1 f4       	brne	.+40     	; 0x1c24 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
    1bfc:	a7 e3       	ldi	r26, 0x37	; 55
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e7 e3       	ldi	r30, 0x37	; 55
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_setupPinDirection+0xe4>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_setupPinDirection+0xe0>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	6c c0       	rjmp	.+216    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
    1c24:	a7 e3       	ldi	r26, 0x37	; 55
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e3       	ldi	r30, 0x37	; 55
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <GPIO_setupPinDirection+0x10c>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <GPIO_setupPinDirection+0x108>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	57 c0       	rjmp	.+174    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	a1 f4       	brne	.+40     	; 0x1c7c <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
    1c54:	a4 e3       	ldi	r26, 0x34	; 52
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e4 e3       	ldi	r30, 0x34	; 52
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <GPIO_setupPinDirection+0x13c>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <GPIO_setupPinDirection+0x138>
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	40 c0       	rjmp	.+128    	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
    1c7c:	a4 e3       	ldi	r26, 0x34	; 52
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e4 e3       	ldi	r30, 0x34	; 52
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <GPIO_setupPinDirection+0x164>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <GPIO_setupPinDirection+0x160>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	2b c0       	rjmp	.+86     	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	a1 f4       	brne	.+40     	; 0x1cd4 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
    1cac:	a1 e3       	ldi	r26, 0x31	; 49
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e1 e3       	ldi	r30, 0x31	; 49
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <GPIO_setupPinDirection+0x194>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <GPIO_setupPinDirection+0x190>
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
    1cd4:	a1 e3       	ldi	r26, 0x31	; 49
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e1 e3       	ldi	r30, 0x31	; 49
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <GPIO_setupPinDirection+0x1bc>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <GPIO_setupPinDirection+0x1b8>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <GPIO_writePin+0x6>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <GPIO_writePin+0x8>
    1d14:	0f 92       	push	r0
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	6a 83       	std	Y+2, r22	; 0x02
    1d1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 30       	cpi	r24, 0x08	; 8
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <GPIO_writePin+0x1c>
    1d26:	d5 c0       	rjmp	.+426    	; 0x1ed2 <GPIO_writePin+0x1c6>
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <GPIO_writePin+0x24>
    1d2e:	d1 c0       	rjmp	.+418    	; 0x1ed2 <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	3d 83       	std	Y+5, r19	; 0x05
    1d38:	2c 83       	std	Y+4, r18	; 0x04
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <GPIO_writePin+0x3a>
    1d44:	43 c0       	rjmp	.+134    	; 0x1dcc <GPIO_writePin+0xc0>
    1d46:	2c 81       	ldd	r18, Y+4	; 0x04
    1d48:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <GPIO_writePin+0x4e>
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <GPIO_writePin+0x68>
    1d58:	bc c0       	rjmp	.+376    	; 0x1ed2 <GPIO_writePin+0x1c6>
    1d5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <GPIO_writePin+0x5a>
    1d64:	5f c0       	rjmp	.+190    	; 0x1e24 <GPIO_writePin+0x118>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <GPIO_writePin+0x66>
    1d70:	85 c0       	rjmp	.+266    	; 0x1e7c <GPIO_writePin+0x170>
    1d72:	af c0       	rjmp	.+350    	; 0x1ed2 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	a1 f4       	brne	.+40     	; 0x1da2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
    1d7a:	ab e3       	ldi	r26, 0x3B	; 59
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	eb e3       	ldi	r30, 0x3B	; 59
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <GPIO_writePin+0x8c>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <GPIO_writePin+0x88>
    1d9c:	84 2b       	or	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	98 c0       	rjmp	.+304    	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
    1da2:	ab e3       	ldi	r26, 0x3B	; 59
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e3       	ldi	r30, 0x3B	; 59
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_writePin+0xb4>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_writePin+0xb0>
    1dc4:	80 95       	com	r24
    1dc6:	84 23       	and	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	83 c0       	rjmp	.+262    	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	a1 f4       	brne	.+40     	; 0x1dfa <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
    1dd2:	a8 e3       	ldi	r26, 0x38	; 56
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e8 e3       	ldi	r30, 0x38	; 56
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_writePin+0xe4>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_writePin+0xe0>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	6c c0       	rjmp	.+216    	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
    1dfa:	a8 e3       	ldi	r26, 0x38	; 56
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e8 e3       	ldi	r30, 0x38	; 56
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <GPIO_writePin+0x10c>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <GPIO_writePin+0x108>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	57 c0       	rjmp	.+174    	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	a1 f4       	brne	.+40     	; 0x1e52 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
    1e2a:	a5 e3       	ldi	r26, 0x35	; 53
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e5 e3       	ldi	r30, 0x35	; 53
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_writePin+0x13c>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_writePin+0x138>
    1e4c:	84 2b       	or	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	40 c0       	rjmp	.+128    	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
    1e52:	a5 e3       	ldi	r26, 0x35	; 53
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e5 e3       	ldi	r30, 0x35	; 53
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_writePin+0x164>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_writePin+0x160>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	2b c0       	rjmp	.+86     	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	a1 f4       	brne	.+40     	; 0x1eaa <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
    1e82:	a2 e3       	ldi	r26, 0x32	; 50
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e2 e3       	ldi	r30, 0x32	; 50
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_writePin+0x194>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_writePin+0x190>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
    1eaa:	a2 e3       	ldi	r26, 0x32	; 50
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e2 e3       	ldi	r30, 0x32	; 50
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <GPIO_writePin+0x1bc>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <GPIO_writePin+0x1b8>
    1ecc:	80 95       	com	r24
    1ece:	84 23       	and	r24, r20
    1ed0:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <GPIO_readPin+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <GPIO_readPin+0x8>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <GPIO_readPin+0xa>
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	88 30       	cpi	r24, 0x08	; 8
    1ef8:	08 f0       	brcs	.+2      	; 0x1efc <GPIO_readPin+0x1a>
    1efa:	85 c0       	rjmp	.+266    	; 0x2006 <GPIO_readPin+0x124>
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	84 30       	cpi	r24, 0x04	; 4
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <GPIO_readPin+0x22>
    1f02:	81 c0       	rjmp	.+258    	; 0x2006 <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	3d 83       	std	Y+5, r19	; 0x05
    1f0c:	2c 83       	std	Y+4, r18	; 0x04
    1f0e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f10:	5d 81       	ldd	r21, Y+5	; 0x05
    1f12:	41 30       	cpi	r20, 0x01	; 1
    1f14:	51 05       	cpc	r21, r1
    1f16:	79 f1       	breq	.+94     	; 0x1f76 <GPIO_readPin+0x94>
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	91 05       	cpc	r25, r1
    1f20:	34 f4       	brge	.+12     	; 0x1f2e <GPIO_readPin+0x4c>
    1f22:	2c 81       	ldd	r18, Y+4	; 0x04
    1f24:	3d 81       	ldd	r19, Y+5	; 0x05
    1f26:	21 15       	cp	r18, r1
    1f28:	31 05       	cpc	r19, r1
    1f2a:	69 f0       	breq	.+26     	; 0x1f46 <GPIO_readPin+0x64>
    1f2c:	6c c0       	rjmp	.+216    	; 0x2006 <GPIO_readPin+0x124>
    1f2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f30:	5d 81       	ldd	r21, Y+5	; 0x05
    1f32:	42 30       	cpi	r20, 0x02	; 2
    1f34:	51 05       	cpc	r21, r1
    1f36:	b9 f1       	breq	.+110    	; 0x1fa6 <GPIO_readPin+0xc4>
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	91 05       	cpc	r25, r1
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <GPIO_readPin+0x62>
    1f42:	49 c0       	rjmp	.+146    	; 0x1fd6 <GPIO_readPin+0xf4>
    1f44:	60 c0       	rjmp	.+192    	; 0x2006 <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
    1f46:	e9 e3       	ldi	r30, 0x39	; 57
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a9 01       	movw	r20, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <GPIO_readPin+0x7c>
    1f5a:	55 95       	asr	r21
    1f5c:	47 95       	ror	r20
    1f5e:	8a 95       	dec	r24
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <GPIO_readPin+0x78>
    1f62:	ca 01       	movw	r24, r20
    1f64:	81 70       	andi	r24, 0x01	; 1
    1f66:	90 70       	andi	r25, 0x00	; 0
    1f68:	88 23       	and	r24, r24
    1f6a:	19 f0       	breq	.+6      	; 0x1f72 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    1f6c:	51 e0       	ldi	r21, 0x01	; 1
    1f6e:	5b 83       	std	Y+3, r21	; 0x03
    1f70:	4b c0       	rjmp	.+150    	; 0x2008 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1f72:	1b 82       	std	Y+3, r1	; 0x03
    1f74:	49 c0       	rjmp	.+146    	; 0x2008 <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
    1f76:	e6 e3       	ldi	r30, 0x36	; 54
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a9 01       	movw	r20, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <GPIO_readPin+0xac>
    1f8a:	55 95       	asr	r21
    1f8c:	47 95       	ror	r20
    1f8e:	8a 95       	dec	r24
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <GPIO_readPin+0xa8>
    1f92:	ca 01       	movw	r24, r20
    1f94:	81 70       	andi	r24, 0x01	; 1
    1f96:	90 70       	andi	r25, 0x00	; 0
    1f98:	88 23       	and	r24, r24
    1f9a:	19 f0       	breq	.+6      	; 0x1fa2 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    1f9c:	51 e0       	ldi	r21, 0x01	; 1
    1f9e:	5b 83       	std	Y+3, r21	; 0x03
    1fa0:	33 c0       	rjmp	.+102    	; 0x2008 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1fa2:	1b 82       	std	Y+3, r1	; 0x03
    1fa4:	31 c0       	rjmp	.+98     	; 0x2008 <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
    1fa6:	e3 e3       	ldi	r30, 0x33	; 51
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a9 01       	movw	r20, r18
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <GPIO_readPin+0xdc>
    1fba:	55 95       	asr	r21
    1fbc:	47 95       	ror	r20
    1fbe:	8a 95       	dec	r24
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <GPIO_readPin+0xd8>
    1fc2:	ca 01       	movw	r24, r20
    1fc4:	81 70       	andi	r24, 0x01	; 1
    1fc6:	90 70       	andi	r25, 0x00	; 0
    1fc8:	88 23       	and	r24, r24
    1fca:	19 f0       	breq	.+6      	; 0x1fd2 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    1fcc:	51 e0       	ldi	r21, 0x01	; 1
    1fce:	5b 83       	std	Y+3, r21	; 0x03
    1fd0:	1b c0       	rjmp	.+54     	; 0x2008 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1fd2:	1b 82       	std	Y+3, r1	; 0x03
    1fd4:	19 c0       	rjmp	.+50     	; 0x2008 <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
    1fd6:	e0 e3       	ldi	r30, 0x30	; 48
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <GPIO_readPin+0x10c>
    1fea:	55 95       	asr	r21
    1fec:	47 95       	ror	r20
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <GPIO_readPin+0x108>
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	81 70       	andi	r24, 0x01	; 1
    1ff6:	90 70       	andi	r25, 0x00	; 0
    1ff8:	88 23       	and	r24, r24
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    1ffc:	51 e0       	ldi	r21, 0x01	; 1
    1ffe:	5b 83       	std	Y+3, r21	; 0x03
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    2002:	1b 82       	std	Y+3, r1	; 0x03
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <GPIO_readPin+0x126>
    2006:	02 c0       	rjmp	.+4      	; 0x200c <GPIO_readPin+0x12a>
				}
		}
	}
}
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	8e 83       	std	Y+6, r24	; 0x06
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	26 96       	adiw	r28, 0x06	; 6
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <GPIO_setupPortDirection+0x6>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <GPIO_setupPortDirection+0x8>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	84 30       	cpi	r24, 0x04	; 4
    2034:	90 f5       	brcc	.+100    	; 0x209a <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3c 83       	std	Y+4, r19	; 0x04
    203e:	2b 83       	std	Y+3, r18	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	91 05       	cpc	r25, r1
    2048:	d1 f0       	breq	.+52     	; 0x207e <GPIO_setupPortDirection+0x5e>
    204a:	2b 81       	ldd	r18, Y+3	; 0x03
    204c:	3c 81       	ldd	r19, Y+4	; 0x04
    204e:	22 30       	cpi	r18, 0x02	; 2
    2050:	31 05       	cpc	r19, r1
    2052:	2c f4       	brge	.+10     	; 0x205e <GPIO_setupPortDirection+0x3e>
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	61 f0       	breq	.+24     	; 0x2074 <GPIO_setupPortDirection+0x54>
    205c:	1e c0       	rjmp	.+60     	; 0x209a <GPIO_setupPortDirection+0x7a>
    205e:	2b 81       	ldd	r18, Y+3	; 0x03
    2060:	3c 81       	ldd	r19, Y+4	; 0x04
    2062:	22 30       	cpi	r18, 0x02	; 2
    2064:	31 05       	cpc	r19, r1
    2066:	81 f0       	breq	.+32     	; 0x2088 <GPIO_setupPortDirection+0x68>
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	83 30       	cpi	r24, 0x03	; 3
    206e:	91 05       	cpc	r25, r1
    2070:	81 f0       	breq	.+32     	; 0x2092 <GPIO_setupPortDirection+0x72>
    2072:	13 c0       	rjmp	.+38     	; 0x209a <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    2074:	ea e3       	ldi	r30, 0x3A	; 58
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	80 83       	st	Z, r24
    207c:	0e c0       	rjmp	.+28     	; 0x209a <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    207e:	e7 e3       	ldi	r30, 0x37	; 55
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	80 83       	st	Z, r24
    2086:	09 c0       	rjmp	.+18     	; 0x209a <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    2088:	e4 e3       	ldi	r30, 0x34	; 52
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	80 83       	st	Z, r24
    2090:	04 c0       	rjmp	.+8      	; 0x209a <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    2092:	e1 e3       	ldi	r30, 0x31	; 49
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	80 83       	st	Z, r24
			break;
		}
	}
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <GPIO_writePort+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <GPIO_writePort+0x8>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	84 30       	cpi	r24, 0x04	; 4
    20bc:	90 f5       	brcc	.+100    	; 0x2122 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	3c 83       	std	Y+4, r19	; 0x04
    20c6:	2b 83       	std	Y+3, r18	; 0x03
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 05       	cpc	r25, r1
    20d0:	d1 f0       	breq	.+52     	; 0x2106 <GPIO_writePort+0x5e>
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	2c f4       	brge	.+10     	; 0x20e6 <GPIO_writePort+0x3e>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	61 f0       	breq	.+24     	; 0x20fc <GPIO_writePort+0x54>
    20e4:	1e c0       	rjmp	.+60     	; 0x2122 <GPIO_writePort+0x7a>
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <GPIO_writePort+0x68>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	83 30       	cpi	r24, 0x03	; 3
    20f6:	91 05       	cpc	r25, r1
    20f8:	81 f0       	breq	.+32     	; 0x211a <GPIO_writePort+0x72>
    20fa:	13 c0       	rjmp	.+38     	; 0x2122 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    20fc:	eb e3       	ldi	r30, 0x3B	; 59
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	80 83       	st	Z, r24
    2104:	0e c0       	rjmp	.+28     	; 0x2122 <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    2106:	e8 e3       	ldi	r30, 0x38	; 56
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	80 83       	st	Z, r24
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    2110:	e5 e3       	ldi	r30, 0x35	; 53
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	80 83       	st	Z, r24
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    211a:	e2 e3       	ldi	r30, 0x32	; 50
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	80 83       	st	Z, r24
			break;
		}
	}
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <GPIO_readPort+0x6>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <GPIO_readPort+0x8>
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	98 f5       	brcc	.+102    	; 0x21ac <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	3c 83       	std	Y+4, r19	; 0x04
    214e:	2b 83       	std	Y+3, r18	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	91 05       	cpc	r25, r1
    2158:	d1 f0       	breq	.+52     	; 0x218e <GPIO_readPort+0x5e>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3c 81       	ldd	r19, Y+4	; 0x04
    215e:	22 30       	cpi	r18, 0x02	; 2
    2160:	31 05       	cpc	r19, r1
    2162:	2c f4       	brge	.+10     	; 0x216e <GPIO_readPort+0x3e>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	61 f0       	breq	.+24     	; 0x2184 <GPIO_readPort+0x54>
    216c:	1f c0       	rjmp	.+62     	; 0x21ac <GPIO_readPort+0x7c>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	81 f0       	breq	.+32     	; 0x2198 <GPIO_readPort+0x68>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	91 05       	cpc	r25, r1
    2180:	81 f0       	breq	.+32     	; 0x21a2 <GPIO_readPort+0x72>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    2184:	e9 e3       	ldi	r30, 0x39	; 57
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	90 81       	ld	r25, Z
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	10 c0       	rjmp	.+32     	; 0x21ae <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    218e:	e6 e3       	ldi	r30, 0x36	; 54
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	20 81       	ld	r18, Z
    2194:	2a 83       	std	Y+2, r18	; 0x02
    2196:	0b c0       	rjmp	.+22     	; 0x21ae <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    2198:	e3 e3       	ldi	r30, 0x33	; 51
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	30 81       	ld	r19, Z
    219e:	3a 83       	std	Y+2, r19	; 0x02
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    21a2:	e0 e3       	ldi	r30, 0x30	; 48
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8a 83       	std	Y+2, r24	; 0x02
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <GPIO_readPort+0x7e>
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <GPIO_readPort+0x82>
		}
	}
}
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	9d 83       	std	Y+5, r25	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <Keypad_getPressedKey>:
 * 		Function that gets the key that is pressed in the keypad.
 * [Args]		: Void.
 * [Return]		: Keypad pressed button corresponding number through mapping.
 */
uint8 Keypad_getPressedKey(void)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <Keypad_getPressedKey+0x6>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
	/* Define variables to be looped about */
	uint8 column, row;
	/* Configure keypad pins */
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	64 e0       	ldi	r22, 0x04	; 4
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	65 e0       	ldi	r22, 0x05	; 5
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	66 e0       	ldi	r22, 0x06	; 6
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	67 e0       	ldi	r22, 0x07	; 7
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    2200:	82 e0       	ldi	r24, 0x02	; 2
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	62 e0       	ldi	r22, 0x02	; 2
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			PIN_INPUT);

#if(KEYPAD_NUM_COLS == 4)

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	63 e0       	ldi	r22, 0x03	; 3
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
#endif

	while (TRUE)
	{
		/* Loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    221e:	19 82       	std	Y+1, r1	; 0x01
    2220:	3b c0       	rjmp	.+118    	; 0x2298 <Keypad_getPressedKey+0xd4>
		{
			/* Set the current row pin as output pin */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	98 2f       	mov	r25, r24
    2226:	9c 5f       	subi	r25, 0xFC	; 252
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	69 2f       	mov	r22, r25
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			/* Set or clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	98 2f       	mov	r25, r24
    2236:	9c 5f       	subi	r25, 0xFC	; 252
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	69 2f       	mov	r22, r25
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);
			/* Loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    2242:	1a 82       	std	Y+2, r1	; 0x02
    2244:	1b c0       	rjmp	.+54     	; 0x227c <Keypad_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	6a 81       	ldd	r22, Y+2	; 0x02
    224a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_readPin>
    224e:	88 23       	and	r24, r24
    2250:	91 f4       	brne	.+36     	; 0x2276 <Keypad_getPressedKey+0xb2>
					/* An equation to return the pressed button number */
					return ((row * KEYPAD_NUM_COLS) + column + 1);

#else
					/* An equation to return the pressed button number */
					return Keypad_4x4_adjustKeyNumber(
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	98 2f       	mov	r25, r24
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	89 0f       	add	r24, r25
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	0e 94 50 11 	call	0x22a0	; 0x22a0 <Keypad_4x4_adjustKeyNumber>
			/* Set the current row pin as input pin */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
		}
	}
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			/* Set or clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);
			/* Loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	8f 5f       	subi	r24, 0xFF	; 255
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	84 30       	cpi	r24, 0x04	; 4
    2280:	10 f3       	brcs	.-60     	; 0x2246 <Keypad_getPressedKey+0x82>

#endif
				}
			}
			/* Set the current row pin as input pin */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	98 2f       	mov	r25, r24
    2286:	9c 5f       	subi	r25, 0xFC	; 252
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	69 2f       	mov	r22, r25
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
#endif

	while (TRUE)
	{
		/* Loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	84 30       	cpi	r24, 0x04	; 4
    229c:	10 f2       	brcs	.-124    	; 0x2222 <Keypad_getPressedKey+0x5e>
    229e:	bf cf       	rjmp	.-130    	; 0x221e <Keypad_getPressedKey+0x5a>

000022a0 <Keypad_4x4_adjustKeyNumber>:
 * [Args]	:
 * [In] buttonNumber : Indicates pressed button number.
 * [Return]			 : Keypad pressed button corresponding number.
 */
static uint8 Keypad_4x4_adjustKeyNumber(uint8 buttonNumber)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <Keypad_4x4_adjustKeyNumber+0x6>
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <Keypad_4x4_adjustKeyNumber+0x8>
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a variable that will be returned from the function */
	uint8 keypadButton = 0;
    22ae:	19 82       	std	Y+1, r1	; 0x01
	/* Select pressed button corresponding value accordingly */
	switch (buttonNumber)
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	3c 83       	std	Y+4, r19	; 0x04
    22b8:	2b 83       	std	Y+3, r18	; 0x03
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	88 30       	cpi	r24, 0x08	; 8
    22c0:	91 05       	cpc	r25, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <Keypad_4x4_adjustKeyNumber+0x26>
    22c4:	70 c0       	rjmp	.+224    	; 0x23a6 <Keypad_4x4_adjustKeyNumber+0x106>
    22c6:	2b 81       	ldd	r18, Y+3	; 0x03
    22c8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ca:	29 30       	cpi	r18, 0x09	; 9
    22cc:	31 05       	cpc	r19, r1
    22ce:	5c f5       	brge	.+86     	; 0x2326 <Keypad_4x4_adjustKeyNumber+0x86>
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	84 30       	cpi	r24, 0x04	; 4
    22d6:	91 05       	cpc	r25, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <Keypad_4x4_adjustKeyNumber+0x3c>
    22da:	59 c0       	rjmp	.+178    	; 0x238e <Keypad_4x4_adjustKeyNumber+0xee>
    22dc:	2b 81       	ldd	r18, Y+3	; 0x03
    22de:	3c 81       	ldd	r19, Y+4	; 0x04
    22e0:	25 30       	cpi	r18, 0x05	; 5
    22e2:	31 05       	cpc	r19, r1
    22e4:	9c f4       	brge	.+38     	; 0x230c <Keypad_4x4_adjustKeyNumber+0x6c>
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <Keypad_4x4_adjustKeyNumber+0x52>
    22f0:	48 c0       	rjmp	.+144    	; 0x2382 <Keypad_4x4_adjustKeyNumber+0xe2>
    22f2:	2b 81       	ldd	r18, Y+3	; 0x03
    22f4:	3c 81       	ldd	r19, Y+4	; 0x04
    22f6:	23 30       	cpi	r18, 0x03	; 3
    22f8:	31 05       	cpc	r19, r1
    22fa:	0c f0       	brlt	.+2      	; 0x22fe <Keypad_4x4_adjustKeyNumber+0x5e>
    22fc:	45 c0       	rjmp	.+138    	; 0x2388 <Keypad_4x4_adjustKeyNumber+0xe8>
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	09 f4       	brne	.+2      	; 0x230a <Keypad_4x4_adjustKeyNumber+0x6a>
    2308:	39 c0       	rjmp	.+114    	; 0x237c <Keypad_4x4_adjustKeyNumber+0xdc>
    230a:	67 c0       	rjmp	.+206    	; 0x23da <Keypad_4x4_adjustKeyNumber+0x13a>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	26 30       	cpi	r18, 0x06	; 6
    2312:	31 05       	cpc	r19, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <Keypad_4x4_adjustKeyNumber+0x78>
    2316:	41 c0       	rjmp	.+130    	; 0x239a <Keypad_4x4_adjustKeyNumber+0xfa>
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	87 30       	cpi	r24, 0x07	; 7
    231e:	91 05       	cpc	r25, r1
    2320:	0c f0       	brlt	.+2      	; 0x2324 <Keypad_4x4_adjustKeyNumber+0x84>
    2322:	3e c0       	rjmp	.+124    	; 0x23a0 <Keypad_4x4_adjustKeyNumber+0x100>
    2324:	37 c0       	rjmp	.+110    	; 0x2394 <Keypad_4x4_adjustKeyNumber+0xf4>
    2326:	2b 81       	ldd	r18, Y+3	; 0x03
    2328:	3c 81       	ldd	r19, Y+4	; 0x04
    232a:	2c 30       	cpi	r18, 0x0C	; 12
    232c:	31 05       	cpc	r19, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <Keypad_4x4_adjustKeyNumber+0x92>
    2330:	46 c0       	rjmp	.+140    	; 0x23be <Keypad_4x4_adjustKeyNumber+0x11e>
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	8d 30       	cpi	r24, 0x0D	; 13
    2338:	91 05       	cpc	r25, r1
    233a:	5c f4       	brge	.+22     	; 0x2352 <Keypad_4x4_adjustKeyNumber+0xb2>
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	2a 30       	cpi	r18, 0x0A	; 10
    2342:	31 05       	cpc	r19, r1
    2344:	b1 f1       	breq	.+108    	; 0x23b2 <Keypad_4x4_adjustKeyNumber+0x112>
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	8b 30       	cpi	r24, 0x0B	; 11
    234c:	91 05       	cpc	r25, r1
    234e:	a4 f5       	brge	.+104    	; 0x23b8 <Keypad_4x4_adjustKeyNumber+0x118>
    2350:	2d c0       	rjmp	.+90     	; 0x23ac <Keypad_4x4_adjustKeyNumber+0x10c>
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	3c 81       	ldd	r19, Y+4	; 0x04
    2356:	2e 30       	cpi	r18, 0x0E	; 14
    2358:	31 05       	cpc	r19, r1
    235a:	b9 f1       	breq	.+110    	; 0x23ca <Keypad_4x4_adjustKeyNumber+0x12a>
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	8e 30       	cpi	r24, 0x0E	; 14
    2362:	91 05       	cpc	r25, r1
    2364:	7c f1       	brlt	.+94     	; 0x23c4 <Keypad_4x4_adjustKeyNumber+0x124>
    2366:	2b 81       	ldd	r18, Y+3	; 0x03
    2368:	3c 81       	ldd	r19, Y+4	; 0x04
    236a:	2f 30       	cpi	r18, 0x0F	; 15
    236c:	31 05       	cpc	r19, r1
    236e:	79 f1       	breq	.+94     	; 0x23ce <Keypad_4x4_adjustKeyNumber+0x12e>
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	80 31       	cpi	r24, 0x10	; 16
    2376:	91 05       	cpc	r25, r1
    2378:	69 f1       	breq	.+90     	; 0x23d4 <Keypad_4x4_adjustKeyNumber+0x134>
    237a:	2f c0       	rjmp	.+94     	; 0x23da <Keypad_4x4_adjustKeyNumber+0x13a>
	{
		case 1:
			keypadButton = 7;
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	2e c0       	rjmp	.+92     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 2:
			keypadButton = 8;
    2382:	88 e0       	ldi	r24, 0x08	; 8
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	2b c0       	rjmp	.+86     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 3:
			keypadButton = 9;
    2388:	89 e0       	ldi	r24, 0x09	; 9
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	28 c0       	rjmp	.+80     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 4:
			keypadButton = '%';
    238e:	85 e2       	ldi	r24, 0x25	; 37
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	25 c0       	rjmp	.+74     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 5:
			keypadButton = 4;
    2394:	84 e0       	ldi	r24, 0x04	; 4
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	22 c0       	rjmp	.+68     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 6:
			keypadButton = 5;
    239a:	85 e0       	ldi	r24, 0x05	; 5
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	1f c0       	rjmp	.+62     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 7:
			keypadButton = 6;
    23a0:	86 e0       	ldi	r24, 0x06	; 6
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	1c c0       	rjmp	.+56     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 8:
			keypadButton = '*';
    23a6:	8a e2       	ldi	r24, 0x2A	; 42
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	19 c0       	rjmp	.+50     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 9:
			keypadButton = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	16 c0       	rjmp	.+44     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 10:
			keypadButton = 2;
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	13 c0       	rjmp	.+38     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 11:
			keypadButton = 3;
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	10 c0       	rjmp	.+32     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 12:
			keypadButton = '-';
    23be:	8d e2       	ldi	r24, 0x2D	; 45
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	0d c0       	rjmp	.+26     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 13:
			keypadButton = 13;
    23c4:	8d e0       	ldi	r24, 0x0D	; 13
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 14:
			keypadButton = 0;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	08 c0       	rjmp	.+16     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 15:
			keypadButton = '=';
    23ce:	8d e3       	ldi	r24, 0x3D	; 61
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 16:
			keypadButton = '+';
    23d4:	8b e2       	ldi	r24, 0x2B	; 43
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		default:
			keypadButton = buttonNumber;
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Return the selected value */
	return keypadButton;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <LCD_init>:
 * 			2. Setup the LCD data mode (4 BIT MODE/8 BIT MODE).
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_init(void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	2e 97       	sbiw	r28, 0x0e	; 14
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
	/* Configure direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	62 e0       	ldi	r22, 0x02	; 2
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	61 e0       	ldi	r22, 0x01	; 1
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 ea       	ldi	r26, 0xA0	; 160
    2430:	b1 e4       	ldi	r27, 0x41	; 65
    2432:	8b 87       	std	Y+11, r24	; 0x0b
    2434:	9c 87       	std	Y+12, r25	; 0x0c
    2436:	ad 87       	std	Y+13, r26	; 0x0d
    2438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243a:	6b 85       	ldd	r22, Y+11	; 0x0b
    243c:	7c 85       	ldd	r23, Y+12	; 0x0c
    243e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2440:	9e 85       	ldd	r25, Y+14	; 0x0e
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a ef       	ldi	r20, 0xFA	; 250
    2448:	54 e4       	ldi	r21, 0x44	; 68
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	8f 83       	std	Y+7, r24	; 0x07
    2454:	98 87       	std	Y+8, r25	; 0x08
    2456:	a9 87       	std	Y+9, r26	; 0x09
    2458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245a:	6f 81       	ldd	r22, Y+7	; 0x07
    245c:	78 85       	ldd	r23, Y+8	; 0x08
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	2c f4       	brge	.+10     	; 0x247c <LCD_init+0x8e>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	3f c0       	rjmp	.+126    	; 0x24fa <LCD_init+0x10c>
	else if (__tmp > 65535)
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	4c f5       	brge	.+82     	; 0x24e6 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2494:	6b 85       	ldd	r22, Y+11	; 0x0b
    2496:	7c 85       	ldd	r23, Y+12	; 0x0c
    2498:	8d 85       	ldd	r24, Y+13	; 0x0d
    249a:	9e 85       	ldd	r25, Y+14	; 0x0e
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
    24bc:	0f c0       	rjmp	.+30     	; 0x24dc <LCD_init+0xee>
    24be:	88 ec       	ldi	r24, 0xC8	; 200
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_init+0xdc>
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	69 f7       	brne	.-38     	; 0x24be <LCD_init+0xd0>
    24e4:	14 c0       	rjmp	.+40     	; 0x250e <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e6:	6f 81       	ldd	r22, Y+7	; 0x07
    24e8:	78 85       	ldd	r23, Y+8	; 0x08
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_init+0x118>
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	6f ef       	ldi	r22, 0xFF	; 255
    2512:	0e 94 10 10 	call	0x2020	; 0x2020 <GPIO_setupPortDirection>
	/* Use two lines LCD in 8-bits data mode & (5x7) dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2516:	88 e3       	ldi	r24, 0x38	; 56
    2518:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Turn cursor off */
    251c:	8c e0       	ldi	r24, 0x0C	; 12
    251e:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
}
    2528:	2e 96       	adiw	r28, 0x0e	; 14
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <LCD_sendCommand>:
 * [Args]	:
 * [In] command	: Indicates the command that is sent.
 * [Return]		: Void.
 */
void LCD_sendCommand(uint8 command)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	e9 97       	sbiw	r28, 0x39	; 57
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS = 0 */
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e8       	ldi	r26, 0x80	; 128
    2560:	bf e3       	ldi	r27, 0x3F	; 63
    2562:	8d ab       	std	Y+53, r24	; 0x35
    2564:	9e ab       	std	Y+54, r25	; 0x36
    2566:	af ab       	std	Y+55, r26	; 0x37
    2568:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	6d a9       	ldd	r22, Y+53	; 0x35
    256c:	7e a9       	ldd	r23, Y+54	; 0x36
    256e:	8f a9       	ldd	r24, Y+55	; 0x37
    2570:	98 ad       	ldd	r25, Y+56	; 0x38
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a ef       	ldi	r20, 0xFA	; 250
    2578:	54 e4       	ldi	r21, 0x44	; 68
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	89 ab       	std	Y+49, r24	; 0x31
    2584:	9a ab       	std	Y+50, r25	; 0x32
    2586:	ab ab       	std	Y+51, r26	; 0x33
    2588:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    258a:	69 a9       	ldd	r22, Y+49	; 0x31
    258c:	7a a9       	ldd	r23, Y+50	; 0x32
    258e:	8b a9       	ldd	r24, Y+51	; 0x33
    2590:	9c a9       	ldd	r25, Y+52	; 0x34
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <LCD_sendCommand+0x72>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	98 ab       	std	Y+48, r25	; 0x30
    25a8:	8f a7       	std	Y+47, r24	; 0x2f
    25aa:	3f c0       	rjmp	.+126    	; 0x262a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    25ac:	69 a9       	ldd	r22, Y+49	; 0x31
    25ae:	7a a9       	ldd	r23, Y+50	; 0x32
    25b0:	8b a9       	ldd	r24, Y+51	; 0x33
    25b2:	9c a9       	ldd	r25, Y+52	; 0x34
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	57 e4       	ldi	r21, 0x47	; 71
    25bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	4c f5       	brge	.+82     	; 0x2616 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c4:	6d a9       	ldd	r22, Y+53	; 0x35
    25c6:	7e a9       	ldd	r23, Y+54	; 0x36
    25c8:	8f a9       	ldd	r24, Y+55	; 0x37
    25ca:	98 ad       	ldd	r25, Y+56	; 0x38
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	98 ab       	std	Y+48, r25	; 0x30
    25ea:	8f a7       	std	Y+47, r24	; 0x2f
    25ec:	0f c0       	rjmp	.+30     	; 0x260c <LCD_sendCommand+0xd2>
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9e a7       	std	Y+46, r25	; 0x2e
    25f4:	8d a7       	std	Y+45, r24	; 0x2d
    25f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_sendCommand+0xc0>
    25fe:	9e a7       	std	Y+46, r25	; 0x2e
    2600:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	8f a5       	ldd	r24, Y+47	; 0x2f
    2604:	98 a9       	ldd	r25, Y+48	; 0x30
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	98 ab       	std	Y+48, r25	; 0x30
    260a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	8f a5       	ldd	r24, Y+47	; 0x2f
    260e:	98 a9       	ldd	r25, Y+48	; 0x30
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	69 f7       	brne	.-38     	; 0x25ee <LCD_sendCommand+0xb4>
    2614:	14 c0       	rjmp	.+40     	; 0x263e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	69 a9       	ldd	r22, Y+49	; 0x31
    2618:	7a a9       	ldd	r23, Y+50	; 0x32
    261a:	8b a9       	ldd	r24, Y+51	; 0x33
    261c:	9c a9       	ldd	r25, Y+52	; 0x34
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	98 ab       	std	Y+48, r25	; 0x30
    2628:	8f a7       	std	Y+47, r24	; 0x2f
    262a:	8f a5       	ldd	r24, Y+47	; 0x2f
    262c:	98 a9       	ldd	r25, Y+48	; 0x30
    262e:	9c a7       	std	Y+44, r25	; 0x2c
    2630:	8b a7       	std	Y+43, r24	; 0x2b
    2632:	8b a5       	ldd	r24, Y+43	; 0x2b
    2634:	9c a5       	ldd	r25, Y+44	; 0x2c
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_sendCommand+0xfc>
    263a:	9c a7       	std	Y+44, r25	; 0x2c
    263c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	62 e0       	ldi	r22, 0x02	; 2
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e8       	ldi	r26, 0x80	; 128
    264e:	bf e3       	ldi	r27, 0x3F	; 63
    2650:	8f a3       	std	Y+39, r24	; 0x27
    2652:	98 a7       	std	Y+40, r25	; 0x28
    2654:	a9 a7       	std	Y+41, r26	; 0x29
    2656:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	6f a1       	ldd	r22, Y+39	; 0x27
    265a:	78 a5       	ldd	r23, Y+40	; 0x28
    265c:	89 a5       	ldd	r24, Y+41	; 0x29
    265e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a ef       	ldi	r20, 0xFA	; 250
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8b a3       	std	Y+35, r24	; 0x23
    2672:	9c a3       	std	Y+36, r25	; 0x24
    2674:	ad a3       	std	Y+37, r26	; 0x25
    2676:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2678:	6b a1       	ldd	r22, Y+35	; 0x23
    267a:	7c a1       	ldd	r23, Y+36	; 0x24
    267c:	8d a1       	ldd	r24, Y+37	; 0x25
    267e:	9e a1       	ldd	r25, Y+38	; 0x26
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <LCD_sendCommand+0x160>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9a a3       	std	Y+34, r25	; 0x22
    2696:	89 a3       	std	Y+33, r24	; 0x21
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    269a:	6b a1       	ldd	r22, Y+35	; 0x23
    269c:	7c a1       	ldd	r23, Y+36	; 0x24
    269e:	8d a1       	ldd	r24, Y+37	; 0x25
    26a0:	9e a1       	ldd	r25, Y+38	; 0x26
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	6f a1       	ldd	r22, Y+39	; 0x27
    26b4:	78 a5       	ldd	r23, Y+40	; 0x28
    26b6:	89 a5       	ldd	r24, Y+41	; 0x29
    26b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9a a3       	std	Y+34, r25	; 0x22
    26d8:	89 a3       	std	Y+33, r24	; 0x21
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <LCD_sendCommand+0x1c0>
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	98 a3       	std	Y+32, r25	; 0x20
    26e2:	8f 8f       	std	Y+31, r24	; 0x1f
    26e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26e6:	98 a1       	ldd	r25, Y+32	; 0x20
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_sendCommand+0x1ae>
    26ec:	98 a3       	std	Y+32, r25	; 0x20
    26ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	89 a1       	ldd	r24, Y+33	; 0x21
    26f2:	9a a1       	ldd	r25, Y+34	; 0x22
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9a a3       	std	Y+34, r25	; 0x22
    26f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	89 a1       	ldd	r24, Y+33	; 0x21
    26fc:	9a a1       	ldd	r25, Y+34	; 0x22
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <LCD_sendCommand+0x1a2>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9a a3       	std	Y+34, r25	; 0x22
    2716:	89 a3       	std	Y+33, r24	; 0x21
    2718:	89 a1       	ldd	r24, Y+33	; 0x21
    271a:	9a a1       	ldd	r25, Y+34	; 0x22
    271c:	9e 8f       	std	Y+30, r25	; 0x1e
    271e:	8d 8f       	std	Y+29, r24	; 0x1d
    2720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_sendCommand+0x1ea>
    2728:	9e 8f       	std	Y+30, r25	; 0x1e
    272a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190 ns */

#if (LCD_RW_GROUND == FALSE)

	/* If RW pin is connected to micro-controller and not grounded */
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* Write to the data bus from D0 to D7 */
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	69 ad       	ldd	r22, Y+57	; 0x39
    2744:	0e 94 54 10 	call	0x20a8	; 0x20a8 <GPIO_writePort>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	bf e3       	ldi	r27, 0x3F	; 63
    2750:	89 8f       	std	Y+25, r24	; 0x19
    2752:	9a 8f       	std	Y+26, r25	; 0x1a
    2754:	ab 8f       	std	Y+27, r26	; 0x1b
    2756:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	69 8d       	ldd	r22, Y+25	; 0x19
    275a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8d 8b       	std	Y+21, r24	; 0x15
    2772:	9e 8b       	std	Y+22, r25	; 0x16
    2774:	af 8b       	std	Y+23, r26	; 0x17
    2776:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2778:	6d 89       	ldd	r22, Y+21	; 0x15
    277a:	7e 89       	ldd	r23, Y+22	; 0x16
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <LCD_sendCommand+0x260>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 8b       	std	Y+20, r25	; 0x14
    2796:	8b 8b       	std	Y+19, r24	; 0x13
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	69 8d       	ldd	r22, Y+25	; 0x19
    27b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9c 8b       	std	Y+20, r25	; 0x14
    27d8:	8b 8b       	std	Y+19, r24	; 0x13
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <LCD_sendCommand+0x2c0>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9a 8b       	std	Y+18, r25	; 0x12
    27e2:	89 8b       	std	Y+17, r24	; 0x11
    27e4:	89 89       	ldd	r24, Y+17	; 0x11
    27e6:	9a 89       	ldd	r25, Y+18	; 0x12
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_sendCommand+0x2ae>
    27ec:	9a 8b       	std	Y+18, r25	; 0x12
    27ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8b 89       	ldd	r24, Y+19	; 0x13
    27fc:	9c 89       	ldd	r25, Y+20	; 0x14
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <LCD_sendCommand+0x2a2>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6d 89       	ldd	r22, Y+21	; 0x15
    2806:	7e 89       	ldd	r23, Y+22	; 0x16
    2808:	8f 89       	ldd	r24, Y+23	; 0x17
    280a:	98 8d       	ldd	r25, Y+24	; 0x18
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9c 8b       	std	Y+20, r25	; 0x14
    2816:	8b 8b       	std	Y+19, r24	; 0x13
    2818:	8b 89       	ldd	r24, Y+19	; 0x13
    281a:	9c 89       	ldd	r25, Y+20	; 0x14
    281c:	98 8b       	std	Y+16, r25	; 0x10
    281e:	8f 87       	std	Y+15, r24	; 0x0f
    2820:	8f 85       	ldd	r24, Y+15	; 0x0f
    2822:	98 89       	ldd	r25, Y+16	; 0x10
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_sendCommand+0x2ea>
    2828:	98 8b       	std	Y+16, r25	; 0x10
    282a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	62 e0       	ldi	r22, 0x02	; 2
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e8       	ldi	r26, 0x80	; 128
    283c:	bf e3       	ldi	r27, 0x3F	; 63
    283e:	8b 87       	std	Y+11, r24	; 0x0b
    2840:	9c 87       	std	Y+12, r25	; 0x0c
    2842:	ad 87       	std	Y+13, r26	; 0x0d
    2844:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	6b 85       	ldd	r22, Y+11	; 0x0b
    2848:	7c 85       	ldd	r23, Y+12	; 0x0c
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a ef       	ldi	r20, 0xFA	; 250
    2854:	54 e4       	ldi	r21, 0x44	; 68
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8f 83       	std	Y+7, r24	; 0x07
    2860:	98 87       	std	Y+8, r25	; 0x08
    2862:	a9 87       	std	Y+9, r26	; 0x09
    2864:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <LCD_sendCommand+0x34e>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <LCD_sendCommand+0x3cc>
	else if (__tmp > 65535)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <LCD_sendCommand+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <LCD_sendCommand+0x3ae>
    28ca:	88 ec       	ldi	r24, 0xC8	; 200
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	9c 81       	ldd	r25, Y+4	; 0x04
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <LCD_sendCommand+0x39c>
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <LCD_sendCommand+0x390>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <LCD_sendCommand+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <LCD_sendCommand+0x3d8>
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    291a:	e9 96       	adiw	r28, 0x39	; 57
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <LCD_displayCharacter>:
 * [Args]	:
 * [In] data	: Indicates the character that is sent.
 * [Return]		: Void.
 */
void LCD_displayCharacter(uint8 data)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	e9 97       	sbiw	r28, 0x39	; 57
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS = 1 */
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a0 e8       	ldi	r26, 0x80	; 128
    2952:	bf e3       	ldi	r27, 0x3F	; 63
    2954:	8d ab       	std	Y+53, r24	; 0x35
    2956:	9e ab       	std	Y+54, r25	; 0x36
    2958:	af ab       	std	Y+55, r26	; 0x37
    295a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6d a9       	ldd	r22, Y+53	; 0x35
    295e:	7e a9       	ldd	r23, Y+54	; 0x36
    2960:	8f a9       	ldd	r24, Y+55	; 0x37
    2962:	98 ad       	ldd	r25, Y+56	; 0x38
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a ef       	ldi	r20, 0xFA	; 250
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	89 ab       	std	Y+49, r24	; 0x31
    2976:	9a ab       	std	Y+50, r25	; 0x32
    2978:	ab ab       	std	Y+51, r26	; 0x33
    297a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    297c:	69 a9       	ldd	r22, Y+49	; 0x31
    297e:	7a a9       	ldd	r23, Y+50	; 0x32
    2980:	8b a9       	ldd	r24, Y+51	; 0x33
    2982:	9c a9       	ldd	r25, Y+52	; 0x34
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	98 ab       	std	Y+48, r25	; 0x30
    299a:	8f a7       	std	Y+47, r24	; 0x2f
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    299e:	69 a9       	ldd	r22, Y+49	; 0x31
    29a0:	7a a9       	ldd	r23, Y+50	; 0x32
    29a2:	8b a9       	ldd	r24, Y+51	; 0x33
    29a4:	9c a9       	ldd	r25, Y+52	; 0x34
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6d a9       	ldd	r22, Y+53	; 0x35
    29b8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ba:	8f a9       	ldd	r24, Y+55	; 0x37
    29bc:	98 ad       	ldd	r25, Y+56	; 0x38
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	98 ab       	std	Y+48, r25	; 0x30
    29dc:	8f a7       	std	Y+47, r24	; 0x2f
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <LCD_displayCharacter+0xd2>
    29e0:	88 ec       	ldi	r24, 0xC8	; 200
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9e a7       	std	Y+46, r25	; 0x2e
    29e6:	8d a7       	std	Y+45, r24	; 0x2d
    29e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_displayCharacter+0xc0>
    29f0:	9e a7       	std	Y+46, r25	; 0x2e
    29f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f6:	98 a9       	ldd	r25, Y+48	; 0x30
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	98 ab       	std	Y+48, r25	; 0x30
    29fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a00:	98 a9       	ldd	r25, Y+48	; 0x30
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <LCD_displayCharacter+0xb4>
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	98 ab       	std	Y+48, r25	; 0x30
    2a1a:	8f a7       	std	Y+47, r24	; 0x2f
    2a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a20:	9c a7       	std	Y+44, r25	; 0x2c
    2a22:	8b a7       	std	Y+43, r24	; 0x2b
    2a24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a26:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_displayCharacter+0xfc>
    2a2c:	9c a7       	std	Y+44, r25	; 0x2c
    2a2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	62 e0       	ldi	r22, 0x02	; 2
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e8       	ldi	r26, 0x80	; 128
    2a40:	bf e3       	ldi	r27, 0x3F	; 63
    2a42:	8f a3       	std	Y+39, r24	; 0x27
    2a44:	98 a7       	std	Y+40, r25	; 0x28
    2a46:	a9 a7       	std	Y+41, r26	; 0x29
    2a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a ef       	ldi	r20, 0xFA	; 250
    2a58:	54 e4       	ldi	r21, 0x44	; 68
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8b a3       	std	Y+35, r24	; 0x23
    2a64:	9c a3       	std	Y+36, r25	; 0x24
    2a66:	ad a3       	std	Y+37, r26	; 0x25
    2a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9a a3       	std	Y+34, r25	; 0x22
    2a88:	89 a3       	std	Y+33, r24	; 0x21
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a90:	8d a1       	ldd	r24, Y+37	; 0x25
    2a92:	9e a1       	ldd	r25, Y+38	; 0x26
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9a a3       	std	Y+34, r25	; 0x22
    2aca:	89 a3       	std	Y+33, r24	; 0x21
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <LCD_displayCharacter+0x1c0>
    2ace:	88 ec       	ldi	r24, 0xC8	; 200
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	98 a3       	std	Y+32, r25	; 0x20
    2ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <LCD_displayCharacter+0x1ae>
    2ade:	98 a3       	std	Y+32, r25	; 0x20
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9a a3       	std	Y+34, r25	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	89 a1       	ldd	r24, Y+33	; 0x21
    2aee:	9a a1       	ldd	r25, Y+34	; 0x22
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <LCD_displayCharacter+0x1a2>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6b a1       	ldd	r22, Y+35	; 0x23
    2af8:	7c a1       	ldd	r23, Y+36	; 0x24
    2afa:	8d a1       	ldd	r24, Y+37	; 0x25
    2afc:	9e a1       	ldd	r25, Y+38	; 0x26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a a3       	std	Y+34, r25	; 0x22
    2b08:	89 a3       	std	Y+33, r24	; 0x21
    2b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b10:	8d 8f       	std	Y+29, r24	; 0x1d
    2b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <LCD_displayCharacter+0x1ea>
    2b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1c:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* Write to the data bus from D0 to D7 */
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	69 ad       	ldd	r22, Y+57	; 0x39
    2b22:	0e 94 54 10 	call	0x20a8	; 0x20a8 <GPIO_writePort>
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e8       	ldi	r26, 0x80	; 128
    2b2c:	bf e3       	ldi	r27, 0x3F	; 63
    2b2e:	89 8f       	std	Y+25, r24	; 0x19
    2b30:	9a 8f       	std	Y+26, r25	; 0x1a
    2b32:	ab 8f       	std	Y+27, r26	; 0x1b
    2b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b36:	69 8d       	ldd	r22, Y+25	; 0x19
    2b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a ef       	ldi	r20, 0xFA	; 250
    2b44:	54 e4       	ldi	r21, 0x44	; 68
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8d 8b       	std	Y+21, r24	; 0x15
    2b50:	9e 8b       	std	Y+22, r25	; 0x16
    2b52:	af 8b       	std	Y+23, r26	; 0x17
    2b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	2c f4       	brge	.+10     	; 0x2b78 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	3f c0       	rjmp	.+126    	; 0x2bf6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	3f ef       	ldi	r19, 0xFF	; 255
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	57 e4       	ldi	r21, 0x47	; 71
    2b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	4c f5       	brge	.+82     	; 0x2be2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9c 8b       	std	Y+20, r25	; 0x14
    2bb6:	8b 8b       	std	Y+19, r24	; 0x13
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <LCD_displayCharacter+0x2ac>
    2bba:	88 ec       	ldi	r24, 0xC8	; 200
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9a 8b       	std	Y+18, r25	; 0x12
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
    2bc2:	89 89       	ldd	r24, Y+17	; 0x11
    2bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <LCD_displayCharacter+0x29a>
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bda:	9c 89       	ldd	r25, Y+20	; 0x14
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	69 f7       	brne	.-38     	; 0x2bba <LCD_displayCharacter+0x28e>
    2be0:	14 c0       	rjmp	.+40     	; 0x2c0a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	6d 89       	ldd	r22, Y+21	; 0x15
    2be4:	7e 89       	ldd	r23, Y+22	; 0x16
    2be6:	8f 89       	ldd	r24, Y+23	; 0x17
    2be8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	98 8b       	std	Y+16, r25	; 0x10
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
    2bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c00:	98 89       	ldd	r25, Y+16	; 0x10
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <LCD_displayCharacter+0x2d6>
    2c06:	98 8b       	std	Y+16, r25	; 0x10
    2c08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePin>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e8       	ldi	r26, 0x80	; 128
    2c1a:	bf e3       	ldi	r27, 0x3F	; 63
    2c1c:	8b 87       	std	Y+11, r24	; 0x0b
    2c1e:	9c 87       	std	Y+12, r25	; 0x0c
    2c20:	ad 87       	std	Y+13, r26	; 0x0d
    2c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a ef       	ldi	r20, 0xFA	; 250
    2c32:	54 e4       	ldi	r21, 0x44	; 68
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8f 83       	std	Y+7, r24	; 0x07
    2c3e:	98 87       	std	Y+8, r25	; 0x08
    2c40:	a9 87       	std	Y+9, r26	; 0x09
    2c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	3f c0       	rjmp	.+126    	; 0x2ce4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	3f ef       	ldi	r19, 0xFF	; 255
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	57 e4       	ldi	r21, 0x47	; 71
    2c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	4c f5       	brge	.+82     	; 0x2cd0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <LCD_displayCharacter+0x39a>
    2ca8:	88 ec       	ldi	r24, 0xC8	; 200
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9c 83       	std	Y+4, r25	; 0x04
    2cae:	8b 83       	std	Y+3, r24	; 0x03
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_displayCharacter+0x388>
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <LCD_displayCharacter+0x37c>
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd2:	78 85       	ldd	r23, Y+8	; 0x08
    2cd4:	89 85       	ldd	r24, Y+9	; 0x09
    2cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	9a 83       	std	Y+2, r25	; 0x02
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <LCD_displayCharacter+0x3c4>
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    2cf8:	e9 96       	adiw	r28, 0x39	; 57
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <LCD_displayString>:
 * [Args] 	:
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayString(const uint8 *string)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <LCD_displayString+0x6>
    2d10:	0f 92       	push	r0
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	9b 83       	std	Y+3, r25	; 0x03
    2d18:	8a 83       	std	Y+2, r24	; 0x02
	/* Display each character in the recieved string array */
	uint8 i = 0;
    2d1a:	19 82       	std	Y+1, r1	; 0x01
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <LCD_displayString+0x30>
	while (string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	80 81       	ld	r24, Z
    2d30:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_displayCharacter>
		i++;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const uint8 *string)
{
	/* Display each character in the recieved string array */
	uint8 i = 0;
	while (string[i] != '\0')
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 23       	and	r24, r24
    2d4e:	39 f7       	brne	.-50     	; 0x2d1e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*string);
		string++;
	}
	 *********************************************************/
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <LCD_moveCursor>:
 * [In] row		: Indicates the row required.
 * [In] column	: Indicates the column required.
 * [Return]		: Void.
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <LCD_moveCursor+0x6>
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <LCD_moveCursor+0x8>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	6a 83       	std	Y+2, r22	; 0x02
	/* Calculate the address in the LCD DDRAM, */
	/* then move the LCD cursor to this specific address. */
	switch (row)
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	3c 83       	std	Y+4, r19	; 0x04
    2d74:	2b 83       	std	Y+3, r18	; 0x03
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	d1 f0       	breq	.+52     	; 0x2db4 <LCD_moveCursor+0x58>
    2d80:	2b 81       	ldd	r18, Y+3	; 0x03
    2d82:	3c 81       	ldd	r19, Y+4	; 0x04
    2d84:	22 30       	cpi	r18, 0x02	; 2
    2d86:	31 05       	cpc	r19, r1
    2d88:	2c f4       	brge	.+10     	; 0x2d94 <LCD_moveCursor+0x38>
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	61 f0       	breq	.+24     	; 0x2daa <LCD_moveCursor+0x4e>
    2d92:	21 c0       	rjmp	.+66     	; 0x2dd6 <LCD_moveCursor+0x7a>
    2d94:	2b 81       	ldd	r18, Y+3	; 0x03
    2d96:	3c 81       	ldd	r19, Y+4	; 0x04
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	89 f0       	breq	.+34     	; 0x2dc0 <LCD_moveCursor+0x64>
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	83 30       	cpi	r24, 0x03	; 3
    2da4:	91 05       	cpc	r25, r1
    2da6:	91 f0       	breq	.+36     	; 0x2dcc <LCD_moveCursor+0x70>
    2da8:	16 c0       	rjmp	.+44     	; 0x2dd6 <LCD_moveCursor+0x7a>
	{
		case 0:
			LCD_sendCommand(column | LCD_SET_CURSOR_LOCATION);
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	80 68       	ori	r24, 0x80	; 128
    2dae:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
    2db2:	11 c0       	rjmp	.+34     	; 0x2dd6 <LCD_moveCursor+0x7a>
		break;
		case 1:
			LCD_sendCommand((column + 0x40) | LCD_SET_CURSOR_LOCATION);
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	80 5c       	subi	r24, 0xC0	; 192
    2db8:	80 68       	ori	r24, 0x80	; 128
    2dba:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
    2dbe:	0b c0       	rjmp	.+22     	; 0x2dd6 <LCD_moveCursor+0x7a>
		break;
		case 2:
			LCD_sendCommand((column + 0x10) | LCD_SET_CURSOR_LOCATION);
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	80 5f       	subi	r24, 0xF0	; 240
    2dc4:	80 68       	ori	r24, 0x80	; 128
    2dc6:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
    2dca:	05 c0       	rjmp	.+10     	; 0x2dd6 <LCD_moveCursor+0x7a>
		break;
		case 3:
			LCD_sendCommand((column + 0x50) | LCD_SET_CURSOR_LOCATION);
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	80 5b       	subi	r24, 0xB0	; 176
    2dd0:	80 68       	ori	r24, 0x80	; 128
    2dd2:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
		break;
	}
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LCD_displayStringRowColumn>:
 * [In] column	: Indicates the column required.
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *string)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <LCD_displayStringRowColumn+0x6>
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <LCD_displayStringRowColumn+0x8>
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	6a 83       	std	Y+2, r22	; 0x02
    2df4:	5c 83       	std	Y+4, r21	; 0x04
    2df6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column); /* Go to to the specified LCD position */
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	6a 81       	ldd	r22, Y+2	; 0x02
    2dfc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_moveCursor>
	LCD_displayString(string); /* Display string */
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <LCD_intgerToString>:
 * [Args]	:
 * [In] data	: Indicates the decimal value required.
 * [Return]		: Void.
 */
void LCD_intgerToString(uint16 data)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	62 97       	sbiw	r28, 0x12	; 18
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	9a 8b       	std	Y+18, r25	; 0x12
    2e2c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; /* Hold the ASCII result */
	itoa(data, buffer, 10); /* Convert data to it's ASCII value - 10 for decimal */
    2e2e:	89 89       	ldd	r24, Y+17	; 0x11
    2e30:	9a 89       	ldd	r25, Y+18	; 0x12
    2e32:	9e 01       	movw	r18, r28
    2e34:	2f 5f       	subi	r18, 0xFF	; 255
    2e36:	3f 4f       	sbci	r19, 0xFF	; 255
    2e38:	b9 01       	movw	r22, r18
    2e3a:	4a e0       	ldi	r20, 0x0A	; 10
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <itoa>
	LCD_displayString(buffer); /* Display string */
    2e42:	ce 01       	movw	r24, r28
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayString>
}
    2e4a:	62 96       	adiw	r28, 0x12	; 18
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <LCD_clearScreen>:
 * 		Send the clear screen command
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_clearScreen(void)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
}
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <__vector_9>:
 * [Interrupt Vector]	: TIMER1_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer1.
 */
ISR(TIMER1_OVF_vect)
{
    2e70:	1f 92       	push	r1
    2e72:	0f 92       	push	r0
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	0f 92       	push	r0
    2e78:	11 24       	eor	r1, r1
    2e7a:	2f 93       	push	r18
    2e7c:	3f 93       	push	r19
    2e7e:	4f 93       	push	r20
    2e80:	5f 93       	push	r21
    2e82:	6f 93       	push	r22
    2e84:	7f 93       	push	r23
    2e86:	8f 93       	push	r24
    2e88:	9f 93       	push	r25
    2e8a:	af 93       	push	r26
    2e8c:	bf 93       	push	r27
    2e8e:	ef 93       	push	r30
    2e90:	ff 93       	push	r31
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    2e9a:	80 91 3b 01 	lds	r24, 0x013B
    2e9e:	90 91 3c 01 	lds	r25, 0x013C
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	29 f0       	breq	.+10     	; 0x2eb0 <__vector_9+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    2ea6:	e0 91 3b 01 	lds	r30, 0x013B
    2eaa:	f0 91 3c 01 	lds	r31, 0x013C
    2eae:	09 95       	icall
	}
}
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	ff 91       	pop	r31
    2eb6:	ef 91       	pop	r30
    2eb8:	bf 91       	pop	r27
    2eba:	af 91       	pop	r26
    2ebc:	9f 91       	pop	r25
    2ebe:	8f 91       	pop	r24
    2ec0:	7f 91       	pop	r23
    2ec2:	6f 91       	pop	r22
    2ec4:	5f 91       	pop	r21
    2ec6:	4f 91       	pop	r20
    2ec8:	3f 91       	pop	r19
    2eca:	2f 91       	pop	r18
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	0f 90       	pop	r0
    2ed2:	1f 90       	pop	r1
    2ed4:	18 95       	reti

00002ed6 <__vector_7>:
 * [Interrupt Vector]	: TIMER1_COMPA_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit A.
 */
ISR(TIMER1_COMPA_vect)
{
    2ed6:	1f 92       	push	r1
    2ed8:	0f 92       	push	r0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	0f 92       	push	r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	2f 93       	push	r18
    2ee2:	3f 93       	push	r19
    2ee4:	4f 93       	push	r20
    2ee6:	5f 93       	push	r21
    2ee8:	6f 93       	push	r22
    2eea:	7f 93       	push	r23
    2eec:	8f 93       	push	r24
    2eee:	9f 93       	push	r25
    2ef0:	af 93       	push	r26
    2ef2:	bf 93       	push	r27
    2ef4:	ef 93       	push	r30
    2ef6:	ff 93       	push	r31
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitA_Ptr != NULL_PTR) /* If callback function pointer is not void */
    2f00:	80 91 3b 01 	lds	r24, 0x013B
    2f04:	90 91 3c 01 	lds	r25, 0x013C
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	29 f0       	breq	.+10     	; 0x2f16 <__vector_7+0x40>
	{
		(*g_timer1CallBackUnitA_Ptr)(); /* Execute callback function */
    2f0c:	e0 91 3b 01 	lds	r30, 0x013B
    2f10:	f0 91 3c 01 	lds	r31, 0x013C
    2f14:	09 95       	icall
	}
}
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	ff 91       	pop	r31
    2f1c:	ef 91       	pop	r30
    2f1e:	bf 91       	pop	r27
    2f20:	af 91       	pop	r26
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	7f 91       	pop	r23
    2f28:	6f 91       	pop	r22
    2f2a:	5f 91       	pop	r21
    2f2c:	4f 91       	pop	r20
    2f2e:	3f 91       	pop	r19
    2f30:	2f 91       	pop	r18
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <__vector_8>:
 * [Interrupt Vector]	: TIMER1_COMPB_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer1 unit B.
 */
ISR(TIMER1_COMPB_vect)
{
    2f3c:	1f 92       	push	r1
    2f3e:	0f 92       	push	r0
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	0f 92       	push	r0
    2f44:	11 24       	eor	r1, r1
    2f46:	2f 93       	push	r18
    2f48:	3f 93       	push	r19
    2f4a:	4f 93       	push	r20
    2f4c:	5f 93       	push	r21
    2f4e:	6f 93       	push	r22
    2f50:	7f 93       	push	r23
    2f52:	8f 93       	push	r24
    2f54:	9f 93       	push	r25
    2f56:	af 93       	push	r26
    2f58:	bf 93       	push	r27
    2f5a:	ef 93       	push	r30
    2f5c:	ff 93       	push	r31
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackUnitB_Ptr != NULL_PTR) /* If callback function pointer is not void */
    2f66:	80 91 3d 01 	lds	r24, 0x013D
    2f6a:	90 91 3e 01 	lds	r25, 0x013E
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	29 f0       	breq	.+10     	; 0x2f7c <__vector_8+0x40>
	{
		(*g_timer1CallBackUnitB_Ptr)(); /* Execute callback function */
    2f72:	e0 91 3d 01 	lds	r30, 0x013D
    2f76:	f0 91 3e 01 	lds	r31, 0x013E
    2f7a:	09 95       	icall
	}
}
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	ff 91       	pop	r31
    2f82:	ef 91       	pop	r30
    2f84:	bf 91       	pop	r27
    2f86:	af 91       	pop	r26
    2f88:	9f 91       	pop	r25
    2f8a:	8f 91       	pop	r24
    2f8c:	7f 91       	pop	r23
    2f8e:	6f 91       	pop	r22
    2f90:	5f 91       	pop	r21
    2f92:	4f 91       	pop	r20
    2f94:	3f 91       	pop	r19
    2f96:	2f 91       	pop	r18
    2f98:	0f 90       	pop	r0
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	0f 90       	pop	r0
    2f9e:	1f 90       	pop	r1
    2fa0:	18 95       	reti

00002fa2 <Timer1_init>:
#endif

#if (TIMER1_ENABLE == TRUE)

void Timer1_init(const Timer_initConfig *timerConfig)
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	2e 97       	sbiw	r28, 0x0e	; 14
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR1A);
    2fba:	ef e4       	ldi	r30, 0x4F	; 79
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	20 81       	ld	r18, Z
    2fc0:	ef e4       	ldi	r30, 0x4F	; 79
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    2fc6:	ee e4       	ldi	r30, 0x4E	; 78
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	30 81       	ld	r19, Z
    2fcc:	ee e4       	ldi	r30, 0x4E	; 78
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    2fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd6:	80 81       	ld	r24, Z
    2fd8:	8f 70       	andi	r24, 0x0F	; 15
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	3c 87       	std	Y+12, r19	; 0x0c
    2fe0:	2b 87       	std	Y+11, r18	; 0x0b
    2fe2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fe4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fe6:	87 30       	cpi	r24, 0x07	; 7
    2fe8:	91 05       	cpc	r25, r1
    2fea:	09 f4       	brne	.+2      	; 0x2fee <Timer1_init+0x4c>
    2fec:	40 c1       	rjmp	.+640    	; 0x326e <Timer1_init+0x2cc>
    2fee:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ff0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ff2:	28 30       	cpi	r18, 0x08	; 8
    2ff4:	31 05       	cpc	r19, r1
    2ff6:	4c f5       	brge	.+82     	; 0x304a <Timer1_init+0xa8>
    2ff8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ffa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ffc:	83 30       	cpi	r24, 0x03	; 3
    2ffe:	91 05       	cpc	r25, r1
    3000:	09 f4       	brne	.+2      	; 0x3004 <Timer1_init+0x62>
    3002:	b3 c0       	rjmp	.+358    	; 0x316a <Timer1_init+0x1c8>
    3004:	2b 85       	ldd	r18, Y+11	; 0x0b
    3006:	3c 85       	ldd	r19, Y+12	; 0x0c
    3008:	24 30       	cpi	r18, 0x04	; 4
    300a:	31 05       	cpc	r19, r1
    300c:	8c f4       	brge	.+34     	; 0x3030 <Timer1_init+0x8e>
    300e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3010:	9c 85       	ldd	r25, Y+12	; 0x0c
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	91 05       	cpc	r25, r1
    3016:	09 f4       	brne	.+2      	; 0x301a <Timer1_init+0x78>
    3018:	6e c0       	rjmp	.+220    	; 0x30f6 <Timer1_init+0x154>
    301a:	2b 85       	ldd	r18, Y+11	; 0x0b
    301c:	3c 85       	ldd	r19, Y+12	; 0x0c
    301e:	22 30       	cpi	r18, 0x02	; 2
    3020:	31 05       	cpc	r19, r1
    3022:	0c f0       	brlt	.+2      	; 0x3026 <Timer1_init+0x84>
    3024:	85 c0       	rjmp	.+266    	; 0x3130 <Timer1_init+0x18e>
    3026:	8b 85       	ldd	r24, Y+11	; 0x0b
    3028:	9c 85       	ldd	r25, Y+12	; 0x0c
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	c9 f1       	breq	.+114    	; 0x30a0 <Timer1_init+0xfe>
    302e:	14 c2       	rjmp	.+1064   	; 0x3458 <Timer1_init+0x4b6>
    3030:	2b 85       	ldd	r18, Y+11	; 0x0b
    3032:	3c 85       	ldd	r19, Y+12	; 0x0c
    3034:	25 30       	cpi	r18, 0x05	; 5
    3036:	31 05       	cpc	r19, r1
    3038:	09 f4       	brne	.+2      	; 0x303c <Timer1_init+0x9a>
    303a:	df c0       	rjmp	.+446    	; 0x31fa <Timer1_init+0x258>
    303c:	8b 85       	ldd	r24, Y+11	; 0x0b
    303e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3040:	86 30       	cpi	r24, 0x06	; 6
    3042:	91 05       	cpc	r25, r1
    3044:	0c f0       	brlt	.+2      	; 0x3048 <Timer1_init+0xa6>
    3046:	f6 c0       	rjmp	.+492    	; 0x3234 <Timer1_init+0x292>
    3048:	ad c0       	rjmp	.+346    	; 0x31a4 <Timer1_init+0x202>
    304a:	2b 85       	ldd	r18, Y+11	; 0x0b
    304c:	3c 85       	ldd	r19, Y+12	; 0x0c
    304e:	2b 30       	cpi	r18, 0x0B	; 11
    3050:	31 05       	cpc	r19, r1
    3052:	09 f4       	brne	.+2      	; 0x3056 <Timer1_init+0xb4>
    3054:	80 c1       	rjmp	.+768    	; 0x3356 <Timer1_init+0x3b4>
    3056:	8b 85       	ldd	r24, Y+11	; 0x0b
    3058:	9c 85       	ldd	r25, Y+12	; 0x0c
    305a:	8c 30       	cpi	r24, 0x0C	; 12
    305c:	91 05       	cpc	r25, r1
    305e:	6c f4       	brge	.+26     	; 0x307a <Timer1_init+0xd8>
    3060:	2b 85       	ldd	r18, Y+11	; 0x0b
    3062:	3c 85       	ldd	r19, Y+12	; 0x0c
    3064:	29 30       	cpi	r18, 0x09	; 9
    3066:	31 05       	cpc	r19, r1
    3068:	09 f4       	brne	.+2      	; 0x306c <Timer1_init+0xca>
    306a:	3b c1       	rjmp	.+630    	; 0x32e2 <Timer1_init+0x340>
    306c:	8b 85       	ldd	r24, Y+11	; 0x0b
    306e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3070:	8a 30       	cpi	r24, 0x0A	; 10
    3072:	91 05       	cpc	r25, r1
    3074:	0c f0       	brlt	.+2      	; 0x3078 <Timer1_init+0xd6>
    3076:	52 c1       	rjmp	.+676    	; 0x331c <Timer1_init+0x37a>
    3078:	17 c1       	rjmp	.+558    	; 0x32a8 <Timer1_init+0x306>
    307a:	2b 85       	ldd	r18, Y+11	; 0x0b
    307c:	3c 85       	ldd	r19, Y+12	; 0x0c
    307e:	2e 30       	cpi	r18, 0x0E	; 14
    3080:	31 05       	cpc	r19, r1
    3082:	09 f4       	brne	.+2      	; 0x3086 <Timer1_init+0xe4>
    3084:	b0 c1       	rjmp	.+864    	; 0x33e6 <Timer1_init+0x444>
    3086:	8b 85       	ldd	r24, Y+11	; 0x0b
    3088:	9c 85       	ldd	r25, Y+12	; 0x0c
    308a:	8f 30       	cpi	r24, 0x0F	; 15
    308c:	91 05       	cpc	r25, r1
    308e:	09 f4       	brne	.+2      	; 0x3092 <Timer1_init+0xf0>
    3090:	c7 c1       	rjmp	.+910    	; 0x3420 <Timer1_init+0x47e>
    3092:	2b 85       	ldd	r18, Y+11	; 0x0b
    3094:	3c 85       	ldd	r19, Y+12	; 0x0c
    3096:	2c 30       	cpi	r18, 0x0C	; 12
    3098:	31 05       	cpc	r19, r1
    309a:	09 f4       	brne	.+2      	; 0x309e <Timer1_init+0xfc>
    309c:	79 c1       	rjmp	.+754    	; 0x3390 <Timer1_init+0x3ee>
    309e:	dc c1       	rjmp	.+952    	; 0x3458 <Timer1_init+0x4b6>
	{
		case TIMER16BIT_NORMAL:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    30a0:	af e4       	ldi	r26, 0x4F	; 79
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	ef e4       	ldi	r30, 0x4F	; 79
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	88 60       	ori	r24, 0x08	; 8
    30ac:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    30ae:	af e4       	ldi	r26, 0x4F	; 79
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	ef e4       	ldi	r30, 0x4F	; 79
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	84 60       	ori	r24, 0x04	; 4
    30ba:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    30bc:	ae e4       	ldi	r26, 0x4E	; 78
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	ee e4       	ldi	r30, 0x4E	; 78
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	8f 7e       	andi	r24, 0xEF	; 239
    30c8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    30ca:	ae e4       	ldi	r26, 0x4E	; 78
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	ee e4       	ldi	r30, 0x4E	; 78
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	87 7f       	andi	r24, 0xF7	; 247
    30d6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    30d8:	af e4       	ldi	r26, 0x4F	; 79
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	ef e4       	ldi	r30, 0x4F	; 79
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	8d 7f       	andi	r24, 0xFD	; 253
    30e4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    30e6:	af e4       	ldi	r26, 0x4F	; 79
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	ef e4       	ldi	r30, 0x4F	; 79
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	8e 7f       	andi	r24, 0xFE	; 254
    30f2:	8c 93       	st	X, r24
    30f4:	b1 c1       	rjmp	.+866    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    30f6:	ae e4       	ldi	r26, 0x4E	; 78
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	ee e4       	ldi	r30, 0x4E	; 78
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	8f 7e       	andi	r24, 0xEF	; 239
    3102:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    3104:	ae e4       	ldi	r26, 0x4E	; 78
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	ee e4       	ldi	r30, 0x4E	; 78
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	87 7f       	andi	r24, 0xF7	; 247
    3110:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    3112:	af e4       	ldi	r26, 0x4F	; 79
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ef e4       	ldi	r30, 0x4F	; 79
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	8d 7f       	andi	r24, 0xFD	; 253
    311e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    3120:	af e4       	ldi	r26, 0x4F	; 79
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	ef e4       	ldi	r30, 0x4F	; 79
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	81 60       	ori	r24, 0x01	; 1
    312c:	8c 93       	st	X, r24
    312e:	94 c1       	rjmp	.+808    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    3130:	ae e4       	ldi	r26, 0x4E	; 78
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	ee e4       	ldi	r30, 0x4E	; 78
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	8f 7e       	andi	r24, 0xEF	; 239
    313c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    313e:	ae e4       	ldi	r26, 0x4E	; 78
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	ee e4       	ldi	r30, 0x4E	; 78
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	87 7f       	andi	r24, 0xF7	; 247
    314a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    314c:	af e4       	ldi	r26, 0x4F	; 79
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	ef e4       	ldi	r30, 0x4F	; 79
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	82 60       	ori	r24, 0x02	; 2
    3158:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    315a:	af e4       	ldi	r26, 0x4F	; 79
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	ef e4       	ldi	r30, 0x4F	; 79
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	8e 7f       	andi	r24, 0xFE	; 254
    3166:	8c 93       	st	X, r24
    3168:	77 c1       	rjmp	.+750    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    316a:	ae e4       	ldi	r26, 0x4E	; 78
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	ee e4       	ldi	r30, 0x4E	; 78
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	8f 7e       	andi	r24, 0xEF	; 239
    3176:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    3178:	ae e4       	ldi	r26, 0x4E	; 78
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	ee e4       	ldi	r30, 0x4E	; 78
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	87 7f       	andi	r24, 0xF7	; 247
    3184:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    3186:	af e4       	ldi	r26, 0x4F	; 79
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	ef e4       	ldi	r30, 0x4F	; 79
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	82 60       	ori	r24, 0x02	; 2
    3192:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    3194:	af e4       	ldi	r26, 0x4F	; 79
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	ef e4       	ldi	r30, 0x4F	; 79
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	81 60       	ori	r24, 0x01	; 1
    31a0:	8c 93       	st	X, r24
    31a2:	5a c1       	rjmp	.+692    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_OCR1A:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    31a4:	af e4       	ldi	r26, 0x4F	; 79
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	ef e4       	ldi	r30, 0x4F	; 79
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	88 60       	ori	r24, 0x08	; 8
    31b0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    31b2:	af e4       	ldi	r26, 0x4F	; 79
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	ef e4       	ldi	r30, 0x4F	; 79
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	84 60       	ori	r24, 0x04	; 4
    31be:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    31c0:	ae e4       	ldi	r26, 0x4E	; 78
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	ee e4       	ldi	r30, 0x4E	; 78
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	8f 7e       	andi	r24, 0xEF	; 239
    31cc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    31ce:	ae e4       	ldi	r26, 0x4E	; 78
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	ee e4       	ldi	r30, 0x4E	; 78
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	88 60       	ori	r24, 0x08	; 8
    31da:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    31dc:	af e4       	ldi	r26, 0x4F	; 79
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	ef e4       	ldi	r30, 0x4F	; 79
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	8d 7f       	andi	r24, 0xFD	; 253
    31e8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    31ea:	af e4       	ldi	r26, 0x4F	; 79
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	ef e4       	ldi	r30, 0x4F	; 79
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	8e 7f       	andi	r24, 0xFE	; 254
    31f6:	8c 93       	st	X, r24
    31f8:	2f c1       	rjmp	.+606    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_8BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    31fa:	ae e4       	ldi	r26, 0x4E	; 78
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	ee e4       	ldi	r30, 0x4E	; 78
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8f 7e       	andi	r24, 0xEF	; 239
    3206:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    3208:	ae e4       	ldi	r26, 0x4E	; 78
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	ee e4       	ldi	r30, 0x4E	; 78
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	88 60       	ori	r24, 0x08	; 8
    3214:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    3216:	af e4       	ldi	r26, 0x4F	; 79
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	ef e4       	ldi	r30, 0x4F	; 79
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	8d 7f       	andi	r24, 0xFD	; 253
    3222:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    3224:	af e4       	ldi	r26, 0x4F	; 79
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	ef e4       	ldi	r30, 0x4F	; 79
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	81 60       	ori	r24, 0x01	; 1
    3230:	8c 93       	st	X, r24
    3232:	12 c1       	rjmp	.+548    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_9BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    3234:	ae e4       	ldi	r26, 0x4E	; 78
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	ee e4       	ldi	r30, 0x4E	; 78
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	8f 7e       	andi	r24, 0xEF	; 239
    3240:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    3242:	ae e4       	ldi	r26, 0x4E	; 78
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	ee e4       	ldi	r30, 0x4E	; 78
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	88 60       	ori	r24, 0x08	; 8
    324e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    3250:	af e4       	ldi	r26, 0x4F	; 79
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	ef e4       	ldi	r30, 0x4F	; 79
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	82 60       	ori	r24, 0x02	; 2
    325c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    325e:	af e4       	ldi	r26, 0x4F	; 79
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	ef e4       	ldi	r30, 0x4F	; 79
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	8e 7f       	andi	r24, 0xFE	; 254
    326a:	8c 93       	st	X, r24
    326c:	f5 c0       	rjmp	.+490    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_10BIT:
			CLEAR_BIT(TCCR1B, WGM13);
    326e:	ae e4       	ldi	r26, 0x4E	; 78
    3270:	b0 e0       	ldi	r27, 0x00	; 0
    3272:	ee e4       	ldi	r30, 0x4E	; 78
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	80 81       	ld	r24, Z
    3278:	8f 7e       	andi	r24, 0xEF	; 239
    327a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    327c:	ae e4       	ldi	r26, 0x4E	; 78
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	ee e4       	ldi	r30, 0x4E	; 78
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	88 60       	ori	r24, 0x08	; 8
    3288:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    328a:	af e4       	ldi	r26, 0x4F	; 79
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	ef e4       	ldi	r30, 0x4F	; 79
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	82 60       	ori	r24, 0x02	; 2
    3296:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    3298:	af e4       	ldi	r26, 0x4F	; 79
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	ef e4       	ldi	r30, 0x4F	; 79
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	81 60       	ori	r24, 0x01	; 1
    32a4:	8c 93       	st	X, r24
    32a6:	d8 c0       	rjmp	.+432    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    32a8:	ae e4       	ldi	r26, 0x4E	; 78
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	ee e4       	ldi	r30, 0x4E	; 78
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	80 61       	ori	r24, 0x10	; 16
    32b4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    32b6:	ae e4       	ldi	r26, 0x4E	; 78
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	ee e4       	ldi	r30, 0x4E	; 78
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	87 7f       	andi	r24, 0xF7	; 247
    32c2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    32c4:	af e4       	ldi	r26, 0x4F	; 79
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	ef e4       	ldi	r30, 0x4F	; 79
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	8d 7f       	andi	r24, 0xFD	; 253
    32d0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    32d2:	af e4       	ldi	r26, 0x4F	; 79
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	ef e4       	ldi	r30, 0x4F	; 79
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	8e 7f       	andi	r24, 0xFE	; 254
    32de:	8c 93       	st	X, r24
    32e0:	bb c0       	rjmp	.+374    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_FREQ_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    32e2:	ae e4       	ldi	r26, 0x4E	; 78
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	ee e4       	ldi	r30, 0x4E	; 78
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	80 61       	ori	r24, 0x10	; 16
    32ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    32f0:	ae e4       	ldi	r26, 0x4E	; 78
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	ee e4       	ldi	r30, 0x4E	; 78
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	87 7f       	andi	r24, 0xF7	; 247
    32fc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    32fe:	af e4       	ldi	r26, 0x4F	; 79
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	ef e4       	ldi	r30, 0x4F	; 79
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8d 7f       	andi	r24, 0xFD	; 253
    330a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    330c:	af e4       	ldi	r26, 0x4F	; 79
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ef e4       	ldi	r30, 0x4F	; 79
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	81 60       	ori	r24, 0x01	; 1
    3318:	8c 93       	st	X, r24
    331a:	9e c0       	rjmp	.+316    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    331c:	ae e4       	ldi	r26, 0x4E	; 78
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	ee e4       	ldi	r30, 0x4E	; 78
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	80 61       	ori	r24, 0x10	; 16
    3328:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    332a:	ae e4       	ldi	r26, 0x4E	; 78
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	ee e4       	ldi	r30, 0x4E	; 78
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	87 7f       	andi	r24, 0xF7	; 247
    3336:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    3338:	af e4       	ldi	r26, 0x4F	; 79
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	ef e4       	ldi	r30, 0x4F	; 79
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	82 60       	ori	r24, 0x02	; 2
    3344:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    3346:	af e4       	ldi	r26, 0x4F	; 79
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	ef e4       	ldi	r30, 0x4F	; 79
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	8e 7f       	andi	r24, 0xFE	; 254
    3352:	8c 93       	st	X, r24
    3354:	81 c0       	rjmp	.+258    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_PHASE_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    3356:	ae e4       	ldi	r26, 0x4E	; 78
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	ee e4       	ldi	r30, 0x4E	; 78
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	80 61       	ori	r24, 0x10	; 16
    3362:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    3364:	ae e4       	ldi	r26, 0x4E	; 78
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	ee e4       	ldi	r30, 0x4E	; 78
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	87 7f       	andi	r24, 0xF7	; 247
    3370:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    3372:	af e4       	ldi	r26, 0x4F	; 79
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ef e4       	ldi	r30, 0x4F	; 79
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	82 60       	ori	r24, 0x02	; 2
    337e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    3380:	af e4       	ldi	r26, 0x4F	; 79
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	ef e4       	ldi	r30, 0x4F	; 79
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	81 60       	ori	r24, 0x01	; 1
    338c:	8c 93       	st	X, r24
    338e:	64 c0       	rjmp	.+200    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_CTC_ICR1:
			SET_BIT(TCCR1A, FOC1A); /* Only enable in non-PWM mode */
    3390:	af e4       	ldi	r26, 0x4F	; 79
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	ef e4       	ldi	r30, 0x4F	; 79
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	88 60       	ori	r24, 0x08	; 8
    339c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B); /* Only enable in non-PWM mode */
    339e:	af e4       	ldi	r26, 0x4F	; 79
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	ef e4       	ldi	r30, 0x4F	; 79
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	84 60       	ori	r24, 0x04	; 4
    33aa:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    33ac:	ae e4       	ldi	r26, 0x4E	; 78
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	ee e4       	ldi	r30, 0x4E	; 78
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	80 61       	ori	r24, 0x10	; 16
    33b8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    33ba:	ae e4       	ldi	r26, 0x4E	; 78
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	ee e4       	ldi	r30, 0x4E	; 78
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	88 60       	ori	r24, 0x08	; 8
    33c6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    33c8:	af e4       	ldi	r26, 0x4F	; 79
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	ef e4       	ldi	r30, 0x4F	; 79
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	8d 7f       	andi	r24, 0xFD	; 253
    33d4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    33d6:	af e4       	ldi	r26, 0x4F	; 79
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	ef e4       	ldi	r30, 0x4F	; 79
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	8e 7f       	andi	r24, 0xFE	; 254
    33e2:	8c 93       	st	X, r24
    33e4:	39 c0       	rjmp	.+114    	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_ICR1:
			SET_BIT(TCCR1B, WGM13);
    33e6:	ae e4       	ldi	r26, 0x4E	; 78
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	ee e4       	ldi	r30, 0x4E	; 78
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	80 61       	ori	r24, 0x10	; 16
    33f2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    33f4:	ae e4       	ldi	r26, 0x4E	; 78
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	ee e4       	ldi	r30, 0x4E	; 78
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	88 60       	ori	r24, 0x08	; 8
    3400:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    3402:	af e4       	ldi	r26, 0x4F	; 79
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	ef e4       	ldi	r30, 0x4F	; 79
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 81       	ld	r24, Z
    340c:	82 60       	ori	r24, 0x02	; 2
    340e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM10);
    3410:	af e4       	ldi	r26, 0x4F	; 79
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	ef e4       	ldi	r30, 0x4F	; 79
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	8e 7f       	andi	r24, 0xFE	; 254
    341c:	8c 93       	st	X, r24
    341e:	1c c0       	rjmp	.+56     	; 0x3458 <Timer1_init+0x4b6>
		break;
		case TIMER16BIT_FAST_PWM_OCR1A:
			SET_BIT(TCCR1B, WGM13);
    3420:	ae e4       	ldi	r26, 0x4E	; 78
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	ee e4       	ldi	r30, 0x4E	; 78
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	80 61       	ori	r24, 0x10	; 16
    342c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    342e:	ae e4       	ldi	r26, 0x4E	; 78
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	ee e4       	ldi	r30, 0x4E	; 78
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	88 60       	ori	r24, 0x08	; 8
    343a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    343c:	af e4       	ldi	r26, 0x4F	; 79
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	ef e4       	ldi	r30, 0x4F	; 79
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	82 60       	ori	r24, 0x02	; 2
    3448:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM10);
    344a:	af e4       	ldi	r26, 0x4F	; 79
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	ef e4       	ldi	r30, 0x4F	; 79
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	81 60       	ori	r24, 0x01	; 1
    3456:	8c 93       	st	X, r24
		break;
	}
	if (((*timerConfig).mode == TIMER16BIT_CTC_OCR1A)
    3458:	e9 81       	ldd	r30, Y+1	; 0x01
    345a:	fa 81       	ldd	r31, Y+2	; 0x02
    345c:	80 81       	ld	r24, Z
    345e:	8f 70       	andi	r24, 0x0F	; 15
    3460:	84 30       	cpi	r24, 0x04	; 4
    3462:	39 f0       	breq	.+14     	; 0x3472 <Timer1_init+0x4d0>
    3464:	e9 81       	ldd	r30, Y+1	; 0x01
    3466:	fa 81       	ldd	r31, Y+2	; 0x02
    3468:	80 81       	ld	r24, Z
    346a:	8f 70       	andi	r24, 0x0F	; 15
    346c:	8c 30       	cpi	r24, 0x0C	; 12
    346e:	09 f0       	breq	.+2      	; 0x3472 <Timer1_init+0x4d0>
    3470:	f8 c0       	rjmp	.+496    	; 0x3662 <Timer1_init+0x6c0>
			|| ((*timerConfig).mode == TIMER16BIT_CTC_ICR1))
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    3472:	e9 81       	ldd	r30, Y+1	; 0x01
    3474:	fa 81       	ldd	r31, Y+2	; 0x02
    3476:	80 81       	ld	r24, Z
    3478:	82 95       	swap	r24
    347a:	86 95       	lsr	r24
    347c:	86 95       	lsr	r24
    347e:	83 70       	andi	r24, 0x03	; 3
    3480:	81 70       	andi	r24, 0x01	; 1
    3482:	28 2f       	mov	r18, r24
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	3a 87       	std	Y+10, r19	; 0x0a
    3488:	29 87       	std	Y+9, r18	; 0x09
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	d9 f0       	breq	.+54     	; 0x34c8 <Timer1_init+0x526>
    3492:	29 85       	ldd	r18, Y+9	; 0x09
    3494:	3a 85       	ldd	r19, Y+10	; 0x0a
    3496:	21 30       	cpi	r18, 0x01	; 1
    3498:	31 05       	cpc	r19, r1
    349a:	59 f5       	brne	.+86     	; 0x34f2 <Timer1_init+0x550>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE1A);
    349c:	a9 e5       	ldi	r26, 0x59	; 89
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e9 e5       	ldi	r30, 0x59	; 89
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	80 61       	ori	r24, 0x10	; 16
    34a8:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B);
    34aa:	a9 e5       	ldi	r26, 0x59	; 89
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	e9 e5       	ldi	r30, 0x59	; 89
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	88 60       	ori	r24, 0x08	; 8
    34b6:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    34b8:	a9 e5       	ldi	r26, 0x59	; 89
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e9 e5       	ldi	r30, 0x59	; 89
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	8b 7f       	andi	r24, 0xFB	; 251
    34c4:	8c 93       	st	X, r24
    34c6:	15 c0       	rjmp	.+42     	; 0x34f2 <Timer1_init+0x550>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    34c8:	a9 e5       	ldi	r26, 0x59	; 89
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	e9 e5       	ldi	r30, 0x59	; 89
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	8f 7e       	andi	r24, 0xEF	; 239
    34d4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    34d6:	a9 e5       	ldi	r26, 0x59	; 89
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	e9 e5       	ldi	r30, 0x59	; 89
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	87 7f       	andi	r24, 0xF7	; 247
    34e2:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    34e4:	a9 e5       	ldi	r26, 0x59	; 89
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e9 e5       	ldi	r30, 0x59	; 89
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	8b 7f       	andi	r24, 0xFB	; 251
    34f0:	8c 93       	st	X, r24
			break;
		}
		/* Select compare mode */
		switch ((*timerConfig).compareOutputMode)
    34f2:	e9 81       	ldd	r30, Y+1	; 0x01
    34f4:	fa 81       	ldd	r31, Y+2	; 0x02
    34f6:	80 81       	ld	r24, Z
    34f8:	82 95       	swap	r24
    34fa:	8f 70       	andi	r24, 0x0F	; 15
    34fc:	83 70       	andi	r24, 0x03	; 3
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	38 87       	std	Y+8, r19	; 0x08
    3504:	2f 83       	std	Y+7, r18	; 0x07
    3506:	8f 81       	ldd	r24, Y+7	; 0x07
    3508:	98 85       	ldd	r25, Y+8	; 0x08
    350a:	81 30       	cpi	r24, 0x01	; 1
    350c:	91 05       	cpc	r25, r1
    350e:	a1 f1       	breq	.+104    	; 0x3578 <Timer1_init+0x5d6>
    3510:	2f 81       	ldd	r18, Y+7	; 0x07
    3512:	38 85       	ldd	r19, Y+8	; 0x08
    3514:	22 30       	cpi	r18, 0x02	; 2
    3516:	31 05       	cpc	r19, r1
    3518:	2c f4       	brge	.+10     	; 0x3524 <Timer1_init+0x582>
    351a:	8f 81       	ldd	r24, Y+7	; 0x07
    351c:	98 85       	ldd	r25, Y+8	; 0x08
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	71 f0       	breq	.+28     	; 0x353e <Timer1_init+0x59c>
    3522:	a3 c1       	rjmp	.+838    	; 0x386a <Timer1_init+0x8c8>
    3524:	2f 81       	ldd	r18, Y+7	; 0x07
    3526:	38 85       	ldd	r19, Y+8	; 0x08
    3528:	22 30       	cpi	r18, 0x02	; 2
    352a:	31 05       	cpc	r19, r1
    352c:	09 f4       	brne	.+2      	; 0x3530 <Timer1_init+0x58e>
    352e:	4b c0       	rjmp	.+150    	; 0x35c6 <Timer1_init+0x624>
    3530:	8f 81       	ldd	r24, Y+7	; 0x07
    3532:	98 85       	ldd	r25, Y+8	; 0x08
    3534:	83 30       	cpi	r24, 0x03	; 3
    3536:	91 05       	cpc	r25, r1
    3538:	09 f4       	brne	.+2      	; 0x353c <Timer1_init+0x59a>
    353a:	6c c0       	rjmp	.+216    	; 0x3614 <Timer1_init+0x672>
    353c:	96 c1       	rjmp	.+812    	; 0x386a <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    353e:	af e4       	ldi	r26, 0x4F	; 79
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	ef e4       	ldi	r30, 0x4F	; 79
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	8f 77       	andi	r24, 0x7F	; 127
    354a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    354c:	af e4       	ldi	r26, 0x4F	; 79
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	ef e4       	ldi	r30, 0x4F	; 79
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	8f 7d       	andi	r24, 0xDF	; 223
    3558:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    355a:	af e4       	ldi	r26, 0x4F	; 79
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	ef e4       	ldi	r30, 0x4F	; 79
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	8f 7b       	andi	r24, 0xBF	; 191
    3566:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    3568:	af e4       	ldi	r26, 0x4F	; 79
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	ef e4       	ldi	r30, 0x4F	; 79
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	8f 7e       	andi	r24, 0xEF	; 239
    3574:	8c 93       	st	X, r24
    3576:	79 c1       	rjmp	.+754    	; 0x386a <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    3578:	af e4       	ldi	r26, 0x4F	; 79
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	ef e4       	ldi	r30, 0x4F	; 79
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	8f 77       	andi	r24, 0x7F	; 127
    3584:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    3586:	af e4       	ldi	r26, 0x4F	; 79
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	ef e4       	ldi	r30, 0x4F	; 79
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	8f 7d       	andi	r24, 0xDF	; 223
    3592:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    3594:	af e4       	ldi	r26, 0x4F	; 79
    3596:	b0 e0       	ldi	r27, 0x00	; 0
    3598:	ef e4       	ldi	r30, 0x4F	; 79
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	80 81       	ld	r24, Z
    359e:	80 64       	ori	r24, 0x40	; 64
    35a0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    35a2:	af e4       	ldi	r26, 0x4F	; 79
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	ef e4       	ldi	r30, 0x4F	; 79
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	80 61       	ori	r24, 0x10	; 16
    35ae:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    35b0:	83 e0       	ldi	r24, 0x03	; 3
    35b2:	64 e0       	ldi	r22, 0x04	; 4
    35b4:	41 e0       	ldi	r20, 0x01	; 1
    35b6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    35ba:	83 e0       	ldi	r24, 0x03	; 3
    35bc:	65 e0       	ldi	r22, 0x05	; 5
    35be:	41 e0       	ldi	r20, 0x01	; 1
    35c0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
    35c4:	52 c1       	rjmp	.+676    	; 0x386a <Timer1_init+0x8c8>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    35c6:	af e4       	ldi	r26, 0x4F	; 79
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	ef e4       	ldi	r30, 0x4F	; 79
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	80 68       	ori	r24, 0x80	; 128
    35d2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    35d4:	af e4       	ldi	r26, 0x4F	; 79
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	ef e4       	ldi	r30, 0x4F	; 79
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	80 62       	ori	r24, 0x20	; 32
    35e0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    35e2:	af e4       	ldi	r26, 0x4F	; 79
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	ef e4       	ldi	r30, 0x4F	; 79
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	8f 7b       	andi	r24, 0xBF	; 191
    35ee:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    35f0:	af e4       	ldi	r26, 0x4F	; 79
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	ef e4       	ldi	r30, 0x4F	; 79
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	8f 7e       	andi	r24, 0xEF	; 239
    35fc:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    35fe:	83 e0       	ldi	r24, 0x03	; 3
    3600:	64 e0       	ldi	r22, 0x04	; 4
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    3608:	83 e0       	ldi	r24, 0x03	; 3
    360a:	65 e0       	ldi	r22, 0x05	; 5
    360c:	41 e0       	ldi	r20, 0x01	; 1
    360e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
    3612:	2b c1       	rjmp	.+598    	; 0x386a <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    3614:	af e4       	ldi	r26, 0x4F	; 79
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	ef e4       	ldi	r30, 0x4F	; 79
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	80 68       	ori	r24, 0x80	; 128
    3620:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    3622:	af e4       	ldi	r26, 0x4F	; 79
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	ef e4       	ldi	r30, 0x4F	; 79
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	80 62       	ori	r24, 0x20	; 32
    362e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    3630:	af e4       	ldi	r26, 0x4F	; 79
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	ef e4       	ldi	r30, 0x4F	; 79
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	80 64       	ori	r24, 0x40	; 64
    363c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    363e:	af e4       	ldi	r26, 0x4F	; 79
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	ef e4       	ldi	r30, 0x4F	; 79
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	80 61       	ori	r24, 0x10	; 16
    364a:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    364c:	83 e0       	ldi	r24, 0x03	; 3
    364e:	64 e0       	ldi	r22, 0x04	; 4
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    3656:	83 e0       	ldi	r24, 0x03	; 3
    3658:	65 e0       	ldi	r22, 0x05	; 5
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
    3660:	04 c1       	rjmp	.+520    	; 0x386a <Timer1_init+0x8c8>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    3662:	e9 81       	ldd	r30, Y+1	; 0x01
    3664:	fa 81       	ldd	r31, Y+2	; 0x02
    3666:	80 81       	ld	r24, Z
    3668:	82 95       	swap	r24
    366a:	86 95       	lsr	r24
    366c:	86 95       	lsr	r24
    366e:	83 70       	andi	r24, 0x03	; 3
    3670:	81 70       	andi	r24, 0x01	; 1
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	3e 83       	std	Y+6, r19	; 0x06
    3678:	2d 83       	std	Y+5, r18	; 0x05
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	d9 f0       	breq	.+54     	; 0x36b8 <Timer1_init+0x716>
    3682:	2d 81       	ldd	r18, Y+5	; 0x05
    3684:	3e 81       	ldd	r19, Y+6	; 0x06
    3686:	21 30       	cpi	r18, 0x01	; 1
    3688:	31 05       	cpc	r19, r1
    368a:	59 f5       	brne	.+86     	; 0x36e2 <Timer1_init+0x740>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE1A);
    368c:	a9 e5       	ldi	r26, 0x59	; 89
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	e9 e5       	ldi	r30, 0x59	; 89
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	8f 7e       	andi	r24, 0xEF	; 239
    3698:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    369a:	a9 e5       	ldi	r26, 0x59	; 89
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	e9 e5       	ldi	r30, 0x59	; 89
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	87 7f       	andi	r24, 0xF7	; 247
    36a6:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE1);
    36a8:	a9 e5       	ldi	r26, 0x59	; 89
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e9 e5       	ldi	r30, 0x59	; 89
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	84 60       	ori	r24, 0x04	; 4
    36b4:	8c 93       	st	X, r24
    36b6:	15 c0       	rjmp	.+42     	; 0x36e2 <Timer1_init+0x740>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE1A);
    36b8:	a9 e5       	ldi	r26, 0x59	; 89
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	e9 e5       	ldi	r30, 0x59	; 89
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	8f 7e       	andi	r24, 0xEF	; 239
    36c4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, OCIE1B);
    36c6:	a9 e5       	ldi	r26, 0x59	; 89
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	e9 e5       	ldi	r30, 0x59	; 89
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	87 7f       	andi	r24, 0xF7	; 247
    36d2:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE1);
    36d4:	a9 e5       	ldi	r26, 0x59	; 89
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e9 e5       	ldi	r30, 0x59	; 89
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	8b 7f       	andi	r24, 0xFB	; 251
    36e0:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    36e2:	e9 81       	ldd	r30, Y+1	; 0x01
    36e4:	fa 81       	ldd	r31, Y+2	; 0x02
    36e6:	80 81       	ld	r24, Z
    36e8:	82 95       	swap	r24
    36ea:	8f 70       	andi	r24, 0x0F	; 15
    36ec:	83 70       	andi	r24, 0x03	; 3
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	3c 83       	std	Y+4, r19	; 0x04
    36f4:	2b 83       	std	Y+3, r18	; 0x03
    36f6:	8b 81       	ldd	r24, Y+3	; 0x03
    36f8:	9c 81       	ldd	r25, Y+4	; 0x04
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	91 05       	cpc	r25, r1
    36fe:	a1 f1       	breq	.+104    	; 0x3768 <Timer1_init+0x7c6>
    3700:	2b 81       	ldd	r18, Y+3	; 0x03
    3702:	3c 81       	ldd	r19, Y+4	; 0x04
    3704:	22 30       	cpi	r18, 0x02	; 2
    3706:	31 05       	cpc	r19, r1
    3708:	2c f4       	brge	.+10     	; 0x3714 <Timer1_init+0x772>
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	71 f0       	breq	.+28     	; 0x372e <Timer1_init+0x78c>
    3712:	ab c0       	rjmp	.+342    	; 0x386a <Timer1_init+0x8c8>
    3714:	2b 81       	ldd	r18, Y+3	; 0x03
    3716:	3c 81       	ldd	r19, Y+4	; 0x04
    3718:	22 30       	cpi	r18, 0x02	; 2
    371a:	31 05       	cpc	r19, r1
    371c:	09 f4       	brne	.+2      	; 0x3720 <Timer1_init+0x77e>
    371e:	58 c0       	rjmp	.+176    	; 0x37d0 <Timer1_init+0x82e>
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	9c 81       	ldd	r25, Y+4	; 0x04
    3724:	83 30       	cpi	r24, 0x03	; 3
    3726:	91 05       	cpc	r25, r1
    3728:	09 f4       	brne	.+2      	; 0x372c <Timer1_init+0x78a>
    372a:	79 c0       	rjmp	.+242    	; 0x381e <Timer1_init+0x87c>
    372c:	9e c0       	rjmp	.+316    	; 0x386a <Timer1_init+0x8c8>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    372e:	af e4       	ldi	r26, 0x4F	; 79
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	ef e4       	ldi	r30, 0x4F	; 79
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	8f 77       	andi	r24, 0x7F	; 127
    373a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    373c:	af e4       	ldi	r26, 0x4F	; 79
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	ef e4       	ldi	r30, 0x4F	; 79
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	8f 7d       	andi	r24, 0xDF	; 223
    3748:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    374a:	af e4       	ldi	r26, 0x4F	; 79
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	ef e4       	ldi	r30, 0x4F	; 79
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	80 81       	ld	r24, Z
    3754:	8f 7b       	andi	r24, 0xBF	; 191
    3756:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    3758:	af e4       	ldi	r26, 0x4F	; 79
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	ef e4       	ldi	r30, 0x4F	; 79
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	80 81       	ld	r24, Z
    3762:	8f 7e       	andi	r24, 0xEF	; 239
    3764:	8c 93       	st	X, r24
    3766:	81 c0       	rjmp	.+258    	; 0x386a <Timer1_init+0x8c8>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR1A, COM1A1);
    3768:	af e4       	ldi	r26, 0x4F	; 79
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	ef e4       	ldi	r30, 0x4F	; 79
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	8f 77       	andi	r24, 0x7F	; 127
    3774:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B1);
    3776:	af e4       	ldi	r26, 0x4F	; 79
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	ef e4       	ldi	r30, 0x4F	; 79
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	8f 7d       	andi	r24, 0xDF	; 223
    3782:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    3784:	af e4       	ldi	r26, 0x4F	; 79
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	ef e4       	ldi	r30, 0x4F	; 79
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	80 64       	ori	r24, 0x40	; 64
    3790:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    3792:	af e4       	ldi	r26, 0x4F	; 79
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	ef e4       	ldi	r30, 0x4F	; 79
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	80 61       	ori	r24, 0x10	; 16
    379e:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    37a0:	83 e0       	ldi	r24, 0x03	; 3
    37a2:	64 e0       	ldi	r22, 0x04	; 4
    37a4:	41 e0       	ldi	r20, 0x01	; 1
    37a6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
				if ((*timerConfig).mode != TIMER16BIT_PHASE_FREQ_PWM_OCR1A
    37aa:	e9 81       	ldd	r30, Y+1	; 0x01
    37ac:	fa 81       	ldd	r31, Y+2	; 0x02
    37ae:	80 81       	ld	r24, Z
    37b0:	8f 70       	andi	r24, 0x0F	; 15
    37b2:	89 30       	cpi	r24, 0x09	; 9
    37b4:	39 f4       	brne	.+14     	; 0x37c4 <Timer1_init+0x822>
    37b6:	e9 81       	ldd	r30, Y+1	; 0x01
    37b8:	fa 81       	ldd	r31, Y+2	; 0x02
    37ba:	80 81       	ld	r24, Z
    37bc:	8f 70       	andi	r24, 0x0F	; 15
    37be:	8f 30       	cpi	r24, 0x0F	; 15
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <Timer1_init+0x822>
    37c2:	53 c0       	rjmp	.+166    	; 0x386a <Timer1_init+0x8c8>
						|| (*timerConfig).mode != TIMER16BIT_FAST_PWM_OCR1A)
				{
					GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    37c4:	83 e0       	ldi	r24, 0x03	; 3
    37c6:	65 e0       	ldi	r22, 0x05	; 5
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
    37ce:	4d c0       	rjmp	.+154    	; 0x386a <Timer1_init+0x8c8>
				}
			break;
			case CLEAR_OC:
				SET_BIT(TCCR1A, COM1A1);
    37d0:	af e4       	ldi	r26, 0x4F	; 79
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	ef e4       	ldi	r30, 0x4F	; 79
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	80 68       	ori	r24, 0x80	; 128
    37dc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    37de:	af e4       	ldi	r26, 0x4F	; 79
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	ef e4       	ldi	r30, 0x4F	; 79
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	80 81       	ld	r24, Z
    37e8:	80 62       	ori	r24, 0x20	; 32
    37ea:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A0);
    37ec:	af e4       	ldi	r26, 0x4F	; 79
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	ef e4       	ldi	r30, 0x4F	; 79
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	8f 7b       	andi	r24, 0xBF	; 191
    37f8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1B0);
    37fa:	af e4       	ldi	r26, 0x4F	; 79
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	ef e4       	ldi	r30, 0x4F	; 79
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	8f 7e       	andi	r24, 0xEF	; 239
    3806:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    3808:	83 e0       	ldi	r24, 0x03	; 3
    380a:	64 e0       	ldi	r22, 0x04	; 4
    380c:	41 e0       	ldi	r20, 0x01	; 1
    380e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	65 e0       	ldi	r22, 0x05	; 5
    3816:	41 e0       	ldi	r20, 0x01	; 1
    3818:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
    381c:	26 c0       	rjmp	.+76     	; 0x386a <Timer1_init+0x8c8>
			break;
			case SET_OC:
				SET_BIT(TCCR1A, COM1A1);
    381e:	af e4       	ldi	r26, 0x4F	; 79
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	ef e4       	ldi	r30, 0x4F	; 79
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	80 68       	ori	r24, 0x80	; 128
    382a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    382c:	af e4       	ldi	r26, 0x4F	; 79
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	ef e4       	ldi	r30, 0x4F	; 79
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	80 62       	ori	r24, 0x20	; 32
    3838:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    383a:	af e4       	ldi	r26, 0x4F	; 79
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	ef e4       	ldi	r30, 0x4F	; 79
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	80 81       	ld	r24, Z
    3844:	80 64       	ori	r24, 0x40	; 64
    3846:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    3848:	af e4       	ldi	r26, 0x4F	; 79
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	ef e4       	ldi	r30, 0x4F	; 79
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	80 61       	ori	r24, 0x10	; 16
    3854:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    3856:	83 e0       	ldi	r24, 0x03	; 3
    3858:	64 e0       	ldi	r22, 0x04	; 4
    385a:	41 e0       	ldi	r20, 0x01	; 1
    385c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    3860:	83 e0       	ldi	r24, 0x03	; 3
    3862:	65 e0       	ldi	r22, 0x05	; 5
    3864:	41 e0       	ldi	r20, 0x01	; 1
    3866:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GPIO_setupPinDirection>
			break;
		}
	}
}
    386a:	2e 96       	adiw	r28, 0x0e	; 14
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <Timer1_setCallBack>:
 * 		normal mode or compare unit A interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBack(void (*Ptr2Function)(void))
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	00 d0       	rcall	.+0      	; 0x3882 <Timer1_setCallBack+0x6>
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitA_Ptr = Ptr2Function;
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	9a 81       	ldd	r25, Y+2	; 0x02
    388e:	90 93 3c 01 	sts	0x013C, r25
    3892:	80 93 3b 01 	sts	0x013B, r24
}
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <Timer1_setCallBackUnitB>:
 * 		compare unit B interrupt for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_setCallBackUnitB(void (*Ptr2Function)(void))
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <Timer1_setCallBackUnitB+0x6>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	9a 83       	std	Y+2, r25	; 0x02
    38ac:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackUnitB_Ptr = Ptr2Function;
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	9a 81       	ldd	r25, Y+2	; 0x02
    38b2:	90 93 3e 01 	sts	0x013E, r25
    38b6:	80 93 3d 01 	sts	0x013D, r24
}
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <Timer1_start>:
 * [In] compareValueB	: Indicates compare value for unit B.
 * [Return]				: Void.
 */
void Timer1_start(TIMER01_PRESCALER prescaler, uint16 start,
		uint16 compareValueA, uint16 compareValueB)
{
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	27 97       	sbiw	r28, 0x07	; 7
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	7b 83       	std	Y+3, r23	; 0x03
    38dc:	6a 83       	std	Y+2, r22	; 0x02
    38de:	5d 83       	std	Y+5, r21	; 0x05
    38e0:	4c 83       	std	Y+4, r20	; 0x04
    38e2:	3f 83       	std	Y+7, r19	; 0x07
    38e4:	2e 83       	std	Y+6, r18	; 0x06
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	87 70       	andi	r24, 0x07	; 7
    38ea:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start; /* Set timer starting value */
    38ec:	ec e4       	ldi	r30, 0x4C	; 76
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	8a 81       	ldd	r24, Y+2	; 0x02
    38f2:	9b 81       	ldd	r25, Y+3	; 0x03
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
	/* Choose between compare unit A or compare unit B or both */
	OCR1A = compareValueA;
    38f8:	ea e4       	ldi	r30, 0x4A	; 74
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	8c 81       	ldd	r24, Y+4	; 0x04
    38fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	80 83       	st	Z, r24
	OCR1B = compareValueB;
    3904:	e8 e4       	ldi	r30, 0x48	; 72
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	8e 81       	ldd	r24, Y+6	; 0x06
    390a:	9f 81       	ldd	r25, Y+7	; 0x07
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	80 83       	st	Z, r24
	/* If interrupt is enable in initialization, enable it for
	 * it's corresponding compare unit chosen */
	if (compareValueA != 0 && compareValueB == 0)
    3910:	8c 81       	ldd	r24, Y+4	; 0x04
    3912:	9d 81       	ldd	r25, Y+5	; 0x05
    3914:	00 97       	sbiw	r24, 0x00	; 0
    3916:	a9 f0       	breq	.+42     	; 0x3942 <Timer1_start+0x7e>
    3918:	8e 81       	ldd	r24, Y+6	; 0x06
    391a:	9f 81       	ldd	r25, Y+7	; 0x07
    391c:	00 97       	sbiw	r24, 0x00	; 0
    391e:	89 f4       	brne	.+34     	; 0x3942 <Timer1_start+0x7e>
	{
		if (BIT_IS_SET(TIMSK, OCIE1A))
    3920:	e9 e5       	ldi	r30, 0x59	; 89
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	88 2f       	mov	r24, r24
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	80 71       	andi	r24, 0x10	; 16
    392c:	90 70       	andi	r25, 0x00	; 0
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	b9 f1       	breq	.+110    	; 0x39a0 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1B);
    3932:	a9 e5       	ldi	r26, 0x59	; 89
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e9 e5       	ldi	r30, 0x59	; 89
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	87 7f       	andi	r24, 0xF7	; 247
    393e:	8c 93       	st	X, r24
    3940:	2f c0       	rjmp	.+94     	; 0x39a0 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB != 0)
    3942:	8c 81       	ldd	r24, Y+4	; 0x04
    3944:	9d 81       	ldd	r25, Y+5	; 0x05
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	a9 f4       	brne	.+42     	; 0x3974 <Timer1_start+0xb0>
    394a:	8e 81       	ldd	r24, Y+6	; 0x06
    394c:	9f 81       	ldd	r25, Y+7	; 0x07
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	89 f0       	breq	.+34     	; 0x3974 <Timer1_start+0xb0>
	{
		if (BIT_IS_SET(TIMSK, OCIE1B))
    3952:	e9 e5       	ldi	r30, 0x59	; 89
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	80 81       	ld	r24, Z
    3958:	88 2f       	mov	r24, r24
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	88 70       	andi	r24, 0x08	; 8
    395e:	90 70       	andi	r25, 0x00	; 0
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	f1 f0       	breq	.+60     	; 0x39a0 <Timer1_start+0xdc>
		{
			CLEAR_BIT(TIMSK, OCIE1A);
    3964:	a9 e5       	ldi	r26, 0x59	; 89
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e9 e5       	ldi	r30, 0x59	; 89
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	8f 7e       	andi	r24, 0xEF	; 239
    3970:	8c 93       	st	X, r24
    3972:	16 c0       	rjmp	.+44     	; 0x39a0 <Timer1_start+0xdc>
		}
	}
	else if (compareValueA == 0 && compareValueB == 0)
    3974:	8c 81       	ldd	r24, Y+4	; 0x04
    3976:	9d 81       	ldd	r25, Y+5	; 0x05
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	91 f4       	brne	.+36     	; 0x39a0 <Timer1_start+0xdc>
    397c:	8e 81       	ldd	r24, Y+6	; 0x06
    397e:	9f 81       	ldd	r25, Y+7	; 0x07
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	71 f4       	brne	.+28     	; 0x39a0 <Timer1_start+0xdc>
	{
		CLEAR_BIT(TIMSK, OCIE1A);
    3984:	a9 e5       	ldi	r26, 0x59	; 89
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	e9 e5       	ldi	r30, 0x59	; 89
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	8f 7e       	andi	r24, 0xEF	; 239
    3990:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1B);
    3992:	a9 e5       	ldi	r26, 0x59	; 89
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	e9 e5       	ldi	r30, 0x59	; 89
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	87 7f       	andi	r24, 0xF7	; 247
    399e:	8c 93       	st	X, r24
	}
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR1B, 0xF8, prescaler);
    39a0:	ae e4       	ldi	r26, 0x4E	; 78
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	ee e4       	ldi	r30, 0x4E	; 78
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	98 2f       	mov	r25, r24
    39ac:	98 7f       	andi	r25, 0xF8	; 248
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	89 2b       	or	r24, r25
    39b2:	8c 93       	st	X, r24
}
    39b4:	27 96       	adiw	r28, 0x07	; 7
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <Timer1_stop>:
 * 		Function that stops timer1 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_stop(void)
{
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR1B, 0xF8, 0x00); /* Clear pre-scaler */
    39ce:	ae e4       	ldi	r26, 0x4E	; 78
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	ee e4       	ldi	r30, 0x4E	; 78
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	80 81       	ld	r24, Z
    39d8:	88 7f       	andi	r24, 0xF8	; 248
    39da:	8c 93       	st	X, r24
}
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <Timer1_deInit>:
 * 		Function that clears all timer1 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer1_deInit(void)
{
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	2a 97       	sbiw	r28, 0x0a	; 10
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
	/* Clear timer1 registers */
	CLEAR_REG(TCCR1A);
    39f6:	ef e4       	ldi	r30, 0x4F	; 79
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	80 81       	ld	r24, Z
    39fc:	ef e4       	ldi	r30, 0x4F	; 79
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	10 82       	st	Z, r1
	CLEAR_REG(TCCR1B);
    3a02:	ee e4       	ldi	r30, 0x4E	; 78
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	90 81       	ld	r25, Z
    3a08:	ee e4       	ldi	r30, 0x4E	; 78
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	10 82       	st	Z, r1
	CLEAR_REG(TCNT1);
    3a0e:	ec e4       	ldi	r30, 0x4C	; 76
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	ec e4       	ldi	r30, 0x4C	; 76
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	11 82       	std	Z+1, r1	; 0x01
    3a1c:	10 82       	st	Z, r1
	CLEAR_REG(OCR1A);
    3a1e:	ea e4       	ldi	r30, 0x4A	; 74
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	91 81       	ldd	r25, Z+1	; 0x01
    3a26:	ea e4       	ldi	r30, 0x4A	; 74
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	11 82       	std	Z+1, r1	; 0x01
    3a2c:	10 82       	st	Z, r1
	CLEAR_REG(OCR1B);
    3a2e:	e8 e4       	ldi	r30, 0x48	; 72
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	e8 e4       	ldi	r30, 0x48	; 72
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	11 82       	std	Z+1, r1	; 0x01
    3a3c:	10 82       	st	Z, r1
	CLEAR_REG(ICR1);
    3a3e:	e6 e4       	ldi	r30, 0x46	; 70
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	e6 e4       	ldi	r30, 0x46	; 70
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	11 82       	std	Z+1, r1	; 0x01
    3a4c:	10 82       	st	Z, r1
	/* Disable timer1 interrupts */
	CLEAR_BIT(TIMSK, TICIE1);
    3a4e:	a9 e5       	ldi	r26, 0x59	; 89
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	e9 e5       	ldi	r30, 0x59	; 89
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	80 81       	ld	r24, Z
    3a58:	8f 7d       	andi	r24, 0xDF	; 223
    3a5a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    3a5c:	a9 e5       	ldi	r26, 0x59	; 89
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	e9 e5       	ldi	r30, 0x59	; 89
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	8f 7e       	andi	r24, 0xEF	; 239
    3a68:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    3a6a:	a9 e5       	ldi	r26, 0x59	; 89
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	e9 e5       	ldi	r30, 0x59	; 89
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	87 7f       	andi	r24, 0xF7	; 247
    3a76:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE1);
    3a78:	a9 e5       	ldi	r26, 0x59	; 89
    3a7a:	b0 e0       	ldi	r27, 0x00	; 0
    3a7c:	e9 e5       	ldi	r30, 0x59	; 89
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	80 81       	ld	r24, Z
    3a82:	8b 7f       	andi	r24, 0xFB	; 251
    3a84:	8c 93       	st	X, r24
	/* Clear timer1 flags */
	SET_BIT(TIFR, ICF1);
    3a86:	a8 e5       	ldi	r26, 0x58	; 88
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	e8 e5       	ldi	r30, 0x58	; 88
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	80 62       	ori	r24, 0x20	; 32
    3a92:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1A);
    3a94:	a8 e5       	ldi	r26, 0x58	; 88
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	e8 e5       	ldi	r30, 0x58	; 88
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	80 61       	ori	r24, 0x10	; 16
    3aa0:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF1B);
    3aa2:	a8 e5       	ldi	r26, 0x58	; 88
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	e8 e5       	ldi	r30, 0x58	; 88
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	80 81       	ld	r24, Z
    3aac:	88 60       	ori	r24, 0x08	; 8
    3aae:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV1);
    3ab0:	a8 e5       	ldi	r26, 0x58	; 88
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	e8 e5       	ldi	r30, 0x58	; 88
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	84 60       	ori	r24, 0x04	; 4
    3abc:	8c 93       	st	X, r24
}
    3abe:	2a 96       	adiw	r28, 0x0a	; 10
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	de bf       	out	0x3e, r29	; 62
    3ac6:	0f be       	out	0x3f, r0	; 63
    3ac8:	cd bf       	out	0x3d, r28	; 61
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <USART_init>:
 * 			3. Sets UART baud rate.
 * [Args] USARTConfig	: Contains baud rate, character size, parity mode & stop bit.
 * [Return]				: Void.
 */
void USART_init(const USART_initConfig *USARTConfig)
{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	28 97       	sbiw	r28, 0x08	; 8
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	9c 83       	std	Y+4, r25	; 0x04
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
	/* Define a variable that will hold UBRR value*/
	uint16 UBRRValue = 0;
    3ae8:	1a 82       	std	Y+2, r1	; 0x02
    3aea:	19 82       	std	Y+1, r1	; 0x01
	/* Clear previous USART initialization data */
	CLEAR_REG(UCSRA);
    3aec:	eb e2       	ldi	r30, 0x2B	; 43
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	eb e2       	ldi	r30, 0x2B	; 43
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	10 82       	st	Z, r1
	CLEAR_REG(UCSRB);
    3af8:	ea e2       	ldi	r30, 0x2A	; 42
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	ea e2       	ldi	r30, 0x2A	; 42
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	10 82       	st	Z, r1
	CLEAR_REG(UCSRC);
    3b04:	e0 e4       	ldi	r30, 0x40	; 64
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	e0 e4       	ldi	r30, 0x40	; 64
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	10 82       	st	Z, r1
	OVERWRITE_REG(UBRRH, 0xF0, 0x00);
    3b10:	a0 e4       	ldi	r26, 0x40	; 64
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	e0 e4       	ldi	r30, 0x40	; 64
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	80 7f       	andi	r24, 0xF0	; 240
    3b1c:	8c 93       	st	X, r24
	CLEAR_REG(UBRRL);
    3b1e:	e9 e2       	ldi	r30, 0x29	; 41
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	80 81       	ld	r24, Z
    3b24:	e9 e2       	ldi	r30, 0x29	; 41
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	10 82       	st	Z, r1

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Enable double transmission speed */
	SET_BIT(UCSRA, U2X);
    3b2a:	ab e2       	ldi	r26, 0x2B	; 43
    3b2c:	b0 e0       	ldi	r27, 0x00	; 0
    3b2e:	eb e2       	ldi	r30, 0x2B	; 43
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 81       	ld	r24, Z
    3b34:	82 60       	ori	r24, 0x02	; 2
    3b36:	8c 93       	st	X, r24
	OVERWRITE_REG(UCSRB, 0x1F, 0xE0);

#endif

	/* Enable receiver & override receiver pin settings */
	SET_BIT(UCSRB, RXEN);
    3b38:	aa e2       	ldi	r26, 0x2A	; 42
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	ea e2       	ldi	r30, 0x2A	; 42
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	80 81       	ld	r24, Z
    3b42:	80 61       	ori	r24, 0x10	; 16
    3b44:	8c 93       	st	X, r24
	/* Enable transmitter & override transmitter pin settings */
	SET_BIT(UCSRB, TXEN);
    3b46:	aa e2       	ldi	r26, 0x2A	; 42
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	ea e2       	ldi	r30, 0x2A	; 42
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	88 60       	ori	r24, 0x08	; 8
    3b52:	8c 93       	st	X, r24
	/* Set most significant bit of character size */
	OVERWRITE_REG(UCSRB, 0xFB, GET_BIT((*USARTConfig).characterSize, 2) << 2);
    3b54:	aa e2       	ldi	r26, 0x2A	; 42
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	ea e2       	ldi	r30, 0x2A	; 42
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	80 81       	ld	r24, Z
    3b5e:	98 2f       	mov	r25, r24
    3b60:	9b 7f       	andi	r25, 0xFB	; 251
    3b62:	eb 81       	ldd	r30, Y+3	; 0x03
    3b64:	fc 81       	ldd	r31, Y+4	; 0x04
    3b66:	84 81       	ldd	r24, Z+4	; 0x04
    3b68:	87 70       	andi	r24, 0x07	; 7
    3b6a:	84 70       	andi	r24, 0x04	; 4
    3b6c:	89 2b       	or	r24, r25
    3b6e:	8c 93       	st	X, r24
	/* Write in UCSRC */
	SET_BIT(UCSRC, URSEL);
    3b70:	a0 e4       	ldi	r26, 0x40	; 64
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	e0 e4       	ldi	r30, 0x40	; 64
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	80 68       	ori	r24, 0x80	; 128
    3b7c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UMSEL);

#endif

	/* Set parity mode */
	OVERWRITE_REG(UCSRC, 0xCF, (*USARTConfig).parityMode << 4);
    3b7e:	a0 e4       	ldi	r26, 0x40	; 64
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	e0 e4       	ldi	r30, 0x40	; 64
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	28 2f       	mov	r18, r24
    3b8a:	2f 7c       	andi	r18, 0xCF	; 207
    3b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b90:	84 81       	ldd	r24, Z+4	; 0x04
    3b92:	86 95       	lsr	r24
    3b94:	86 95       	lsr	r24
    3b96:	86 95       	lsr	r24
    3b98:	83 70       	andi	r24, 0x03	; 3
    3b9a:	88 2f       	mov	r24, r24
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	82 95       	swap	r24
    3ba0:	92 95       	swap	r25
    3ba2:	90 7f       	andi	r25, 0xF0	; 240
    3ba4:	98 27       	eor	r25, r24
    3ba6:	80 7f       	andi	r24, 0xF0	; 240
    3ba8:	98 27       	eor	r25, r24
    3baa:	82 2b       	or	r24, r18
    3bac:	8c 93       	st	X, r24
	/* Set stop bit */
	OVERWRITE_REG(UCSRC, 0xF7, GET_BIT((*USARTConfig).stopBit, 0) << 3);
    3bae:	a0 e4       	ldi	r26, 0x40	; 64
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	e0 e4       	ldi	r30, 0x40	; 64
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
    3bb8:	28 2f       	mov	r18, r24
    3bba:	27 7f       	andi	r18, 0xF7	; 247
    3bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc0:	84 81       	ldd	r24, Z+4	; 0x04
    3bc2:	82 95       	swap	r24
    3bc4:	86 95       	lsr	r24
    3bc6:	87 70       	andi	r24, 0x07	; 7
    3bc8:	81 70       	andi	r24, 0x01	; 1
    3bca:	88 2f       	mov	r24, r24
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	81 70       	andi	r24, 0x01	; 1
    3bd0:	90 70       	andi	r25, 0x00	; 0
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	88 0f       	add	r24, r24
    3bd8:	99 1f       	adc	r25, r25
    3bda:	88 0f       	add	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	82 2b       	or	r24, r18
    3be0:	8c 93       	st	X, r24
	/* Set two least significant bits of character size */
	OVERWRITE_REG(UCSRC, 0xF9, ((*USARTConfig).characterSize & 0x03) << 1);
    3be2:	a0 e4       	ldi	r26, 0x40	; 64
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	e0 e4       	ldi	r30, 0x40	; 64
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	28 2f       	mov	r18, r24
    3bee:	29 7f       	andi	r18, 0xF9	; 249
    3bf0:	eb 81       	ldd	r30, Y+3	; 0x03
    3bf2:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf4:	84 81       	ldd	r24, Z+4	; 0x04
    3bf6:	87 70       	andi	r24, 0x07	; 7
    3bf8:	88 2f       	mov	r24, r24
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	83 70       	andi	r24, 0x03	; 3
    3bfe:	90 70       	andi	r25, 0x00	; 0
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	82 2b       	or	r24, r18
    3c06:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCPOL);

#endif

	/* Write in UBRRL & UBRRH */
	CLEAR_BIT(UCSRC, URSEL);
    3c08:	a0 e4       	ldi	r26, 0x40	; 64
    3c0a:	b0 e0       	ldi	r27, 0x00	; 0
    3c0c:	e0 e4       	ldi	r30, 0x40	; 64
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	80 81       	ld	r24, Z
    3c12:	8f 77       	andi	r24, 0x7F	; 127
    3c14:	8c 93       	st	X, r24

#if (USART_DOUBLE_SPEED_MODE == TRUE)

	/* Calculate the UBRR register value */
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 8UL))) - 1);
    3c16:	eb 81       	ldd	r30, Y+3	; 0x03
    3c18:	fc 81       	ldd	r31, Y+4	; 0x04
    3c1a:	80 81       	ld	r24, Z
    3c1c:	91 81       	ldd	r25, Z+1	; 0x01
    3c1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3c20:	b3 81       	ldd	r27, Z+3	; 0x03
    3c22:	88 0f       	add	r24, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	aa 1f       	adc	r26, r26
    3c28:	bb 1f       	adc	r27, r27
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	aa 1f       	adc	r26, r26
    3c30:	bb 1f       	adc	r27, r27
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	aa 1f       	adc	r26, r26
    3c38:	bb 1f       	adc	r27, r27
    3c3a:	9c 01       	movw	r18, r24
    3c3c:	ad 01       	movw	r20, r26
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	92 e1       	ldi	r25, 0x12	; 18
    3c42:	aa e7       	ldi	r26, 0x7A	; 122
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__udivmodsi4>
    3c4e:	da 01       	movw	r26, r20
    3c50:	c9 01       	movw	r24, r18
    3c52:	01 97       	sbiw	r24, 0x01	; 1
    3c54:	9a 83       	std	Y+2, r25	; 0x02
    3c56:	89 83       	std	Y+1, r24	; 0x01
	UBRRValue = (uint16) (((F_CPU / ((*USARTConfig).baudRate * 16UL))) - 1);

#endif

	/* Set 4 most significant bits of UBRRValue in UBRRH */
	UBRRH = UBRRValue >> 8;
    3c58:	e0 e4       	ldi	r30, 0x40	; 64
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c60:	89 2f       	mov	r24, r25
    3c62:	99 27       	eor	r25, r25
    3c64:	80 83       	st	Z, r24
	/* Set 8 least significant bits of UBRRValue in UBRRL */
	UBRRL = UBRRValue;
    3c66:	e9 e2       	ldi	r30, 0x29	; 41
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	80 83       	st	Z, r24
}
    3c6e:	28 96       	adiw	r28, 0x08	; 8
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <USART_sendByte>:

void USART_sendByte(const uint8 data)

#endif

{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	0f 92       	push	r0
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	89 83       	std	Y+1, r24	; 0x01
	UDR = (data & 0xFF);

#else

	/* Wait for data register empty flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    3c8c:	eb e2       	ldi	r30, 0x2B	; 43
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	88 2f       	mov	r24, r24
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	80 72       	andi	r24, 0x20	; 32
    3c98:	90 70       	andi	r25, 0x00	; 0
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	b9 f3       	breq	.-18     	; 0x3c8c <USART_sendByte+0xc>
	/* Put the data in the UDR, flag is automatically cleared */
	UDR = data;
    3c9e:	ec e2       	ldi	r30, 0x2C	; 44
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	80 83       	st	Z, r24
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

#endif

}
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <USART_recieveByte>:

uint8 USART_recieveByte(void)

#endif

{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
	return UDRValue;

#else

	/* Wait for receive complete flag to be raised indicating UDR is ready */
	while (BIT_IS_CLEAR(UCSRA, RXC));
    3cb6:	eb e2       	ldi	r30, 0x2B	; 43
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	88 23       	and	r24, r24
    3cbe:	dc f7       	brge	.-10     	; 0x3cb6 <USART_recieveByte+0x8>
	/* Read received data from UDR, flag is automatically cleared */
	return UDR;
    3cc0:	ec e2       	ldi	r30, 0x2C	; 44
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z

#endif

}
    3cc6:	cf 91       	pop	r28
    3cc8:	df 91       	pop	r29
    3cca:	08 95       	ret

00003ccc <USART_sendString>:
 * 		Function that sends string through USART.
 * [Args] string	: Indicates string to be sent.
 * [Return]			: Void.
 */
void USART_sendString(const uint8 *string)
{
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <USART_sendString+0x6>
    3cd2:	0f 92       	push	r0
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	9b 83       	std	Y+3, r25	; 0x03
    3cda:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    3cdc:	19 82       	std	Y+1, r1	; 0x01
    3cde:	0e c0       	rjmp	.+28     	; 0x3cfc <USART_sendString+0x30>
	/* Send the string */
	while (string[i] != '\0')
	{
		USART_sendByte(string[i]);
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	28 2f       	mov	r18, r24
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cea:	fc 01       	movw	r30, r24
    3cec:	e2 0f       	add	r30, r18
    3cee:	f3 1f       	adc	r31, r19
    3cf0:	80 81       	ld	r24, Z
    3cf2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <USART_sendByte>
		i++;
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	8f 5f       	subi	r24, 0xFF	; 255
    3cfa:	89 83       	std	Y+1, r24	; 0x01
void USART_sendString(const uint8 *string)
{
	/* Define a counter variable */
	uint8 i = 0;
	/* Send the string */
	while (string[i] != '\0')
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	9b 81       	ldd	r25, Y+3	; 0x03
    3d06:	fc 01       	movw	r30, r24
    3d08:	e2 0f       	add	r30, r18
    3d0a:	f3 1f       	adc	r31, r19
    3d0c:	80 81       	ld	r24, Z
    3d0e:	88 23       	and	r24, r24
    3d10:	39 f7       	brne	.-50     	; 0x3ce0 <USART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <USART_receiveString>:
 * [Args] 			: Void.
 * [Out] string		: Indicates the whole string that is received until (#) symbol.
 * [Return]			: Void.
 */
void USART_receiveString(uint8 *string)
{
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	df 93       	push	r29
    3d24:	cf 93       	push	r28
    3d26:	00 d0       	rcall	.+0      	; 0x3d28 <USART_receiveString+0xa>
    3d28:	0f 92       	push	r0
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	9b 83       	std	Y+3, r25	; 0x03
    3d30:	8a 83       	std	Y+2, r24	; 0x02
	/* Define a counter variable */
	uint8 i = 0;
    3d32:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	string[i] = USART_recieveByte();
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3e:	8c 01       	movw	r16, r24
    3d40:	02 0f       	add	r16, r18
    3d42:	13 1f       	adc	r17, r19
    3d44:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
    3d48:	f8 01       	movw	r30, r16
    3d4a:	80 83       	st	Z, r24
    3d4c:	0f c0       	rjmp	.+30     	; 0x3d6c <USART_receiveString+0x4e>
	/* Receive the string until the (#) */
	while (string[i] != '#')
	{
		i++;
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	8f 5f       	subi	r24, 0xFF	; 255
    3d52:	89 83       	std	Y+1, r24	; 0x01
		string[i] = USART_recieveByte();
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5e:	8c 01       	movw	r16, r24
    3d60:	02 0f       	add	r16, r18
    3d62:	13 1f       	adc	r17, r19
    3d64:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_recieveByte>
    3d68:	f8 01       	movw	r30, r16
    3d6a:	80 83       	st	Z, r24
	/* Define a counter variable */
	uint8 i = 0;
	/* Receive the first byte */
	string[i] = USART_recieveByte();
	/* Receive the string until the (#) */
	while (string[i] != '#')
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	28 2f       	mov	r18, r24
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	9b 81       	ldd	r25, Y+3	; 0x03
    3d76:	fc 01       	movw	r30, r24
    3d78:	e2 0f       	add	r30, r18
    3d7a:	f3 1f       	adc	r31, r19
    3d7c:	80 81       	ld	r24, Z
    3d7e:	83 32       	cpi	r24, 0x23	; 35
    3d80:	31 f7       	brne	.-52     	; 0x3d4e <USART_receiveString+0x30>
	{
		i++;
		string[i] = USART_recieveByte();
	}
	/* Replace (#) with (\0) After receiving */
	string[i] = '\0';
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	28 2f       	mov	r18, r24
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	e2 0f       	add	r30, r18
    3d90:	f3 1f       	adc	r31, r19
    3d92:	10 82       	st	Z, r1
}
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	cf 91       	pop	r28
    3d9c:	df 91       	pop	r29
    3d9e:	1f 91       	pop	r17
    3da0:	0f 91       	pop	r16
    3da2:	08 95       	ret

00003da4 <__udivmodsi4>:
    3da4:	a1 e2       	ldi	r26, 0x21	; 33
    3da6:	1a 2e       	mov	r1, r26
    3da8:	aa 1b       	sub	r26, r26
    3daa:	bb 1b       	sub	r27, r27
    3dac:	fd 01       	movw	r30, r26
    3dae:	0d c0       	rjmp	.+26     	; 0x3dca <__udivmodsi4_ep>

00003db0 <__udivmodsi4_loop>:
    3db0:	aa 1f       	adc	r26, r26
    3db2:	bb 1f       	adc	r27, r27
    3db4:	ee 1f       	adc	r30, r30
    3db6:	ff 1f       	adc	r31, r31
    3db8:	a2 17       	cp	r26, r18
    3dba:	b3 07       	cpc	r27, r19
    3dbc:	e4 07       	cpc	r30, r20
    3dbe:	f5 07       	cpc	r31, r21
    3dc0:	20 f0       	brcs	.+8      	; 0x3dca <__udivmodsi4_ep>
    3dc2:	a2 1b       	sub	r26, r18
    3dc4:	b3 0b       	sbc	r27, r19
    3dc6:	e4 0b       	sbc	r30, r20
    3dc8:	f5 0b       	sbc	r31, r21

00003dca <__udivmodsi4_ep>:
    3dca:	66 1f       	adc	r22, r22
    3dcc:	77 1f       	adc	r23, r23
    3dce:	88 1f       	adc	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	1a 94       	dec	r1
    3dd4:	69 f7       	brne	.-38     	; 0x3db0 <__udivmodsi4_loop>
    3dd6:	60 95       	com	r22
    3dd8:	70 95       	com	r23
    3dda:	80 95       	com	r24
    3ddc:	90 95       	com	r25
    3dde:	9b 01       	movw	r18, r22
    3de0:	ac 01       	movw	r20, r24
    3de2:	bd 01       	movw	r22, r26
    3de4:	cf 01       	movw	r24, r30
    3de6:	08 95       	ret

00003de8 <__prologue_saves__>:
    3de8:	2f 92       	push	r2
    3dea:	3f 92       	push	r3
    3dec:	4f 92       	push	r4
    3dee:	5f 92       	push	r5
    3df0:	6f 92       	push	r6
    3df2:	7f 92       	push	r7
    3df4:	8f 92       	push	r8
    3df6:	9f 92       	push	r9
    3df8:	af 92       	push	r10
    3dfa:	bf 92       	push	r11
    3dfc:	cf 92       	push	r12
    3dfe:	df 92       	push	r13
    3e00:	ef 92       	push	r14
    3e02:	ff 92       	push	r15
    3e04:	0f 93       	push	r16
    3e06:	1f 93       	push	r17
    3e08:	cf 93       	push	r28
    3e0a:	df 93       	push	r29
    3e0c:	cd b7       	in	r28, 0x3d	; 61
    3e0e:	de b7       	in	r29, 0x3e	; 62
    3e10:	ca 1b       	sub	r28, r26
    3e12:	db 0b       	sbc	r29, r27
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	de bf       	out	0x3e, r29	; 62
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	cd bf       	out	0x3d, r28	; 61
    3e1e:	09 94       	ijmp

00003e20 <__epilogue_restores__>:
    3e20:	2a 88       	ldd	r2, Y+18	; 0x12
    3e22:	39 88       	ldd	r3, Y+17	; 0x11
    3e24:	48 88       	ldd	r4, Y+16	; 0x10
    3e26:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e28:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e30:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e32:	b9 84       	ldd	r11, Y+9	; 0x09
    3e34:	c8 84       	ldd	r12, Y+8	; 0x08
    3e36:	df 80       	ldd	r13, Y+7	; 0x07
    3e38:	ee 80       	ldd	r14, Y+6	; 0x06
    3e3a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e3c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e3e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e40:	aa 81       	ldd	r26, Y+2	; 0x02
    3e42:	b9 81       	ldd	r27, Y+1	; 0x01
    3e44:	ce 0f       	add	r28, r30
    3e46:	d1 1d       	adc	r29, r1
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	ed 01       	movw	r28, r26
    3e54:	08 95       	ret

00003e56 <itoa>:
    3e56:	fb 01       	movw	r30, r22
    3e58:	9f 01       	movw	r18, r30
    3e5a:	e8 94       	clt
    3e5c:	42 30       	cpi	r20, 0x02	; 2
    3e5e:	c4 f0       	brlt	.+48     	; 0x3e90 <itoa+0x3a>
    3e60:	45 32       	cpi	r20, 0x25	; 37
    3e62:	b4 f4       	brge	.+44     	; 0x3e90 <itoa+0x3a>
    3e64:	4a 30       	cpi	r20, 0x0A	; 10
    3e66:	29 f4       	brne	.+10     	; 0x3e72 <itoa+0x1c>
    3e68:	97 fb       	bst	r25, 7
    3e6a:	1e f4       	brtc	.+6      	; 0x3e72 <itoa+0x1c>
    3e6c:	90 95       	com	r25
    3e6e:	81 95       	neg	r24
    3e70:	9f 4f       	sbci	r25, 0xFF	; 255
    3e72:	64 2f       	mov	r22, r20
    3e74:	77 27       	eor	r23, r23
    3e76:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__udivmodhi4>
    3e7a:	80 5d       	subi	r24, 0xD0	; 208
    3e7c:	8a 33       	cpi	r24, 0x3A	; 58
    3e7e:	0c f0       	brlt	.+2      	; 0x3e82 <itoa+0x2c>
    3e80:	89 5d       	subi	r24, 0xD9	; 217
    3e82:	81 93       	st	Z+, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	a1 f7       	brne	.-24     	; 0x3e72 <itoa+0x1c>
    3e8a:	16 f4       	brtc	.+4      	; 0x3e90 <itoa+0x3a>
    3e8c:	5d e2       	ldi	r21, 0x2D	; 45
    3e8e:	51 93       	st	Z+, r21
    3e90:	10 82       	st	Z, r1
    3e92:	c9 01       	movw	r24, r18
    3e94:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <strrev>

00003e98 <strrev>:
    3e98:	dc 01       	movw	r26, r24
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	67 2f       	mov	r22, r23
    3e9e:	71 91       	ld	r23, Z+
    3ea0:	77 23       	and	r23, r23
    3ea2:	e1 f7       	brne	.-8      	; 0x3e9c <strrev+0x4>
    3ea4:	32 97       	sbiw	r30, 0x02	; 2
    3ea6:	04 c0       	rjmp	.+8      	; 0x3eb0 <strrev+0x18>
    3ea8:	7c 91       	ld	r23, X
    3eaa:	6d 93       	st	X+, r22
    3eac:	70 83       	st	Z, r23
    3eae:	62 91       	ld	r22, -Z
    3eb0:	ae 17       	cp	r26, r30
    3eb2:	bf 07       	cpc	r27, r31
    3eb4:	c8 f3       	brcs	.-14     	; 0x3ea8 <strrev+0x10>
    3eb6:	08 95       	ret

00003eb8 <__udivmodhi4>:
    3eb8:	aa 1b       	sub	r26, r26
    3eba:	bb 1b       	sub	r27, r27
    3ebc:	51 e1       	ldi	r21, 0x11	; 17
    3ebe:	07 c0       	rjmp	.+14     	; 0x3ece <__udivmodhi4_ep>

00003ec0 <__udivmodhi4_loop>:
    3ec0:	aa 1f       	adc	r26, r26
    3ec2:	bb 1f       	adc	r27, r27
    3ec4:	a6 17       	cp	r26, r22
    3ec6:	b7 07       	cpc	r27, r23
    3ec8:	10 f0       	brcs	.+4      	; 0x3ece <__udivmodhi4_ep>
    3eca:	a6 1b       	sub	r26, r22
    3ecc:	b7 0b       	sbc	r27, r23

00003ece <__udivmodhi4_ep>:
    3ece:	88 1f       	adc	r24, r24
    3ed0:	99 1f       	adc	r25, r25
    3ed2:	5a 95       	dec	r21
    3ed4:	a9 f7       	brne	.-22     	; 0x3ec0 <__udivmodhi4_loop>
    3ed6:	80 95       	com	r24
    3ed8:	90 95       	com	r25
    3eda:	bc 01       	movw	r22, r24
    3edc:	cd 01       	movw	r24, r26
    3ede:	08 95       	ret

00003ee0 <_exit>:
    3ee0:	f8 94       	cli

00003ee2 <__stop_program>:
    3ee2:	ff cf       	rjmp	.-2      	; 0x3ee2 <__stop_program>
