
FanControllerProject_Eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002aec  00002b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800186  00800186  00002ca6  2**0
                  ALLOC
  3 .stab         00002424  00000000  00000000  00002ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000153d  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006609  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000067a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000699b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__vector_10>
      2c:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 09 	call	0x121a	; 0x121a <main>
      8a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e7       	ldi	r22, 0x7E	; 126
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 57       	subi	r30, 0x7A	; 122
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
 * [Args]	:
 * [In] ADCControl	: Includes reference voltage & pre-scaler value.
 * [Return]			: Void.
 */
void ADC_init(const ADC_ConfigType *ADCControl_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	 * 		MUX4:0  = (00000) to (00111) to choose channels from (0) to (7).
	 * 				  (01000) to (11101) to choose channels from (0) to (7) and gain factors.
	 */

	/* Set reference selection bits */
	if ((*ADCControl_Ptr).refVoltage == 2)
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	80 81       	ld	r24, Z
     e42:	83 70       	andi	r24, 0x03	; 3
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	c1 f0       	breq	.+48     	; 0xe78 <ADC_init+0x4a>
		/* DO NOTHING */
	}
	else
	{
		/* Clear previous reference voltage value &  Write new value in 2 MSB of ADMUX */
		OVERWRITE_REG(ADMUX, 0x3F,
     e48:	a7 e2       	ldi	r26, 0x27	; 39
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e2       	ldi	r30, 0x27	; 39
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	28 2f       	mov	r18, r24
     e54:	2f 73       	andi	r18, 0x3F	; 63
     e56:	e9 81       	ldd	r30, Y+1	; 0x01
     e58:	fa 81       	ldd	r31, Y+2	; 0x02
     e5a:	80 81       	ld	r24, Z
     e5c:	83 70       	andi	r24, 0x03	; 3
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	00 24       	eor	r0, r0
     e64:	96 95       	lsr	r25
     e66:	87 95       	ror	r24
     e68:	07 94       	ror	r0
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	07 94       	ror	r0
     e70:	98 2f       	mov	r25, r24
     e72:	80 2d       	mov	r24, r0
     e74:	82 2b       	or	r24, r18
     e76:	8c 93       	st	X, r24
				(*ADCControl_Ptr).refVoltage << (MICROCONTROLLER_BITS - 2));
	}
	/* Clear left adjust result bit */
	CLEAR_BIT(ADMUX, ADLAR);
     e78:	a7 e2       	ldi	r26, 0x27	; 39
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 7d       	andi	r24, 0xDF	; 223
     e84:	8c 93       	st	X, r24
	/* Set analog channel to 0 */
	OVERWRITE_REG(ADMUX, 0xE0, 0x00);
     e86:	a7 e2       	ldi	r26, 0x27	; 39
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e7 e2       	ldi	r30, 0x27	; 39
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 7e       	andi	r24, 0xE0	; 224
     e92:	8c 93       	st	X, r24
	 * 		ADCL:ADCH = Result is stored in these register when conversion is completed,
	 * 					can obtain complete result by reading the value (ADC).
	 */

	/* Clear ADC state bit */
	SET_BIT(ADCSRA, ADEN); /* Enable ADC */
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	8c 93       	st	X, r24
	/* Coversion state bit */
	CLEAR_BIT(ADCSRA, ADSC); /* Do not start conversion on initialization */
     ea2:	a6 e2       	ldi	r26, 0x26	; 38
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e6 e2       	ldi	r30, 0x26	; 38
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24
	/* Clear auto-trigger bit */
	CLEAR_BIT(ADCSRA, ADATE);
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7d       	andi	r24, 0xDF	; 223
     ebc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADIE);

#else

	/* Clear ADC interrupt bit */
	CLEAR_BIT(ADCSRA, ADIE);
     ebe:	a6 e2       	ldi	r26, 0x26	; 38
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	87 7f       	andi	r24, 0xF7	; 247
     eca:	8c 93       	st	X, r24

#endif

	/* Set pre-scaler bits */
	OVERWRITE_REG(ADCSRA, 0xF8, 0x00); /* Set ADPS2:0 values */
     ecc:	a6 e2       	ldi	r26, 0x26	; 38
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e6 e2       	ldi	r30, 0x26	; 38
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 7f       	andi	r24, 0xF8	; 248
     ed8:	8c 93       	st	X, r24
	/* SFIOR register bits description:
	 * 		REFS2:0 = (000) to (111) to choose auto-trigger source.
	 */

	/* Set auto-trigger source bit */
	OVERWRITE_REG(SFIOR, 0x1F, 0x00);
     eda:	a0 e5       	ldi	r26, 0x50	; 80
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e0 e5       	ldi	r30, 0x50	; 80
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 71       	andi	r24, 0x1F	; 31
     ee6:	8c 93       	st	X, r24
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <ADC_setRefVolt>:
 * [In] ADCControl	: Includes reference voltage & pre-scaler value, but only reference
 * 					  voltage will be used.
 * [Return]			: Void.
 */
void ADC_setRefVolt(const ADC_ConfigType *ADCControl_Ptr)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <ADC_setRefVolt+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
	if ((*ADCControl_Ptr).refVoltage == 2)
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	80 81       	ld	r24, Z
     f06:	83 70       	andi	r24, 0x03	; 3
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	c1 f0       	breq	.+48     	; 0xf3c <ADC_setRefVolt+0x4a>
		/* DO NOTHING */
	}
	else
	{
		/* Clear previous reference voltage value &  Write new value in 2 MSB of ADMUX */
		OVERWRITE_REG(ADMUX, 0x3F,
     f0c:	a7 e2       	ldi	r26, 0x27	; 39
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e2       	ldi	r30, 0x27	; 39
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	28 2f       	mov	r18, r24
     f18:	2f 73       	andi	r18, 0x3F	; 63
     f1a:	e9 81       	ldd	r30, Y+1	; 0x01
     f1c:	fa 81       	ldd	r31, Y+2	; 0x02
     f1e:	80 81       	ld	r24, Z
     f20:	83 70       	andi	r24, 0x03	; 3
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	00 24       	eor	r0, r0
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	07 94       	ror	r0
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	07 94       	ror	r0
     f34:	98 2f       	mov	r25, r24
     f36:	80 2d       	mov	r24, r0
     f38:	82 2b       	or	r24, r18
     f3a:	8c 93       	st	X, r24
				(*ADCControl_Ptr).refVoltage << (MICROCONTROLLER_BITS - 2));
	}
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <ADC_setResultAllign>:
 * [Args]	:
 * [In] resultBit	: Indicates allignment bit state.
 * [Return]			: Void.
 */
void ADC_setResultAllign(uint8 resultBit)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <ADC_setResultAllign+0x6>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
	switch (resultBit)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3b 83       	std	Y+3, r19	; 0x03
     f5c:	2a 83       	std	Y+2, r18	; 0x02
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	31 f0       	breq	.+12     	; 0xf72 <ADC_setResultAllign+0x2c>
     f66:	2a 81       	ldd	r18, Y+2	; 0x02
     f68:	3b 81       	ldd	r19, Y+3	; 0x03
     f6a:	21 30       	cpi	r18, 0x01	; 1
     f6c:	31 05       	cpc	r19, r1
     f6e:	49 f0       	breq	.+18     	; 0xf82 <ADC_setResultAllign+0x3c>
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <ADC_setResultAllign+0x4a>
	{
		case ADC_RESULT_RIGHT:
			CLEAR_BIT(ADMUX, ADLAR);
     f72:	a7 e2       	ldi	r26, 0x27	; 39
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e2       	ldi	r30, 0x27	; 39
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 7d       	andi	r24, 0xDF	; 223
     f7e:	8c 93       	st	X, r24
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <ADC_setResultAllign+0x4a>
		break;
		case ADC_RESULT_LEFT:
			SET_BIT(ADMUX, ADLAR);
     f82:	a7 e2       	ldi	r26, 0x27	; 39
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e2       	ldi	r30, 0x27	; 39
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 62       	ori	r24, 0x20	; 32
     f8e:	8c 93       	st	X, r24
		break;
	}
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <ADC_setAutoTrig>:
 * [In] trigEnable	: Indicates auto-trigger state.
 * [In] trigSource	: Indicates auto-trigger source.
 * [Return]		: Void.
 */
void ADC_setAutoTrig(uint8 trigEnable, uint8 trigSource)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <ADC_setAutoTrig+0x6>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <ADC_setAutoTrig+0x8>
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	6a 83       	std	Y+2, r22	; 0x02
	/* Set sate & reference selection bits */
	switch (trigEnable)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3c 83       	std	Y+4, r19	; 0x04
     fb4:	2b 83       	std	Y+3, r18	; 0x03
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	09 f1       	breq	.+66     	; 0x1000 <ADC_setAutoTrig+0x64>
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	3c 81       	ldd	r19, Y+4	; 0x04
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	31 05       	cpc	r19, r1
     fc6:	51 f5       	brne	.+84     	; 0x101c <ADC_setAutoTrig+0x80>
	{
		case LOGIC_HIGH:
			SET_BIT(ADCSRA, ADATE); /* Enable auto-trigger bit*/
     fc8:	a6 e2       	ldi	r26, 0x26	; 38
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e6 e2       	ldi	r30, 0x26	; 38
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 62       	ori	r24, 0x20	; 32
     fd4:	8c 93       	st	X, r24
			/* Remove auto-trigger selection bits previous value & write new value in 3 MSB of SFIOR */
			OVERWRITE_REG(SFIOR, 0x1F,
     fd6:	a0 e5       	ldi	r26, 0x50	; 80
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e0 e5       	ldi	r30, 0x50	; 80
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	28 2f       	mov	r18, r24
     fe2:	2f 71       	andi	r18, 0x1F	; 31
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 95       	swap	r24
     ff0:	92 95       	swap	r25
     ff2:	90 7f       	andi	r25, 0xF0	; 240
     ff4:	98 27       	eor	r25, r24
     ff6:	80 7f       	andi	r24, 0xF0	; 240
     ff8:	98 27       	eor	r25, r24
     ffa:	82 2b       	or	r24, r18
     ffc:	8c 93       	st	X, r24
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <ADC_setAutoTrig+0x80>
					trigSource << (MICROCONTROLLER_BITS - 3));
		break;
		case LOGIC_LOW:
			CLEAR_BIT(ADCSRA, ADATE); /* disable auto-trigger bit*/
    1000:	a6 e2       	ldi	r26, 0x26	; 38
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e2       	ldi	r30, 0x26	; 38
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7d       	andi	r24, 0xDF	; 223
    100c:	8c 93       	st	X, r24
			OVERWRITE_REG(SFIOR, 0x1F, 0x00); /* remove auto-trigger selection bits previous value */
    100e:	a0 e5       	ldi	r26, 0x50	; 80
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e0 e5       	ldi	r30, 0x50	; 80
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8f 71       	andi	r24, 0x1F	; 31
    101a:	8c 93       	st	X, r24
		break;
	}
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <ADC_setPrescaler>:
 * [In] ADCControl	: Includes reference voltage & pre-scaler value, but only pre-scaler
 * 					  will be used.
 * [Return]			: Void.
 */
void ADC_setPrescaler(const ADC_ConfigType *ADCControl_Ptr)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <ADC_setPrescaler+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous pre-scaler & set new pre-scaler */
	OVERWRITE_REG(ADCSRA, 0xF8, (*ADCControl_Ptr).prescaler);
    1038:	a6 e2       	ldi	r26, 0x26	; 38
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e6 e2       	ldi	r30, 0x26	; 38
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	98 2f       	mov	r25, r24
    1044:	98 7f       	andi	r25, 0xF8	; 248
    1046:	e9 81       	ldd	r30, Y+1	; 0x01
    1048:	fa 81       	ldd	r31, Y+2	; 0x02
    104a:	80 81       	ld	r24, Z
    104c:	86 95       	lsr	r24
    104e:	86 95       	lsr	r24
    1050:	87 70       	andi	r24, 0x07	; 7
    1052:	89 2b       	or	r24, r25
    1054:	8c 93       	st	X, r24
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <ADC_readChannel>:
 * [Args]	:
 * [In] channelNum	: Indicates channel number.
 * [Return]			: Conversion result (No return in case of interrupt usage).
 */
uint16 ADC_readChannel(uint8 channelNum)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA, ADSC); /* Start conversion */
	return -1; /* Indicating no-return */

#else

	channelNum &= 0x1F; /* Set channel = (11111) if it is larger */
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	8f 71       	andi	r24, 0x1F	; 31
    1070:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous channel value & set new analog channel & gain selection bits */
	OVERWRITE_REG(ADMUX, 0xE0, channelNum);
    1072:	a7 e2       	ldi	r26, 0x27	; 39
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e7 e2       	ldi	r30, 0x27	; 39
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	98 2f       	mov	r25, r24
    107e:	90 7e       	andi	r25, 0xE0	; 224
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	89 2b       	or	r24, r25
    1084:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); /* Start conversion */
    1086:	a6 e2       	ldi	r26, 0x26	; 38
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e6 e2       	ldi	r30, 0x26	; 38
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 64       	ori	r24, 0x40	; 64
    1092:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(ADCSRA, ADIF)); /* Wait for conversion */
    1094:	e6 e2       	ldi	r30, 0x26	; 38
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	80 71       	andi	r24, 0x10	; 16
    10a0:	90 70       	andi	r25, 0x00	; 0
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	b9 f3       	breq	.-18     	; 0x1094 <ADC_readChannel+0x34>
	SET_BIT(ADCSRA, ADIF); /* Clear ADIF after conversion by writing LOGIC_HIGH to it */
    10a6:	a6 e2       	ldi	r26, 0x26	; 38
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e6 e2       	ldi	r30, 0x26	; 38
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	8c 93       	st	X, r24
	return ADC;
    10b4:	e4 e2       	ldi	r30, 0x24	; 36
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01

#endif

}
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <ADC_deInit>:
 * 			3. ADC interrupt is disabled.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void ADC_deInit(void)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <ADC_deInit+0x6>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_REG(ADMUX); /* Clear ADMUX register */
    10ce:	e7 e2       	ldi	r30, 0x27	; 39
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	e7 e2       	ldi	r30, 0x27	; 39
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	10 82       	st	Z, r1
	CLEAR_REG(ADCSRA); /* Clear ADCSRA register */
    10da:	e6 e2       	ldi	r30, 0x26	; 38
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	e6 e2       	ldi	r30, 0x26	; 38
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	10 82       	st	Z, r1
	SET_BIT(ADCSRA, ADIF); /* Clear ADC flag */
    10e6:	a6 e2       	ldi	r26, 0x26	; 38
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e6 e2       	ldi	r30, 0x26	; 38
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 61       	ori	r24, 0x10	; 16
    10f2:	8c 93       	st	X, r24
	OVERWRITE_REG(SFIOR, 0x1F, 0x00); /* Clear auto-trigger value */
    10f4:	a0 e5       	ldi	r26, 0x50	; 80
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e0 e5       	ldi	r30, 0x50	; 80
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 71       	andi	r24, 0x1F	; 31
    1100:	8c 93       	st	X, r24
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <DCMotor_init>:
 * 		Function that initialize DC motor pins.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void DCMotor_init(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	/* Configure bridge enable pin as output pin */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_ENABLE, PIN_OUTPUT);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	63 e0       	ldi	r22, 0x03	; 3
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	/* Configure bridge direction pins as output pin */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN1, PIN_OUTPUT);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN2, PIN_OUTPUT);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	62 e0       	ldi	r22, 0x02	; 2
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	/* Stop the motor initially */
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <DCMotor_Rotate>:
 * [In] rotation	: Indicates rotation direction of the motor.
 * [In] speed		: Indicates speed percentage of the motor.
 * [Return]		: Void.
 */
void DCMotor_Rotate(ROTATION_STATE rotation, uint8 speed)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DCMotor_Rotate+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DCMotor_Rotate+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8a 83       	std	Y+2, r24	; 0x02
    115c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 dutyCycle = 0;	/* Initialize duty-cycle value */
    115e:	19 82       	std	Y+1, r1	; 0x01
	/* Convert recieved percentage into duty-cycle value */
	dutyCycle = (uint8) ((uint16) (speed * 250) / 100) + 5;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8a ef       	ldi	r24, 0xFA	; 250
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	ac 01       	movw	r20, r24
    116c:	24 9f       	mul	r18, r20
    116e:	c0 01       	movw	r24, r0
    1170:	25 9f       	mul	r18, r21
    1172:	90 0d       	add	r25, r0
    1174:	34 9f       	mul	r19, r20
    1176:	90 0d       	add	r25, r0
    1178:	11 24       	eor	r1, r1
    117a:	24 e6       	ldi	r18, 0x64	; 100
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__udivmodhi4>
    1184:	cb 01       	movw	r24, r22
    1186:	8b 5f       	subi	r24, 0xFB	; 251
    1188:	89 83       	std	Y+1, r24	; 0x01
	/* Control the motor as required */
	switch (rotation)
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3d 83       	std	Y+5, r19	; 0x05
    1192:	2c 83       	std	Y+4, r18	; 0x04
    1194:	4c 81       	ldd	r20, Y+4	; 0x04
    1196:	5d 81       	ldd	r21, Y+5	; 0x05
    1198:	41 30       	cpi	r20, 0x01	; 1
    119a:	51 05       	cpc	r21, r1
    119c:	b9 f0       	breq	.+46     	; 0x11cc <DCMotor_Rotate+0x80>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	91 05       	cpc	r25, r1
    11a6:	11 f1       	breq	.+68     	; 0x11ec <DCMotor_Rotate+0xa0>
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	3d 81       	ldd	r19, Y+5	; 0x05
    11ac:	21 15       	cp	r18, r1
    11ae:	31 05       	cpc	r19, r1
    11b0:	61 f5       	brne	.+88     	; 0x120a <DCMotor_Rotate+0xbe>
	{
		case STOP:
			Timer0_stop(); /* Stop PWM speed control */
    11b2:	0e 94 91 14 	call	0x2922	; 0x2922 <Timer0_stop>
			/* Stop motor rotation */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    11ca:	1f c0       	rjmp	.+62     	; 0x120a <DCMotor_Rotate+0xbe>
			return;
		case CLOCKWISE:
			Timer0_start(TIMER01_PRESCALER_8, 5, dutyCycle); /* Start timer & generate PWM */
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	65 e0       	ldi	r22, 0x05	; 5
    11d0:	49 81       	ldd	r20, Y+1	; 0x01
    11d2:	0e 94 6d 14 	call	0x28da	; 0x28da <Timer0_start>
			/* Rotate motor clock-wise direction */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_HIGH);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	62 e0       	ldi	r22, 0x02	; 2
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <DCMotor_Rotate+0xbe>
			return;
		case COUNTER_CLOCKWISE:
			Timer0_start(TIMER01_PRESCALER_8, 5, dutyCycle); /* Start timer & generate PWM */
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	65 e0       	ldi	r22, 0x05	; 5
    11f0:	49 81       	ldd	r20, Y+1	; 0x01
    11f2:	0e 94 6d 14 	call	0x28da	; 0x28da <Timer0_start>
			/* Rotate motor counter clock-wise direction */
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_HIGH);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	62 e0       	ldi	r22, 0x02	; 2
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
			return;
	}
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <main>:
 * 		The function where the program starts.
 * [Args]	: Void.
 * [Return]	: Void.
 */
int main(void)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <main+0x6>
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	/* A variable to store temperature value */
	uint8 tempValue = 0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	/* Create an instance of ADC configurations*/
	ADC_ConfigType configType = { ADC_INT_REF_ENABLE, ADC_PRESCALER_8 };
    1228:	1a 82       	std	Y+2, r1	; 0x02
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	83 60       	ori	r24, 0x03	; 3
    122e:	8a 83       	std	Y+2, r24	; 0x02
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	83 7e       	andi	r24, 0xE3	; 227
    1234:	88 60       	ori	r24, 0x08	; 8
    1236:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialize ADC */
	ADC_init(&configType);
    1238:	ce 01       	movw	r24, r28
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	/* Create an instance of timer configurations*/
	Timer_initConfig Timer_config = { TIMER8BIT_FAST_PWM, CLEAR_OC,
	LOGIC_LOW };
    1240:	1b 82       	std	Y+3, r1	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	80 7f       	andi	r24, 0xF0	; 240
    1246:	83 60       	ori	r24, 0x03	; 3
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	8f 7c       	andi	r24, 0xCF	; 207
    124e:	80 62       	ori	r24, 0x20	; 32
    1250:	8b 83       	std	Y+3, r24	; 0x03
	/* Initialize timer for PWM signal to control motor speed */
	Timer0_init(&Timer_config);
    1252:	ce 01       	movw	r24, r28
    1254:	03 96       	adiw	r24, 0x03	; 3
    1256:	0e 94 bc 12 	call	0x2578	; 0x2578 <Timer0_init>
	/* Initialize LCD */
	LCD_init();
    125a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <LCD_init>
	/* Initialize DC motor */
	DCMotor_init();
    125e:	0e 94 86 08 	call	0x110c	; 0x110c <DCMotor_init>
	/* Display text in the middle of LCD screen */
	LCD_moveCursor(0, 4); /* Move to row 0 column 4 */
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	64 e0       	ldi	r22, 0x04	; 4
    1266:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
	LCD_displayString("Fan is "); /* Write the string */
    126a:	80 e6       	ldi	r24, 0x60	; 96
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_displayString>
	LCD_moveCursor(1, 2); /* Move to row 1 column 3 */
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
	LCD_displayString("Temp =      C"); /* Write the string */
    127a:	88 e6       	ldi	r24, 0x68	; 104
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_displayString>
	/* Execute program loop */
	while (TRUE)
	{
		/* Get temperature reading */
		tempValue = LM35_getTemperature();
    1282:	0e 94 11 12 	call	0x2422	; 0x2422 <LM35_getTemperature>
    1286:	89 83       	std	Y+1, r24	; 0x01
		/* Check if temperature is in OFF condition */
		if (tempValue < 30)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	8e 31       	cpi	r24, 0x1E	; 30
    128c:	c8 f4       	brcc	.+50     	; 0x12c0 <main+0xa6>
		{
			LCD_moveCursor(0, 11); /* Move to row 0 and common column */
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	6b e0       	ldi	r22, 0x0B	; 11
    1292:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
			LCD_displayString("OFF"); /* Write the string */
    1296:	86 e7       	ldi	r24, 0x76	; 118
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_displayString>
			DCMotor_Rotate(STOP, 0); /* Stop the motor */
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	0e 94 a6 08 	call	0x114c	; 0x114c <DCMotor_Rotate>
			LCD_moveCursor(1, LCD_COMMON_COLUMN_INDEX); /* Move to row 1 and common column */
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	6a e0       	ldi	r22, 0x0A	; 10
    12aa:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
			LCD_intgerToString(tempValue); /* Write the value */
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <LCD_intgerToString>
			LCD_displayCharacter(' '); /* Clear numbers after displaying value */
    12b8:	80 e2       	ldi	r24, 0x20	; 32
    12ba:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_displayCharacter>
    12be:	e1 cf       	rjmp	.-62     	; 0x1282 <main+0x68>
		}
		else
		{
			LCD_moveCursor(0, 11); /* Move to row 0 and common column */
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	6b e0       	ldi	r22, 0x0B	; 11
    12c4:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
			LCD_displayString("ON "); /* Write the string */
    12c8:	8a e7       	ldi	r24, 0x7A	; 122
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_displayString>
			LCD_moveCursor(1, LCD_COMMON_COLUMN_INDEX); /* Move to row 1 and common column */
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	6a e0       	ldi	r22, 0x0A	; 10
    12d4:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
			/* If temperature is between 30C and 60C */
			if (tempValue >= 30 && tempValue < 60)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	8e 31       	cpi	r24, 0x1E	; 30
    12dc:	40 f0       	brcs	.+16     	; 0x12ee <main+0xd4>
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	8c 33       	cpi	r24, 0x3C	; 60
    12e2:	28 f4       	brcc	.+10     	; 0x12ee <main+0xd4>
			{
				DCMotor_Rotate(CLOCKWISE, 25); /* Start the motor at 25% speed */
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	69 e1       	ldi	r22, 0x19	; 25
    12e8:	0e 94 a6 08 	call	0x114c	; 0x114c <DCMotor_Rotate>
    12ec:	1d c0       	rjmp	.+58     	; 0x1328 <main+0x10e>
			}
			/* If temperature is between 60C and 90C */
			else if (tempValue >= 60 && tempValue < 90)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	8c 33       	cpi	r24, 0x3C	; 60
    12f2:	40 f0       	brcs	.+16     	; 0x1304 <main+0xea>
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	8a 35       	cpi	r24, 0x5A	; 90
    12f8:	28 f4       	brcc	.+10     	; 0x1304 <main+0xea>
			{
				DCMotor_Rotate(CLOCKWISE, 50); /* Start the motor at 50% speed */
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	62 e3       	ldi	r22, 0x32	; 50
    12fe:	0e 94 a6 08 	call	0x114c	; 0x114c <DCMotor_Rotate>
    1302:	12 c0       	rjmp	.+36     	; 0x1328 <main+0x10e>
			}
			/* If temperature is between 90C and 120C */
			else if (tempValue >= 90 && tempValue < 120)
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	8a 35       	cpi	r24, 0x5A	; 90
    1308:	40 f0       	brcs	.+16     	; 0x131a <main+0x100>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	88 37       	cpi	r24, 0x78	; 120
    130e:	28 f4       	brcc	.+10     	; 0x131a <main+0x100>
			{
				DCMotor_Rotate(CLOCKWISE, 75); /* Start the motor at 75% speed */
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	6b e4       	ldi	r22, 0x4B	; 75
    1314:	0e 94 a6 08 	call	0x114c	; 0x114c <DCMotor_Rotate>
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <main+0x10e>
			}
			/* If temperature is larger than 120C */
			else if (tempValue >= 120)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 37       	cpi	r24, 0x78	; 120
    131e:	20 f0       	brcs	.+8      	; 0x1328 <main+0x10e>
			{
				DCMotor_Rotate(CLOCKWISE, 100); /* Start the motor at 100% speed */
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	64 e6       	ldi	r22, 0x64	; 100
    1324:	0e 94 a6 08 	call	0x114c	; 0x114c <DCMotor_Rotate>
			}
			LCD_intgerToString(tempValue); /* Write the value */
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <LCD_intgerToString>
			LCD_displayCharacter(' '); /* Clear numbers after displaying value */
    1332:	80 e2       	ldi	r24, 0x20	; 32
    1334:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_displayCharacter>
    1338:	a4 cf       	rjmp	.-184    	; 0x1282 <main+0x68>

0000133a <GPIO_setupPinDirection>:
 * [In] direction	: Indicates input (0) or output (1).
 * [Return]			: Void.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum,
		GPIO_PinDirectionType direction)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <GPIO_setupPinDirection+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <GPIO_setupPinDirection+0x8>
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	6a 83       	std	Y+2, r22	; 0x02
    134c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	08 f0       	brcs	.+2      	; 0x1356 <GPIO_setupPinDirection+0x1c>
    1354:	d5 c0       	rjmp	.+426    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	08 f0       	brcs	.+2      	; 0x135e <GPIO_setupPinDirection+0x24>
    135c:	d1 c0       	rjmp	.+418    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (portNum)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3d 83       	std	Y+5, r19	; 0x05
    1366:	2c 83       	std	Y+4, r18	; 0x04
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_setupPinDirection+0x3a>
    1372:	43 c0       	rjmp	.+134    	; 0x13fa <GPIO_setupPinDirection+0xc0>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <GPIO_setupPinDirection+0x4e>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	71 f0       	breq	.+28     	; 0x13a2 <GPIO_setupPinDirection+0x68>
    1386:	bc c0       	rjmp	.+376    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
    1388:	2c 81       	ldd	r18, Y+4	; 0x04
    138a:	3d 81       	ldd	r19, Y+5	; 0x05
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <GPIO_setupPinDirection+0x5a>
    1392:	5f c0       	rjmp	.+190    	; 0x1452 <GPIO_setupPinDirection+0x118>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <GPIO_setupPinDirection+0x66>
    139e:	85 c0       	rjmp	.+266    	; 0x14aa <GPIO_setupPinDirection+0x170>
    13a0:	af c0       	rjmp	.+350    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	a1 f4       	brne	.+40     	; 0x13d0 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA, pinNum);
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_setupPinDirection+0x8c>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_setupPinDirection+0x88>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	98 c0       	rjmp	.+304    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA, pinNum);
    13d0:	aa e3       	ldi	r26, 0x3A	; 58
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ea e3       	ldi	r30, 0x3A	; 58
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_setupPinDirection+0xb4>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_setupPinDirection+0xb0>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	83 c0       	rjmp	.+262    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	a1 f4       	brne	.+40     	; 0x1428 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB, pinNum);
    1400:	a7 e3       	ldi	r26, 0x37	; 55
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e7 e3       	ldi	r30, 0x37	; 55
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_setupPinDirection+0xe4>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_setupPinDirection+0xe0>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	6c c0       	rjmp	.+216    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB, pinNum);
    1428:	a7 e3       	ldi	r26, 0x37	; 55
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e7 e3       	ldi	r30, 0x37	; 55
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <GPIO_setupPinDirection+0x10c>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <GPIO_setupPinDirection+0x108>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	57 c0       	rjmp	.+174    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	a1 f4       	brne	.+40     	; 0x1480 <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC, pinNum);
    1458:	a4 e3       	ldi	r26, 0x34	; 52
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e4 e3       	ldi	r30, 0x34	; 52
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <GPIO_setupPinDirection+0x13c>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <GPIO_setupPinDirection+0x138>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	40 c0       	rjmp	.+128    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC, pinNum);
    1480:	a4 e3       	ldi	r26, 0x34	; 52
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e4 e3       	ldi	r30, 0x34	; 52
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_setupPinDirection+0x164>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_setupPinDirection+0x160>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
			break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	a1 f4       	brne	.+40     	; 0x14d8 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD, pinNum);
    14b0:	a1 e3       	ldi	r26, 0x31	; 49
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e1 e3       	ldi	r30, 0x31	; 49
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_setupPinDirection+0x194>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_setupPinDirection+0x190>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD, pinNum);
    14d8:	a1 e3       	ldi	r26, 0x31	; 49
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <GPIO_setupPinDirection+0x1bc>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <GPIO_setupPinDirection+0x1b8>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GPIO_writePin>:
 * [In] pinNum		: Indicates pin number.
 * [In] value		: Indicates logic low (0) or logic high (1).
 * [Return]			: Void.
 */
void GPIO_writePin(uint8 portNum, uint8 pinNum, uint8 value)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <GPIO_writePin+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_writePin+0x8>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
    1522:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	08 f0       	brcs	.+2      	; 0x152c <GPIO_writePin+0x1c>
    152a:	d5 c0       	rjmp	.+426    	; 0x16d6 <GPIO_writePin+0x1c6>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	08 f0       	brcs	.+2      	; 0x1534 <GPIO_writePin+0x24>
    1532:	d1 c0       	rjmp	.+418    	; 0x16d6 <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else
	{
		/* Write the pin value as required */
		switch (portNum)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_writePin+0x3a>
    1548:	43 c0       	rjmp	.+134    	; 0x15d0 <GPIO_writePin+0xc0>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <GPIO_writePin+0x4e>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	71 f0       	breq	.+28     	; 0x1578 <GPIO_writePin+0x68>
    155c:	bc c0       	rjmp	.+376    	; 0x16d6 <GPIO_writePin+0x1c6>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_writePin+0x5a>
    1568:	5f c0       	rjmp	.+190    	; 0x1628 <GPIO_writePin+0x118>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <GPIO_writePin+0x66>
    1574:	85 c0       	rjmp	.+266    	; 0x1680 <GPIO_writePin+0x170>
    1576:	af c0       	rjmp	.+350    	; 0x16d6 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if (value == LOGIC_HIGH)
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	a1 f4       	brne	.+40     	; 0x15a6 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA, pinNum);
    157e:	ab e3       	ldi	r26, 0x3B	; 59
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_writePin+0x8c>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_writePin+0x88>
    15a0:	84 2b       	or	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	98 c0       	rjmp	.+304    	; 0x16d6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA, pinNum);
    15a6:	ab e3       	ldi	r26, 0x3B	; 59
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <GPIO_writePin+0xb4>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <GPIO_writePin+0xb0>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	83 c0       	rjmp	.+262    	; 0x16d6 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTB_ID:
				if (value == LOGIC_HIGH)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB, pinNum);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_writePin+0xe4>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_writePin+0xe0>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	6c c0       	rjmp	.+216    	; 0x16d6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB, pinNum);
    15fe:	a8 e3       	ldi	r26, 0x38	; 56
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_writePin+0x10c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_writePin+0x108>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	57 c0       	rjmp	.+174    	; 0x16d6 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTC_ID:
				if (value == LOGIC_HIGH)
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	a1 f4       	brne	.+40     	; 0x1656 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC, pinNum);
    162e:	a5 e3       	ldi	r26, 0x35	; 53
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e3       	ldi	r30, 0x35	; 53
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_writePin+0x13c>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_writePin+0x138>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	40 c0       	rjmp	.+128    	; 0x16d6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC, pinNum);
    1656:	a5 e3       	ldi	r26, 0x35	; 53
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e3       	ldi	r30, 0x35	; 53
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_writePin+0x164>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_writePin+0x160>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	2b c0       	rjmp	.+86     	; 0x16d6 <GPIO_writePin+0x1c6>
				}
			break;
			case PORTD_ID:
				if (value == LOGIC_HIGH)
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a1 f4       	brne	.+40     	; 0x16ae <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD, pinNum);
    1686:	a2 e3       	ldi	r26, 0x32	; 50
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_writePin+0x194>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_writePin+0x190>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD, pinNum);
    16ae:	a2 e3       	ldi	r26, 0x32	; 50
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e2 e3       	ldi	r30, 0x32	; 50
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_writePin+0x1bc>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_writePin+0x1b8>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
				}
			break;
		}
	}
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <GPIO_readPin>:
 * [In] portNum		: Indicates port number.
 * [In] pinNum		: Indicates pin number.
 * [Return]			: Value of required pin as logic high (1) or logic low (0).
 */
uint8 GPIO_readPin(uint8 portNum, uint8 pinNum) /* @suppress("No return") */
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_readPin+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_readPin+0x8>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GPIO_readPin+0xa>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value
	 * or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <GPIO_readPin+0x1a>
    16fe:	85 c0       	rjmp	.+266    	; 0x180a <GPIO_readPin+0x124>
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	08 f0       	brcs	.+2      	; 0x1708 <GPIO_readPin+0x22>
    1706:	81 c0       	rjmp	.+258    	; 0x180a <GPIO_readPin+0x124>
		/* DO NOTHING */
	}
	else
	{
		/* Read the pin value as required */
		switch (portNum)
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3d 83       	std	Y+5, r19	; 0x05
    1710:	2c 83       	std	Y+4, r18	; 0x04
    1712:	4c 81       	ldd	r20, Y+4	; 0x04
    1714:	5d 81       	ldd	r21, Y+5	; 0x05
    1716:	41 30       	cpi	r20, 0x01	; 1
    1718:	51 05       	cpc	r21, r1
    171a:	79 f1       	breq	.+94     	; 0x177a <GPIO_readPin+0x94>
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	91 05       	cpc	r25, r1
    1724:	34 f4       	brge	.+12     	; 0x1732 <GPIO_readPin+0x4c>
    1726:	2c 81       	ldd	r18, Y+4	; 0x04
    1728:	3d 81       	ldd	r19, Y+5	; 0x05
    172a:	21 15       	cp	r18, r1
    172c:	31 05       	cpc	r19, r1
    172e:	69 f0       	breq	.+26     	; 0x174a <GPIO_readPin+0x64>
    1730:	6c c0       	rjmp	.+216    	; 0x180a <GPIO_readPin+0x124>
    1732:	4c 81       	ldd	r20, Y+4	; 0x04
    1734:	5d 81       	ldd	r21, Y+5	; 0x05
    1736:	42 30       	cpi	r20, 0x02	; 2
    1738:	51 05       	cpc	r21, r1
    173a:	b9 f1       	breq	.+110    	; 0x17aa <GPIO_readPin+0xc4>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <GPIO_readPin+0x62>
    1746:	49 c0       	rjmp	.+146    	; 0x17da <GPIO_readPin+0xf4>
    1748:	60 c0       	rjmp	.+192    	; 0x180a <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if (BIT_IS_SET(PINA, pinNum))
    174a:	e9 e3       	ldi	r30, 0x39	; 57
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_readPin+0x7c>
    175e:	55 95       	asr	r21
    1760:	47 95       	ror	r20
    1762:	8a 95       	dec	r24
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_readPin+0x78>
    1766:	ca 01       	movw	r24, r20
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	88 23       	and	r24, r24
    176e:	19 f0       	breq	.+6      	; 0x1776 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    1770:	51 e0       	ldi	r21, 0x01	; 1
    1772:	5b 83       	std	Y+3, r21	; 0x03
    1774:	4b c0       	rjmp	.+150    	; 0x180c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1776:	1b 82       	std	Y+3, r1	; 0x03
    1778:	49 c0       	rjmp	.+146    	; 0x180c <GPIO_readPin+0x126>
				}
			case PORTB_ID:
				if (BIT_IS_SET(PINB, pinNum))
    177a:	e6 e3       	ldi	r30, 0x36	; 54
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_readPin+0xac>
    178e:	55 95       	asr	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_readPin+0xa8>
    1796:	ca 01       	movw	r24, r20
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	88 23       	and	r24, r24
    179e:	19 f0       	breq	.+6      	; 0x17a6 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    17a0:	51 e0       	ldi	r21, 0x01	; 1
    17a2:	5b 83       	std	Y+3, r21	; 0x03
    17a4:	33 c0       	rjmp	.+102    	; 0x180c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    17a6:	1b 82       	std	Y+3, r1	; 0x03
    17a8:	31 c0       	rjmp	.+98     	; 0x180c <GPIO_readPin+0x126>
				}
			case PORTC_ID:
				if (BIT_IS_SET(PINC, pinNum))
    17aa:	e3 e3       	ldi	r30, 0x33	; 51
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <GPIO_readPin+0xdc>
    17be:	55 95       	asr	r21
    17c0:	47 95       	ror	r20
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <GPIO_readPin+0xd8>
    17c6:	ca 01       	movw	r24, r20
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	90 70       	andi	r25, 0x00	; 0
    17cc:	88 23       	and	r24, r24
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    17d0:	51 e0       	ldi	r21, 0x01	; 1
    17d2:	5b 83       	std	Y+3, r21	; 0x03
    17d4:	1b c0       	rjmp	.+54     	; 0x180c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    17d6:	1b 82       	std	Y+3, r1	; 0x03
    17d8:	19 c0       	rjmp	.+50     	; 0x180c <GPIO_readPin+0x126>
				}
			case PORTD_ID:
				if (BIT_IS_SET(PIND, pinNum))
    17da:	e0 e3       	ldi	r30, 0x30	; 48
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a9 01       	movw	r20, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_readPin+0x10c>
    17ee:	55 95       	asr	r21
    17f0:	47 95       	ror	r20
    17f2:	8a 95       	dec	r24
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_readPin+0x108>
    17f6:	ca 01       	movw	r24, r20
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	90 70       	andi	r25, 0x00	; 0
    17fc:	88 23       	and	r24, r24
    17fe:	19 f0       	breq	.+6      	; 0x1806 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    1800:	51 e0       	ldi	r21, 0x01	; 1
    1802:	5b 83       	std	Y+3, r21	; 0x03
    1804:	03 c0       	rjmp	.+6      	; 0x180c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1806:	1b 82       	std	Y+3, r1	; 0x03
    1808:	01 c0       	rjmp	.+2      	; 0x180c <GPIO_readPin+0x126>
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_readPin+0x12a>
				}
		}
	}
}
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	8e 83       	std	Y+6, r24	; 0x06
    1810:	8e 81       	ldd	r24, Y+6	; 0x06
    1812:	26 96       	adiw	r28, 0x06	; 6
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <GPIO_setupPortDirection>:
 * [In] portNum		: Indicates port number.
 * [In] direction	: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_setupPortDirection(uint8 portNum, GPIO_PortDirectionType direction)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <GPIO_setupPortDirection+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_setupPortDirection+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	90 f5       	brcc	.+100    	; 0x189e <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Setup the port direction as required */
		switch (portNum)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3c 83       	std	Y+4, r19	; 0x04
    1842:	2b 83       	std	Y+3, r18	; 0x03
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	d1 f0       	breq	.+52     	; 0x1882 <GPIO_setupPortDirection+0x5e>
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	2c f4       	brge	.+10     	; 0x1862 <GPIO_setupPortDirection+0x3e>
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	61 f0       	breq	.+24     	; 0x1878 <GPIO_setupPortDirection+0x54>
    1860:	1e c0       	rjmp	.+60     	; 0x189e <GPIO_setupPortDirection+0x7a>
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	3c 81       	ldd	r19, Y+4	; 0x04
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	81 f0       	breq	.+32     	; 0x188c <GPIO_setupPortDirection+0x68>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	81 f0       	breq	.+32     	; 0x1896 <GPIO_setupPortDirection+0x72>
    1876:	13 c0       	rjmp	.+38     	; 0x189e <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = direction;
    1878:	ea e3       	ldi	r30, 0x3A	; 58
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	80 83       	st	Z, r24
    1880:	0e c0       	rjmp	.+28     	; 0x189e <GPIO_setupPortDirection+0x7a>
			break;
			case PORTB_ID:
				DDRB = direction;
    1882:	e7 e3       	ldi	r30, 0x37	; 55
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	80 83       	st	Z, r24
    188a:	09 c0       	rjmp	.+18     	; 0x189e <GPIO_setupPortDirection+0x7a>
			break;
			case PORTC_ID:
				DDRC = direction;
    188c:	e4 e3       	ldi	r30, 0x34	; 52
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	80 83       	st	Z, r24
    1894:	04 c0       	rjmp	.+8      	; 0x189e <GPIO_setupPortDirection+0x7a>
			break;
			case PORTD_ID:
				DDRD = direction;
    1896:	e1 e3       	ldi	r30, 0x31	; 49
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 83       	st	Z, r24
			break;
		}
	}
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <GPIO_writePort>:
 * [In] portNum		: Indicates port number.
 * [In] value		: Indicates a value between (0x00) or (0xFF).
 * [Return]			: Void.
 */
void GPIO_writePort(uint8 portNum, uint8 value)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <GPIO_writePort+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <GPIO_writePort+0x8>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	84 30       	cpi	r24, 0x04	; 4
    18c0:	90 f5       	brcc	.+100    	; 0x1926 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	}
	else
	{
		/* Write the port value as required */
		switch (portNum)
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	3c 83       	std	Y+4, r19	; 0x04
    18ca:	2b 83       	std	Y+3, r18	; 0x03
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	d1 f0       	breq	.+52     	; 0x190a <GPIO_writePort+0x5e>
    18d6:	2b 81       	ldd	r18, Y+3	; 0x03
    18d8:	3c 81       	ldd	r19, Y+4	; 0x04
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	2c f4       	brge	.+10     	; 0x18ea <GPIO_writePort+0x3e>
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	61 f0       	breq	.+24     	; 0x1900 <GPIO_writePort+0x54>
    18e8:	1e c0       	rjmp	.+60     	; 0x1926 <GPIO_writePort+0x7a>
    18ea:	2b 81       	ldd	r18, Y+3	; 0x03
    18ec:	3c 81       	ldd	r19, Y+4	; 0x04
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	81 f0       	breq	.+32     	; 0x1914 <GPIO_writePort+0x68>
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	91 05       	cpc	r25, r1
    18fc:	81 f0       	breq	.+32     	; 0x191e <GPIO_writePort+0x72>
    18fe:	13 c0       	rjmp	.+38     	; 0x1926 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    1900:	eb e3       	ldi	r30, 0x3B	; 59
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	80 83       	st	Z, r24
    1908:	0e c0       	rjmp	.+28     	; 0x1926 <GPIO_writePort+0x7a>
			break;
			case PORTB_ID:
				PORTB = value;
    190a:	e8 e3       	ldi	r30, 0x38	; 56
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	80 83       	st	Z, r24
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <GPIO_writePort+0x7a>
			break;
			case PORTC_ID:
				PORTC = value;
    1914:	e5 e3       	ldi	r30, 0x35	; 53
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	80 83       	st	Z, r24
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <GPIO_writePort+0x7a>
			break;
			case PORTD_ID:
				PORTD = value;
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	80 83       	st	Z, r24
			break;
		}
	}
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <GPIO_readPort>:
 * [Args]	:
 * [In] portNum		: Indicates port number.
 * [Return]			: Value of required pin as a value between (0x00) or (0xFF).
 */
uint8 GPIO_readPort(uint8 portNum) /* @suppress("No return") */
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <GPIO_readPort+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <GPIO_readPort+0x8>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (portNum >= NUM_OF_PORTS)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	84 30       	cpi	r24, 0x04	; 4
    1948:	98 f5       	brcc	.+102    	; 0x19b0 <GPIO_readPort+0x7c>
		/* DO NOTHING */
	}
	else
	{
		/* Read the port value as required */
		switch (portNum)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3c 83       	std	Y+4, r19	; 0x04
    1952:	2b 83       	std	Y+3, r18	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	d1 f0       	breq	.+52     	; 0x1992 <GPIO_readPort+0x5e>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <GPIO_readPort+0x3e>
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	61 f0       	breq	.+24     	; 0x1988 <GPIO_readPort+0x54>
    1970:	1f c0       	rjmp	.+62     	; 0x19b0 <GPIO_readPort+0x7c>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <GPIO_readPort+0x68>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	81 f0       	breq	.+32     	; 0x19a6 <GPIO_readPort+0x72>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				return PINA;
    1988:	e9 e3       	ldi	r30, 0x39	; 57
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	90 81       	ld	r25, Z
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	10 c0       	rjmp	.+32     	; 0x19b2 <GPIO_readPort+0x7e>
			case PORTB_ID:
				return PINB;
    1992:	e6 e3       	ldi	r30, 0x36	; 54
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	20 81       	ld	r18, Z
    1998:	2a 83       	std	Y+2, r18	; 0x02
    199a:	0b c0       	rjmp	.+22     	; 0x19b2 <GPIO_readPort+0x7e>
			case PORTC_ID:
				return PINC;
    199c:	e3 e3       	ldi	r30, 0x33	; 51
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	30 81       	ld	r19, Z
    19a2:	3a 83       	std	Y+2, r19	; 0x02
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <GPIO_readPort+0x7e>
			case PORTD_ID:
				return PIND;
    19a6:	e0 e3       	ldi	r30, 0x30	; 48
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	01 c0       	rjmp	.+2      	; 0x19b2 <GPIO_readPort+0x7e>
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <GPIO_readPort+0x82>
		}
	}
}
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	9d 83       	std	Y+5, r25	; 0x05
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <LCD_init>:
 * 			2. Setup the LCD data mode (4 BIT MODE/8 BIT MODE).
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_init(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	2e 97       	sbiw	r28, 0x0e	; 14
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
	/* Configure direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	62 e0       	ldi	r22, 0x02	; 2
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 ea       	ldi	r26, 0xA0	; 160
    19f6:	b1 e4       	ldi	r27, 0x41	; 65
    19f8:	8b 87       	std	Y+11, r24	; 0x0b
    19fa:	9c 87       	std	Y+12, r25	; 0x0c
    19fc:	ad 87       	std	Y+13, r26	; 0x0d
    19fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a e7       	ldi	r20, 0x7A	; 122
    1a0e:	53 e4       	ldi	r21, 0x43	; 67
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8f 83       	std	Y+7, r24	; 0x07
    1a1a:	98 87       	std	Y+8, r25	; 0x08
    1a1c:	a9 87       	std	Y+9, r26	; 0x09
    1a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e8       	ldi	r20, 0x80	; 128
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <LCD_init+0x7a>
		__ticks = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	57 e4       	ldi	r21, 0x47	; 71
    1a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f5       	brge	.+82     	; 0x1aac <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e2       	ldi	r20, 0x20	; 32
    1a68:	51 e4       	ldi	r21, 0x41	; 65
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <LCD_init+0xda>
    1a84:	89 e1       	ldi	r24, 0x19	; 25
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_init+0xc8>
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <LCD_init+0xbc>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_init+0x104>
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	6f ef       	ldi	r22, 0xFF	; 255
    1ad8:	0e 94 12 0c 	call	0x1824	; 0x1824 <GPIO_setupPortDirection>
	/* Use two lines LCD in 8-bits data mode & (5x7) dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1adc:	88 e3       	ldi	r24, 0x38	; 56
    1ade:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Turn cursor off */
    1ae2:	8c e0       	ldi	r24, 0x0C	; 12
    1ae4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
}
    1aee:	2e 96       	adiw	r28, 0x0e	; 14
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <LCD_sendCommand>:
 * [Args]	:
 * [In] command	: Indicates the command that is sent.
 * [Return]		: Void.
 */
void LCD_sendCommand(uint8 command)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	e9 97       	sbiw	r28, 0x39	; 57
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS = 0 */
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e8       	ldi	r26, 0x80	; 128
    1b26:	bf e3       	ldi	r27, 0x3F	; 63
    1b28:	8d ab       	std	Y+53, r24	; 0x35
    1b2a:	9e ab       	std	Y+54, r25	; 0x36
    1b2c:	af ab       	std	Y+55, r26	; 0x37
    1b2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	6d a9       	ldd	r22, Y+53	; 0x35
    1b32:	7e a9       	ldd	r23, Y+54	; 0x36
    1b34:	8f a9       	ldd	r24, Y+55	; 0x37
    1b36:	98 ad       	ldd	r25, Y+56	; 0x38
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a e7       	ldi	r20, 0x7A	; 122
    1b3e:	53 e4       	ldi	r21, 0x43	; 67
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	89 ab       	std	Y+49, r24	; 0x31
    1b4a:	9a ab       	std	Y+50, r25	; 0x32
    1b4c:	ab ab       	std	Y+51, r26	; 0x33
    1b4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b50:	69 a9       	ldd	r22, Y+49	; 0x31
    1b52:	7a a9       	ldd	r23, Y+50	; 0x32
    1b54:	8b a9       	ldd	r24, Y+51	; 0x33
    1b56:	9c a9       	ldd	r25, Y+52	; 0x34
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_sendCommand+0x72>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	98 ab       	std	Y+48, r25	; 0x30
    1b6e:	8f a7       	std	Y+47, r24	; 0x2f
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b72:	69 a9       	ldd	r22, Y+49	; 0x31
    1b74:	7a a9       	ldd	r23, Y+50	; 0x32
    1b76:	8b a9       	ldd	r24, Y+51	; 0x33
    1b78:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b90:	98 ad       	ldd	r25, Y+56	; 0x38
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	98 ab       	std	Y+48, r25	; 0x30
    1bb0:	8f a7       	std	Y+47, r24	; 0x2f
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <LCD_sendCommand+0xd2>
    1bb4:	89 e1       	ldi	r24, 0x19	; 25
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9e a7       	std	Y+46, r25	; 0x2e
    1bba:	8d a7       	std	Y+45, r24	; 0x2d
    1bbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_sendCommand+0xc0>
    1bc4:	9e a7       	std	Y+46, r25	; 0x2e
    1bc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bca:	98 a9       	ldd	r25, Y+48	; 0x30
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	98 ab       	std	Y+48, r25	; 0x30
    1bd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <LCD_sendCommand+0xb4>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bde:	7a a9       	ldd	r23, Y+50	; 0x32
    1be0:	8b a9       	ldd	r24, Y+51	; 0x33
    1be2:	9c a9       	ldd	r25, Y+52	; 0x34
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	98 ab       	std	Y+48, r25	; 0x30
    1bee:	8f a7       	std	Y+47, r24	; 0x2f
    1bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf4:	9c a7       	std	Y+44, r25	; 0x2c
    1bf6:	8b a7       	std	Y+43, r24	; 0x2b
    1bf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_sendCommand+0xfc>
    1c00:	9c a7       	std	Y+44, r25	; 0x2c
    1c02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	62 e0       	ldi	r22, 0x02	; 2
    1c08:	41 e0       	ldi	r20, 0x01	; 1
    1c0a:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e8       	ldi	r26, 0x80	; 128
    1c14:	bf e3       	ldi	r27, 0x3F	; 63
    1c16:	8f a3       	std	Y+39, r24	; 0x27
    1c18:	98 a7       	std	Y+40, r25	; 0x28
    1c1a:	a9 a7       	std	Y+41, r26	; 0x29
    1c1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c20:	78 a5       	ldd	r23, Y+40	; 0x28
    1c22:	89 a5       	ldd	r24, Y+41	; 0x29
    1c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	53 e4       	ldi	r21, 0x43	; 67
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8b a3       	std	Y+35, r24	; 0x23
    1c38:	9c a3       	std	Y+36, r25	; 0x24
    1c3a:	ad a3       	std	Y+37, r26	; 0x25
    1c3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c40:	7c a1       	ldd	r23, Y+36	; 0x24
    1c42:	8d a1       	ldd	r24, Y+37	; 0x25
    1c44:	9e a1       	ldd	r25, Y+38	; 0x26
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <LCD_sendCommand+0x160>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9a a3       	std	Y+34, r25	; 0x22
    1c5c:	89 a3       	std	Y+33, r24	; 0x21
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c60:	6b a1       	ldd	r22, Y+35	; 0x23
    1c62:	7c a1       	ldd	r23, Y+36	; 0x24
    1c64:	8d a1       	ldd	r24, Y+37	; 0x25
    1c66:	9e a1       	ldd	r25, Y+38	; 0x26
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	6f a1       	ldd	r22, Y+39	; 0x27
    1c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_sendCommand+0x1c0>
    1ca2:	89 e1       	ldi	r24, 0x19	; 25
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	98 a3       	std	Y+32, r25	; 0x20
    1ca8:	8f 8f       	std	Y+31, r24	; 0x1f
    1caa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cac:	98 a1       	ldd	r25, Y+32	; 0x20
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_sendCommand+0x1ae>
    1cb2:	98 a3       	std	Y+32, r25	; 0x20
    1cb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9a a3       	std	Y+34, r25	; 0x22
    1cbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_sendCommand+0x1a2>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6b a1       	ldd	r22, Y+35	; 0x23
    1ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cce:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_sendCommand+0x1ea>
    1cee:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* Write to the data bus from D0 to D7 */
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	69 ad       	ldd	r22, Y+57	; 0x39
    1cf6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <GPIO_writePort>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e8       	ldi	r26, 0x80	; 128
    1d00:	bf e3       	ldi	r27, 0x3F	; 63
    1d02:	89 8f       	std	Y+25, r24	; 0x19
    1d04:	9a 8f       	std	Y+26, r25	; 0x1a
    1d06:	ab 8f       	std	Y+27, r26	; 0x1b
    1d08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8d 8b       	std	Y+21, r24	; 0x15
    1d24:	9e 8b       	std	Y+22, r25	; 0x16
    1d26:	af 8b       	std	Y+23, r26	; 0x17
    1d28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9c 8b       	std	Y+20, r25	; 0x14
    1d48:	8b 8b       	std	Y+19, r24	; 0x13
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	69 8d       	ldd	r22, Y+25	; 0x19
    1d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9c 8b       	std	Y+20, r25	; 0x14
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <LCD_sendCommand+0x2ac>
    1d8e:	89 e1       	ldi	r24, 0x19	; 25
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9a 8b       	std	Y+18, r25	; 0x12
    1d94:	89 8b       	std	Y+17, r24	; 0x11
    1d96:	89 89       	ldd	r24, Y+17	; 0x11
    1d98:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_sendCommand+0x29a>
    1d9e:	9a 8b       	std	Y+18, r25	; 0x12
    1da0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8b 89       	ldd	r24, Y+19	; 0x13
    1da4:	9c 89       	ldd	r25, Y+20	; 0x14
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9c 8b       	std	Y+20, r25	; 0x14
    1daa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8b 89       	ldd	r24, Y+19	; 0x13
    1dae:	9c 89       	ldd	r25, Y+20	; 0x14
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <LCD_sendCommand+0x28e>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	6d 89       	ldd	r22, Y+21	; 0x15
    1db8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dba:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	98 8b       	std	Y+16, r25	; 0x10
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    1dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd4:	98 89       	ldd	r25, Y+16	; 0x10
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_sendCommand+0x2d6>
    1dda:	98 8b       	std	Y+16, r25	; 0x10
    1ddc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e8       	ldi	r26, 0x80	; 128
    1dee:	bf e3       	ldi	r27, 0x3F	; 63
    1df0:	8b 87       	std	Y+11, r24	; 0x0b
    1df2:	9c 87       	std	Y+12, r25	; 0x0c
    1df4:	ad 87       	std	Y+13, r26	; 0x0d
    1df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a e7       	ldi	r20, 0x7A	; 122
    1e06:	53 e4       	ldi	r21, 0x43	; 67
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	8f 83       	std	Y+7, r24	; 0x07
    1e12:	98 87       	std	Y+8, r25	; 0x08
    1e14:	a9 87       	std	Y+9, r26	; 0x09
    1e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	4c f5       	brge	.+82     	; 0x1ea4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <LCD_sendCommand+0x39a>
    1e7c:	89 e1       	ldi	r24, 0x19	; 25
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9c 83       	std	Y+4, r25	; 0x04
    1e82:	8b 83       	std	Y+3, r24	; 0x03
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_sendCommand+0x388>
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <LCD_sendCommand+0x37c>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea6:	78 85       	ldd	r23, Y+8	; 0x08
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_sendCommand+0x3c4>
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    1ecc:	e9 96       	adiw	r28, 0x39	; 57
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <LCD_displayCharacter>:
 * [Args]	:
 * [In] data	: Indicates the character that is sent.
 * [Return]		: Void.
 */
void LCD_displayCharacter(uint8 data)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	e9 97       	sbiw	r28, 0x39	; 57
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS = 1 */
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e8       	ldi	r26, 0x80	; 128
    1f04:	bf e3       	ldi	r27, 0x3F	; 63
    1f06:	8d ab       	std	Y+53, r24	; 0x35
    1f08:	9e ab       	std	Y+54, r25	; 0x36
    1f0a:	af ab       	std	Y+55, r26	; 0x37
    1f0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f10:	7e a9       	ldd	r23, Y+54	; 0x36
    1f12:	8f a9       	ldd	r24, Y+55	; 0x37
    1f14:	98 ad       	ldd	r25, Y+56	; 0x38
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a e7       	ldi	r20, 0x7A	; 122
    1f1c:	53 e4       	ldi	r21, 0x43	; 67
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	89 ab       	std	Y+49, r24	; 0x31
    1f28:	9a ab       	std	Y+50, r25	; 0x32
    1f2a:	ab ab       	std	Y+51, r26	; 0x33
    1f2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f30:	7a a9       	ldd	r23, Y+50	; 0x32
    1f32:	8b a9       	ldd	r24, Y+51	; 0x33
    1f34:	9c a9       	ldd	r25, Y+52	; 0x34
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	98 ab       	std	Y+48, r25	; 0x30
    1f4c:	8f a7       	std	Y+47, r24	; 0x2f
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f50:	69 a9       	ldd	r22, Y+49	; 0x31
    1f52:	7a a9       	ldd	r23, Y+50	; 0x32
    1f54:	8b a9       	ldd	r24, Y+51	; 0x33
    1f56:	9c a9       	ldd	r25, Y+52	; 0x34
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	98 ab       	std	Y+48, r25	; 0x30
    1f8e:	8f a7       	std	Y+47, r24	; 0x2f
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_displayCharacter+0xd2>
    1f92:	89 e1       	ldi	r24, 0x19	; 25
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9e a7       	std	Y+46, r25	; 0x2e
    1f98:	8d a7       	std	Y+45, r24	; 0x2d
    1f9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_displayCharacter+0xc0>
    1fa2:	9e a7       	std	Y+46, r25	; 0x2e
    1fa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_displayCharacter+0xb4>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	98 ab       	std	Y+48, r25	; 0x30
    1fcc:	8f a7       	std	Y+47, r24	; 0x2f
    1fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd2:	9c a7       	std	Y+44, r25	; 0x2c
    1fd4:	8b a7       	std	Y+43, r24	; 0x2b
    1fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_displayCharacter+0xfc>
    1fde:	9c a7       	std	Y+44, r25	; 0x2c
    1fe0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E = 1 */
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	62 e0       	ldi	r22, 0x02	; 2
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 e8       	ldi	r26, 0x80	; 128
    1ff2:	bf e3       	ldi	r27, 0x3F	; 63
    1ff4:	8f a3       	std	Y+39, r24	; 0x27
    1ff6:	98 a7       	std	Y+40, r25	; 0x28
    1ff8:	a9 a7       	std	Y+41, r26	; 0x29
    1ffa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffe:	78 a5       	ldd	r23, Y+40	; 0x28
    2000:	89 a5       	ldd	r24, Y+41	; 0x29
    2002:	9a a5       	ldd	r25, Y+42	; 0x2a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a e7       	ldi	r20, 0x7A	; 122
    200a:	53 e4       	ldi	r21, 0x43	; 67
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8b a3       	std	Y+35, r24	; 0x23
    2016:	9c a3       	std	Y+36, r25	; 0x24
    2018:	ad a3       	std	Y+37, r26	; 0x25
    201a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    201c:	6b a1       	ldd	r22, Y+35	; 0x23
    201e:	7c a1       	ldd	r23, Y+36	; 0x24
    2020:	8d a1       	ldd	r24, Y+37	; 0x25
    2022:	9e a1       	ldd	r25, Y+38	; 0x26
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <LCD_displayCharacter+0x160>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9a a3       	std	Y+34, r25	; 0x22
    203a:	89 a3       	std	Y+33, r24	; 0x21
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    203e:	6b a1       	ldd	r22, Y+35	; 0x23
    2040:	7c a1       	ldd	r23, Y+36	; 0x24
    2042:	8d a1       	ldd	r24, Y+37	; 0x25
    2044:	9e a1       	ldd	r25, Y+38	; 0x26
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	6f a1       	ldd	r22, Y+39	; 0x27
    2058:	78 a5       	ldd	r23, Y+40	; 0x28
    205a:	89 a5       	ldd	r24, Y+41	; 0x29
    205c:	9a a5       	ldd	r25, Y+42	; 0x2a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	89 a3       	std	Y+33, r24	; 0x21
    207e:	0f c0       	rjmp	.+30     	; 0x209e <LCD_displayCharacter+0x1c0>
    2080:	89 e1       	ldi	r24, 0x19	; 25
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	98 a3       	std	Y+32, r25	; 0x20
    2086:	8f 8f       	std	Y+31, r24	; 0x1f
    2088:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208a:	98 a1       	ldd	r25, Y+32	; 0x20
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_displayCharacter+0x1ae>
    2090:	98 a3       	std	Y+32, r25	; 0x20
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	89 a1       	ldd	r24, Y+33	; 0x21
    2096:	9a a1       	ldd	r25, Y+34	; 0x22
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <LCD_displayCharacter+0x1a2>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	89 a1       	ldd	r24, Y+33	; 0x21
    20be:	9a a1       	ldd	r25, Y+34	; 0x22
    20c0:	9e 8f       	std	Y+30, r25	; 0x1e
    20c2:	8d 8f       	std	Y+29, r24	; 0x1d
    20c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_displayCharacter+0x1ea>
    20cc:	9e 8f       	std	Y+30, r25	; 0x1e
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* Write to the data bus from D0 to D7 */
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	69 ad       	ldd	r22, Y+57	; 0x39
    20d4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <GPIO_writePort>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e8       	ldi	r26, 0x80	; 128
    20de:	bf e3       	ldi	r27, 0x3F	; 63
    20e0:	89 8f       	std	Y+25, r24	; 0x19
    20e2:	9a 8f       	std	Y+26, r25	; 0x1a
    20e4:	ab 8f       	std	Y+27, r26	; 0x1b
    20e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	53 e4       	ldi	r21, 0x43	; 67
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8d 8b       	std	Y+21, r24	; 0x15
    2102:	9e 8b       	std	Y+22, r25	; 0x16
    2104:	af 8b       	std	Y+23, r26	; 0x17
    2106:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2108:	6d 89       	ldd	r22, Y+21	; 0x15
    210a:	7e 89       	ldd	r23, Y+22	; 0x16
    210c:	8f 89       	ldd	r24, Y+23	; 0x17
    210e:	98 8d       	ldd	r25, Y+24	; 0x18
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9c 8b       	std	Y+20, r25	; 0x14
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    212a:	6d 89       	ldd	r22, Y+21	; 0x15
    212c:	7e 89       	ldd	r23, Y+22	; 0x16
    212e:	8f 89       	ldd	r24, Y+23	; 0x17
    2130:	98 8d       	ldd	r25, Y+24	; 0x18
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	69 8d       	ldd	r22, Y+25	; 0x19
    2144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9c 8b       	std	Y+20, r25	; 0x14
    2168:	8b 8b       	std	Y+19, r24	; 0x13
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_displayCharacter+0x2ac>
    216c:	89 e1       	ldi	r24, 0x19	; 25
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9a 8b       	std	Y+18, r25	; 0x12
    2172:	89 8b       	std	Y+17, r24	; 0x11
    2174:	89 89       	ldd	r24, Y+17	; 0x11
    2176:	9a 89       	ldd	r25, Y+18	; 0x12
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_displayCharacter+0x29a>
    217c:	9a 8b       	std	Y+18, r25	; 0x12
    217e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	8b 89       	ldd	r24, Y+19	; 0x13
    2182:	9c 89       	ldd	r25, Y+20	; 0x14
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_displayCharacter+0x28e>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9c 8b       	std	Y+20, r25	; 0x14
    21a6:	8b 8b       	std	Y+19, r24	; 0x13
    21a8:	8b 89       	ldd	r24, Y+19	; 0x13
    21aa:	9c 89       	ldd	r25, Y+20	; 0x14
    21ac:	98 8b       	std	Y+16, r25	; 0x10
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	98 89       	ldd	r25, Y+16	; 0x10
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_displayCharacter+0x2d6>
    21b8:	98 8b       	std	Y+16, r25	; 0x10
    21ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E = 0 */
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e8       	ldi	r26, 0x80	; 128
    21cc:	bf e3       	ldi	r27, 0x3F	; 63
    21ce:	8b 87       	std	Y+11, r24	; 0x0b
    21d0:	9c 87       	std	Y+12, r25	; 0x0c
    21d2:	ad 87       	std	Y+13, r26	; 0x0d
    21d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a e7       	ldi	r20, 0x7A	; 122
    21e4:	53 e4       	ldi	r21, 0x43	; 67
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8f 83       	std	Y+7, r24	; 0x07
    21f0:	98 87       	std	Y+8, r25	; 0x08
    21f2:	a9 87       	std	Y+9, r26	; 0x09
    21f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	6b 85       	ldd	r22, Y+11	; 0x0b
    2232:	7c 85       	ldd	r23, Y+12	; 0x0c
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <LCD_displayCharacter+0x39a>
    225a:	89 e1       	ldi	r24, 0x19	; 25
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_displayCharacter+0x388>
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f7       	brne	.-38     	; 0x225a <LCD_displayCharacter+0x37c>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_displayCharacter+0x3c4>
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13 ns */

#endif
}
    22aa:	e9 96       	adiw	r28, 0x39	; 57
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <LCD_displayString>:
 * [Args] 	:
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayString(const uint8 *string)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <LCD_displayString+0x6>
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
	/* Display each character in the recieved string array */
	uint8 i = 0;
    22cc:	19 82       	std	Y+1, r1	; 0x01
    22ce:	0e c0       	rjmp	.+28     	; 0x22ec <LCD_displayString+0x30>
	while (string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	9b 81       	ldd	r25, Y+3	; 0x03
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 0f       	add	r30, r18
    22de:	f3 1f       	adc	r31, r19
    22e0:	80 81       	ld	r24, Z
    22e2:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_displayCharacter>
		i++;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const uint8 *string)
{
	/* Display each character in the recieved string array */
	uint8 i = 0;
	while (string[i] != '\0')
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	9b 81       	ldd	r25, Y+3	; 0x03
    22f6:	fc 01       	movw	r30, r24
    22f8:	e2 0f       	add	r30, r18
    22fa:	f3 1f       	adc	r31, r19
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	39 f7       	brne	.-50     	; 0x22d0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*string);
		string++;
	}
	 *********************************************************/
}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <LCD_moveCursor>:
 * [In] row		: Indicates the row required.
 * [In] column	: Indicates the column required.
 * [Return]		: Void.
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <LCD_moveCursor+0x6>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <LCD_moveCursor+0x8>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	6a 83       	std	Y+2, r22	; 0x02
	/* Calculate the address in the LCD DDRAM, */
	/* then move the LCD cursor to this specific address. */
	switch (row)
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	3c 83       	std	Y+4, r19	; 0x04
    2326:	2b 83       	std	Y+3, r18	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	91 05       	cpc	r25, r1
    2330:	d1 f0       	breq	.+52     	; 0x2366 <LCD_moveCursor+0x58>
    2332:	2b 81       	ldd	r18, Y+3	; 0x03
    2334:	3c 81       	ldd	r19, Y+4	; 0x04
    2336:	22 30       	cpi	r18, 0x02	; 2
    2338:	31 05       	cpc	r19, r1
    233a:	2c f4       	brge	.+10     	; 0x2346 <LCD_moveCursor+0x38>
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	61 f0       	breq	.+24     	; 0x235c <LCD_moveCursor+0x4e>
    2344:	21 c0       	rjmp	.+66     	; 0x2388 <LCD_moveCursor+0x7a>
    2346:	2b 81       	ldd	r18, Y+3	; 0x03
    2348:	3c 81       	ldd	r19, Y+4	; 0x04
    234a:	22 30       	cpi	r18, 0x02	; 2
    234c:	31 05       	cpc	r19, r1
    234e:	89 f0       	breq	.+34     	; 0x2372 <LCD_moveCursor+0x64>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	83 30       	cpi	r24, 0x03	; 3
    2356:	91 05       	cpc	r25, r1
    2358:	91 f0       	breq	.+36     	; 0x237e <LCD_moveCursor+0x70>
    235a:	16 c0       	rjmp	.+44     	; 0x2388 <LCD_moveCursor+0x7a>
	{
		case 0:
			LCD_sendCommand(column | LCD_SET_CURSOR_LOCATION);
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	80 68       	ori	r24, 0x80	; 128
    2360:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
    2364:	11 c0       	rjmp	.+34     	; 0x2388 <LCD_moveCursor+0x7a>
		break;
		case 1:
			LCD_sendCommand((column + 0x40) | LCD_SET_CURSOR_LOCATION);
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	80 5c       	subi	r24, 0xC0	; 192
    236a:	80 68       	ori	r24, 0x80	; 128
    236c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
    2370:	0b c0       	rjmp	.+22     	; 0x2388 <LCD_moveCursor+0x7a>
		break;
		case 2:
			LCD_sendCommand((column + 0x10) | LCD_SET_CURSOR_LOCATION);
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	80 5f       	subi	r24, 0xF0	; 240
    2376:	80 68       	ori	r24, 0x80	; 128
    2378:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
    237c:	05 c0       	rjmp	.+10     	; 0x2388 <LCD_moveCursor+0x7a>
		break;
		case 3:
			LCD_sendCommand((column + 0x50) | LCD_SET_CURSOR_LOCATION);
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	80 5b       	subi	r24, 0xB0	; 176
    2382:	80 68       	ori	r24, 0x80	; 128
    2384:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
		break;
	}
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <LCD_displayStringRowColumn>:
 * [In] column	: Indicates the column required.
 * [In] string	: Indicates the string that is sent.
 * [Return]		: Void.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *string)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <LCD_displayStringRowColumn+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <LCD_displayStringRowColumn+0x8>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	6a 83       	std	Y+2, r22	; 0x02
    23a6:	5c 83       	std	Y+4, r21	; 0x04
    23a8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column); /* Go to to the specified LCD position */
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	6a 81       	ldd	r22, Y+2	; 0x02
    23ae:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_moveCursor>
	LCD_displayString(string); /* Display string */
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_displayString>
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <LCD_intgerToString>:
 * [Args]	:
 * [In] data	: Indicates the decimal value required.
 * [Return]		: Void.
 */
void LCD_intgerToString(uint16 data)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	62 97       	sbiw	r28, 0x12	; 18
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	9a 8b       	std	Y+18, r25	; 0x12
    23de:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; /* Hold the ASCII result */
	itoa(data, buffer, 10); /* Convert data to it's ASCII value - 10 for decimal */
    23e0:	89 89       	ldd	r24, Y+17	; 0x11
    23e2:	9a 89       	ldd	r25, Y+18	; 0x12
    23e4:	9e 01       	movw	r18, r28
    23e6:	2f 5f       	subi	r18, 0xFF	; 255
    23e8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ea:	b9 01       	movw	r22, r18
    23ec:	4a e0       	ldi	r20, 0x0A	; 10
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <itoa>
	LCD_displayString(buffer); /* Display string */
    23f4:	ce 01       	movw	r24, r28
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_displayString>
}
    23fc:	62 96       	adiw	r28, 0x12	; 18
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_clearScreen>:
 * 		Send the clear screen command
 * [Args]	: Void.
 * [Return]	: Void.
 */
void LCD_clearScreen(void)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_sendCommand>
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <LM35_getTemperature>:
 * [Args]	:
 * [Out] g_LM35TempValue	: Holds last successful sensor calculation.
 * [Return]					: Void.
 */
uint8 LM35_getTemperature(void)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <LM35_getTemperature+0x6>
    2428:	0f 92       	push	r0
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62

	uint8 LM35TempValue = 0; /* Hold temperature value */
    242e:	1b 82       	std	Y+3, r1	; 0x03
				* SENSOR_MAX_TEMPERATURE * ADC_REF_VOLT_VALUE)
				/ (ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE));

#else

	uint16 ADCRead = 0; /* Hold ADC conversion value */
    2430:	1a 82       	std	Y+2, r1	; 0x02
    2432:	19 82       	std	Y+1, r1	; 0x01
	/* Get ADC conversion value */
	ADCRead = ADC_readChannel(SENSOR_CHANNEL_ID);
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	0e 94 30 08 	call	0x1060	; 0x1060 <ADC_readChannel>
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate the temperature from the ADC value*/
	LM35TempValue =
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	cc 01       	movw	r24, r24
    2444:	a0 e0       	ldi	r26, 0x00	; 0
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	26 e9       	ldi	r18, 0x96	; 150
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__mulsi3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	2a e0       	ldi	r18, 0x0A	; 10
    246e:	37 ed       	ldi	r19, 0xD7	; 215
    2470:	43 e2       	ldi	r20, 0x23	; 35
    2472:	50 e4       	ldi	r21, 0x40	; 64
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 ed       	ldi	r19, 0xD0	; 208
    2484:	4f eb       	ldi	r20, 0xBF	; 191
    2486:	54 e4       	ldi	r21, 0x44	; 68
    2488:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8b 83       	std	Y+3, r24	; 0x03
					* ADC_REF_VOLT_VALUE)
					/ (ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE));

#endif

	return LM35TempValue;
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	08 95       	ret

000024ac <__vector_11>:
 * [Interrupt Vector]	: TIMER0_OVF_vect
 * [Description]		:
 * 		An interrupt that acts upon overflow of timer0.
 */
ISR(TIMER0_OVF_vect)
{
    24ac:	1f 92       	push	r1
    24ae:	0f 92       	push	r0
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	0f 92       	push	r0
    24b4:	11 24       	eor	r1, r1
    24b6:	2f 93       	push	r18
    24b8:	3f 93       	push	r19
    24ba:	4f 93       	push	r20
    24bc:	5f 93       	push	r21
    24be:	6f 93       	push	r22
    24c0:	7f 93       	push	r23
    24c2:	8f 93       	push	r24
    24c4:	9f 93       	push	r25
    24c6:	af 93       	push	r26
    24c8:	bf 93       	push	r27
    24ca:	ef 93       	push	r30
    24cc:	ff 93       	push	r31
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    24d6:	80 91 88 01 	lds	r24, 0x0188
    24da:	90 91 89 01 	lds	r25, 0x0189
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	29 f0       	breq	.+10     	; 0x24ec <__vector_11+0x40>
	{
		(*g_timer0CallBack_Ptr)(); /* Execute callback function */
    24e2:	e0 91 88 01 	lds	r30, 0x0188
    24e6:	f0 91 89 01 	lds	r31, 0x0189
    24ea:	09 95       	icall
	}
}
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	ff 91       	pop	r31
    24f2:	ef 91       	pop	r30
    24f4:	bf 91       	pop	r27
    24f6:	af 91       	pop	r26
    24f8:	9f 91       	pop	r25
    24fa:	8f 91       	pop	r24
    24fc:	7f 91       	pop	r23
    24fe:	6f 91       	pop	r22
    2500:	5f 91       	pop	r21
    2502:	4f 91       	pop	r20
    2504:	3f 91       	pop	r19
    2506:	2f 91       	pop	r18
    2508:	0f 90       	pop	r0
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	0f 90       	pop	r0
    250e:	1f 90       	pop	r1
    2510:	18 95       	reti

00002512 <__vector_10>:
 * [Interrupt Vector]	: TIMER0_COMP_vect
 * [Description]		:
 * 		An interrupt that acts upon compare match of timer0.
 */
ISR(TIMER0_COMP_vect)
{
    2512:	1f 92       	push	r1
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	0f 92       	push	r0
    251a:	11 24       	eor	r1, r1
    251c:	2f 93       	push	r18
    251e:	3f 93       	push	r19
    2520:	4f 93       	push	r20
    2522:	5f 93       	push	r21
    2524:	6f 93       	push	r22
    2526:	7f 93       	push	r23
    2528:	8f 93       	push	r24
    252a:	9f 93       	push	r25
    252c:	af 93       	push	r26
    252e:	bf 93       	push	r27
    2530:	ef 93       	push	r30
    2532:	ff 93       	push	r31
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBack_Ptr != NULL_PTR) /* If callback function pointer is not void */
    253c:	80 91 88 01 	lds	r24, 0x0188
    2540:	90 91 89 01 	lds	r25, 0x0189
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	29 f0       	breq	.+10     	; 0x2552 <__vector_10+0x40>
	{
		(*g_timer0CallBack_Ptr)(); /* Execute callback function */
    2548:	e0 91 88 01 	lds	r30, 0x0188
    254c:	f0 91 89 01 	lds	r31, 0x0189
    2550:	09 95       	icall
	}
}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	ff 91       	pop	r31
    2558:	ef 91       	pop	r30
    255a:	bf 91       	pop	r27
    255c:	af 91       	pop	r26
    255e:	9f 91       	pop	r25
    2560:	8f 91       	pop	r24
    2562:	7f 91       	pop	r23
    2564:	6f 91       	pop	r22
    2566:	5f 91       	pop	r21
    2568:	4f 91       	pop	r20
    256a:	3f 91       	pop	r19
    256c:	2f 91       	pop	r18
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <Timer0_init>:
 * [In] timerConfig		: Contains selected mode, selected output compare mode and
 * 						  interrupt state.
 * [Return]				: Void.
 */
void Timer0_init(const Timer_initConfig *timerConfig)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	2d 97       	sbiw	r28, 0x0d	; 13
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
	/* Clear previous timer0 initialization data */
	CLEAR_REG(TCCR0);
    2590:	e3 e5       	ldi	r30, 0x53	; 83
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	20 81       	ld	r18, Z
    2596:	e3 e5       	ldi	r30, 0x53	; 83
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	10 82       	st	Z, r1
	/* Select timer mode */
	switch ((*timerConfig).mode)
    259c:	e9 81       	ldd	r30, Y+1	; 0x01
    259e:	fa 81       	ldd	r31, Y+2	; 0x02
    25a0:	80 81       	ld	r24, Z
    25a2:	8f 70       	andi	r24, 0x0F	; 15
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	3c 87       	std	Y+12, r19	; 0x0c
    25aa:	2b 87       	std	Y+11, r18	; 0x0b
    25ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	91 05       	cpc	r25, r1
    25b4:	e9 f0       	breq	.+58     	; 0x25f0 <Timer0_init+0x78>
    25b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    25b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    25ba:	22 30       	cpi	r18, 0x02	; 2
    25bc:	31 05       	cpc	r19, r1
    25be:	2c f4       	brge	.+10     	; 0x25ca <Timer0_init+0x52>
    25c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <Timer0_init+0x68>
    25c8:	38 c0       	rjmp	.+112    	; 0x263a <Timer0_init+0xc2>
    25ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    25cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    25ce:	22 30       	cpi	r18, 0x02	; 2
    25d0:	31 05       	cpc	r19, r1
    25d2:	b1 f0       	breq	.+44     	; 0x2600 <Timer0_init+0x88>
    25d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    25d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	91 05       	cpc	r25, r1
    25dc:	01 f1       	breq	.+64     	; 0x261e <Timer0_init+0xa6>
    25de:	2d c0       	rjmp	.+90     	; 0x263a <Timer0_init+0xc2>
	{
		case TIMER8BIT_NORMAL:
			SET_BIT(TCCR0, FOC0); /* Only enable in non-PWM mode */
    25e0:	a3 e5       	ldi	r26, 0x53	; 83
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e3 e5       	ldi	r30, 0x53	; 83
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	80 68       	ori	r24, 0x80	; 128
    25ec:	8c 93       	st	X, r24
    25ee:	25 c0       	rjmp	.+74     	; 0x263a <Timer0_init+0xc2>
		break;
		case TIMER8BIT_PHASE_PWM:
			SET_BIT(TCCR0, WGM00);
    25f0:	a3 e5       	ldi	r26, 0x53	; 83
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e3 e5       	ldi	r30, 0x53	; 83
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	80 64       	ori	r24, 0x40	; 64
    25fc:	8c 93       	st	X, r24
    25fe:	1d c0       	rjmp	.+58     	; 0x263a <Timer0_init+0xc2>
		break;
		case TIMER8BIT_CTC:
			SET_BIT(TCCR0, FOC0); /* Only enable in non-PWM mode */
    2600:	a3 e5       	ldi	r26, 0x53	; 83
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e3 e5       	ldi	r30, 0x53	; 83
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	80 68       	ori	r24, 0x80	; 128
    260c:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    260e:	a3 e5       	ldi	r26, 0x53	; 83
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e3 e5       	ldi	r30, 0x53	; 83
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	88 60       	ori	r24, 0x08	; 8
    261a:	8c 93       	st	X, r24
    261c:	0e c0       	rjmp	.+28     	; 0x263a <Timer0_init+0xc2>
		break;
		case TIMER8BIT_FAST_PWM:
			SET_BIT(TCCR0, WGM01);
    261e:	a3 e5       	ldi	r26, 0x53	; 83
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e3 e5       	ldi	r30, 0x53	; 83
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	88 60       	ori	r24, 0x08	; 8
    262a:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM00);
    262c:	a3 e5       	ldi	r26, 0x53	; 83
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e3 e5       	ldi	r30, 0x53	; 83
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	80 64       	ori	r24, 0x40	; 64
    2638:	8c 93       	st	X, r24
		break;
	}
	if ((*timerConfig).mode == TIMER8BIT_CTC)
    263a:	e9 81       	ldd	r30, Y+1	; 0x01
    263c:	fa 81       	ldd	r31, Y+2	; 0x02
    263e:	80 81       	ld	r24, Z
    2640:	8f 70       	andi	r24, 0x0F	; 15
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	09 f0       	breq	.+2      	; 0x2648 <Timer0_init+0xd0>
    2646:	a1 c0       	rjmp	.+322    	; 0x278a <Timer0_init+0x212>
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    2648:	e9 81       	ldd	r30, Y+1	; 0x01
    264a:	fa 81       	ldd	r31, Y+2	; 0x02
    264c:	80 81       	ld	r24, Z
    264e:	82 95       	swap	r24
    2650:	86 95       	lsr	r24
    2652:	86 95       	lsr	r24
    2654:	83 70       	andi	r24, 0x03	; 3
    2656:	81 70       	andi	r24, 0x01	; 1
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	3a 87       	std	Y+10, r19	; 0x0a
    265e:	29 87       	std	Y+9, r18	; 0x09
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	a1 f0       	breq	.+40     	; 0x2690 <Timer0_init+0x118>
    2668:	29 85       	ldd	r18, Y+9	; 0x09
    266a:	3a 85       	ldd	r19, Y+10	; 0x0a
    266c:	21 30       	cpi	r18, 0x01	; 1
    266e:	31 05       	cpc	r19, r1
    2670:	e9 f4       	brne	.+58     	; 0x26ac <Timer0_init+0x134>
		{
			case LOGIC_HIGH:
				SET_BIT(TIMSK, OCIE0);
    2672:	a9 e5       	ldi	r26, 0x59	; 89
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e9 e5       	ldi	r30, 0x59	; 89
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	82 60       	ori	r24, 0x02	; 2
    267e:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    2680:	a9 e5       	ldi	r26, 0x59	; 89
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e9 e5       	ldi	r30, 0x59	; 89
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8e 7f       	andi	r24, 0xFE	; 254
    268c:	8c 93       	st	X, r24
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <Timer0_init+0x134>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE0);
    2690:	a9 e5       	ldi	r26, 0x59	; 89
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e9 e5       	ldi	r30, 0x59	; 89
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	8d 7f       	andi	r24, 0xFD	; 253
    269c:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    269e:	a9 e5       	ldi	r26, 0x59	; 89
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e9 e5       	ldi	r30, 0x59	; 89
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	8e 7f       	andi	r24, 0xFE	; 254
    26aa:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    26ac:	e9 81       	ldd	r30, Y+1	; 0x01
    26ae:	fa 81       	ldd	r31, Y+2	; 0x02
    26b0:	80 81       	ld	r24, Z
    26b2:	82 95       	swap	r24
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	83 70       	andi	r24, 0x03	; 3
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	38 87       	std	Y+8, r19	; 0x08
    26be:	2f 83       	std	Y+7, r18	; 0x07
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	98 85       	ldd	r25, Y+8	; 0x08
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	91 05       	cpc	r25, r1
    26c8:	21 f1       	breq	.+72     	; 0x2712 <Timer0_init+0x19a>
    26ca:	2f 81       	ldd	r18, Y+7	; 0x07
    26cc:	38 85       	ldd	r19, Y+8	; 0x08
    26ce:	22 30       	cpi	r18, 0x02	; 2
    26d0:	31 05       	cpc	r19, r1
    26d2:	2c f4       	brge	.+10     	; 0x26de <Timer0_init+0x166>
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	98 85       	ldd	r25, Y+8	; 0x08
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	61 f0       	breq	.+24     	; 0x26f4 <Timer0_init+0x17c>
    26dc:	e3 c0       	rjmp	.+454    	; 0x28a4 <Timer0_init+0x32c>
    26de:	2f 81       	ldd	r18, Y+7	; 0x07
    26e0:	38 85       	ldd	r19, Y+8	; 0x08
    26e2:	22 30       	cpi	r18, 0x02	; 2
    26e4:	31 05       	cpc	r19, r1
    26e6:	49 f1       	breq	.+82     	; 0x273a <Timer0_init+0x1c2>
    26e8:	8f 81       	ldd	r24, Y+7	; 0x07
    26ea:	98 85       	ldd	r25, Y+8	; 0x08
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	91 05       	cpc	r25, r1
    26f0:	c1 f1       	breq	.+112    	; 0x2762 <Timer0_init+0x1ea>
    26f2:	d8 c0       	rjmp	.+432    	; 0x28a4 <Timer0_init+0x32c>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR0, COM01);
    26f4:	a3 e5       	ldi	r26, 0x53	; 83
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e3 e5       	ldi	r30, 0x53	; 83
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	8f 7d       	andi	r24, 0xDF	; 223
    2700:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    2702:	a3 e5       	ldi	r26, 0x53	; 83
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e3 e5       	ldi	r30, 0x53	; 83
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8f 7e       	andi	r24, 0xEF	; 239
    270e:	8c 93       	st	X, r24
    2710:	c9 c0       	rjmp	.+402    	; 0x28a4 <Timer0_init+0x32c>
			break;
			case TOGGLE_OC:
				CLEAR_BIT(TCCR0, COM01);
    2712:	a3 e5       	ldi	r26, 0x53	; 83
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e3 e5       	ldi	r30, 0x53	; 83
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8f 7d       	andi	r24, 0xDF	; 223
    271e:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    2720:	a3 e5       	ldi	r26, 0x53	; 83
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e3 e5       	ldi	r30, 0x53	; 83
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	80 61       	ori	r24, 0x10	; 16
    272c:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	63 e0       	ldi	r22, 0x03	; 3
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
    2738:	b5 c0       	rjmp	.+362    	; 0x28a4 <Timer0_init+0x32c>
			break;
			case CLEAR_OC:
				SET_BIT(TCCR0, COM01);
    273a:	a3 e5       	ldi	r26, 0x53	; 83
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e3 e5       	ldi	r30, 0x53	; 83
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	80 62       	ori	r24, 0x20	; 32
    2746:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    2748:	a3 e5       	ldi	r26, 0x53	; 83
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e3 e5       	ldi	r30, 0x53	; 83
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8f 7e       	andi	r24, 0xEF	; 239
    2754:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	63 e0       	ldi	r22, 0x03	; 3
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
    2760:	a1 c0       	rjmp	.+322    	; 0x28a4 <Timer0_init+0x32c>
			break;
			case SET_OC:
				SET_BIT(TCCR0, COM01);
    2762:	a3 e5       	ldi	r26, 0x53	; 83
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e3 e5       	ldi	r30, 0x53	; 83
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 62       	ori	r24, 0x20	; 32
    276e:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    2770:	a3 e5       	ldi	r26, 0x53	; 83
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e3 e5       	ldi	r30, 0x53	; 83
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	80 61       	ori	r24, 0x10	; 16
    277c:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	63 e0       	ldi	r22, 0x03	; 3
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
    2788:	8d c0       	rjmp	.+282    	; 0x28a4 <Timer0_init+0x32c>
		}
	}
	else
	{
		/* Change interrupt state accordingly */
		switch ((*timerConfig).interruptEnable)
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	80 81       	ld	r24, Z
    2790:	82 95       	swap	r24
    2792:	86 95       	lsr	r24
    2794:	86 95       	lsr	r24
    2796:	83 70       	andi	r24, 0x03	; 3
    2798:	81 70       	andi	r24, 0x01	; 1
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	3e 83       	std	Y+6, r19	; 0x06
    27a0:	2d 83       	std	Y+5, r18	; 0x05
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	a1 f0       	breq	.+40     	; 0x27d2 <Timer0_init+0x25a>
    27aa:	2d 81       	ldd	r18, Y+5	; 0x05
    27ac:	3e 81       	ldd	r19, Y+6	; 0x06
    27ae:	21 30       	cpi	r18, 0x01	; 1
    27b0:	31 05       	cpc	r19, r1
    27b2:	e9 f4       	brne	.+58     	; 0x27ee <Timer0_init+0x276>
		{
			case LOGIC_HIGH:
				CLEAR_BIT(TIMSK, OCIE0);
    27b4:	a9 e5       	ldi	r26, 0x59	; 89
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e9 e5       	ldi	r30, 0x59	; 89
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	8d 7f       	andi	r24, 0xFD	; 253
    27c0:	8c 93       	st	X, r24
				SET_BIT(TIMSK, TOIE0);
    27c2:	a9 e5       	ldi	r26, 0x59	; 89
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e9 e5       	ldi	r30, 0x59	; 89
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	81 60       	ori	r24, 0x01	; 1
    27ce:	8c 93       	st	X, r24
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <Timer0_init+0x276>
			break;
			case LOGIC_LOW:
				CLEAR_BIT(TIMSK, OCIE0);
    27d2:	a9 e5       	ldi	r26, 0x59	; 89
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e9 e5       	ldi	r30, 0x59	; 89
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	8d 7f       	andi	r24, 0xFD	; 253
    27de:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE0);
    27e0:	a9 e5       	ldi	r26, 0x59	; 89
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e9 e5       	ldi	r30, 0x59	; 89
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8e 7f       	andi	r24, 0xFE	; 254
    27ec:	8c 93       	st	X, r24
			break;
		}
		/* Set compare output mode accordingly */
		switch ((*timerConfig).compareOutputMode)
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	80 81       	ld	r24, Z
    27f4:	82 95       	swap	r24
    27f6:	8f 70       	andi	r24, 0x0F	; 15
    27f8:	83 70       	andi	r24, 0x03	; 3
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3c 83       	std	Y+4, r19	; 0x04
    2800:	2b 83       	std	Y+3, r18	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <Timer0_init+0x296>
    280c:	4b c0       	rjmp	.+150    	; 0x28a4 <Timer0_init+0x32c>
    280e:	2b 81       	ldd	r18, Y+3	; 0x03
    2810:	3c 81       	ldd	r19, Y+4	; 0x04
    2812:	22 30       	cpi	r18, 0x02	; 2
    2814:	31 05       	cpc	r19, r1
    2816:	2c f4       	brge	.+10     	; 0x2822 <Timer0_init+0x2aa>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	61 f0       	breq	.+24     	; 0x2838 <Timer0_init+0x2c0>
    2820:	41 c0       	rjmp	.+130    	; 0x28a4 <Timer0_init+0x32c>
    2822:	2b 81       	ldd	r18, Y+3	; 0x03
    2824:	3c 81       	ldd	r19, Y+4	; 0x04
    2826:	22 30       	cpi	r18, 0x02	; 2
    2828:	31 05       	cpc	r19, r1
    282a:	a9 f0       	breq	.+42     	; 0x2856 <Timer0_init+0x2de>
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	83 30       	cpi	r24, 0x03	; 3
    2832:	91 05       	cpc	r25, r1
    2834:	21 f1       	breq	.+72     	; 0x287e <Timer0_init+0x306>
    2836:	36 c0       	rjmp	.+108    	; 0x28a4 <Timer0_init+0x32c>
		{
			case NORMAL_OC:
				CLEAR_BIT(TCCR0, COM01);
    2838:	a3 e5       	ldi	r26, 0x53	; 83
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e3 e5       	ldi	r30, 0x53	; 83
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8f 7d       	andi	r24, 0xDF	; 223
    2844:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    2846:	a3 e5       	ldi	r26, 0x53	; 83
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e3 e5       	ldi	r30, 0x53	; 83
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8f 7e       	andi	r24, 0xEF	; 239
    2852:	8c 93       	st	X, r24
    2854:	27 c0       	rjmp	.+78     	; 0x28a4 <Timer0_init+0x32c>
			break;
			case TOGGLE_OC:
			break;
			case CLEAR_OC:
				SET_BIT(TCCR0, COM01);
    2856:	a3 e5       	ldi	r26, 0x53	; 83
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e3 e5       	ldi	r30, 0x53	; 83
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	80 62       	ori	r24, 0x20	; 32
    2862:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM00);
    2864:	a3 e5       	ldi	r26, 0x53	; 83
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e3 e5       	ldi	r30, 0x53	; 83
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8f 7e       	andi	r24, 0xEF	; 239
    2870:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	63 e0       	ldi	r22, 0x03	; 3
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
    287c:	13 c0       	rjmp	.+38     	; 0x28a4 <Timer0_init+0x32c>
			break;
			case SET_OC:
				SET_BIT(TCCR0, COM01);
    287e:	a3 e5       	ldi	r26, 0x53	; 83
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e3 e5       	ldi	r30, 0x53	; 83
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	80 62       	ori	r24, 0x20	; 32
    288a:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM00);
    288c:	a3 e5       	ldi	r26, 0x53	; 83
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e3 e5       	ldi	r30, 0x53	; 83
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	80 61       	ori	r24, 0x10	; 16
    2898:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	63 e0       	ldi	r22, 0x03	; 3
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
			break;
		}
	}
}
    28a4:	2d 96       	adiw	r28, 0x0d	; 13
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <Timer0_setCallBack>:
 * 		for the upper layer layer.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_setCallBack(void (*Ptr2Function)(void))
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <Timer0_setCallBack+0x6>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
	g_timer0CallBack_Ptr = Ptr2Function;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	90 93 89 01 	sts	0x0189, r25
    28cc:	80 93 88 01 	sts	0x0188, r24
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <Timer0_start>:
 * [In] start				: Indicates start value.
 * [In] compareValue		: Indicates compare value.
 * [Return]					: Void.
 */
void Timer0_start(TIMER01_PRESCALER prescaler, uint8 start, uint8 compareValue)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <Timer0_start+0x6>
    28e0:	0f 92       	push	r0
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	6a 83       	std	Y+2, r22	; 0x02
    28ea:	4b 83       	std	Y+3, r20	; 0x03
	prescaler &= 0x07; /* Set pre-scaler to (111) if it is larger */
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	87 70       	andi	r24, 0x07	; 7
    28f0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = start; /* Set timer starting value */
    28f2:	e2 e5       	ldi	r30, 0x52	; 82
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	80 83       	st	Z, r24
	OCR0 = compareValue; /* Set timer compare value */
    28fa:	ec e5       	ldi	r30, 0x5C	; 92
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	80 83       	st	Z, r24
	/* Clear previous pre-scaler value & set new pre-scaler */
	OVERWRITE_REG(TCCR0, 0xF8, prescaler);
    2902:	a3 e5       	ldi	r26, 0x53	; 83
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e3 e5       	ldi	r30, 0x53	; 83
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	98 2f       	mov	r25, r24
    290e:	98 7f       	andi	r25, 0xF8	; 248
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	89 2b       	or	r24, r25
    2914:	8c 93       	st	X, r24
}
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <Timer0_stop>:
 * 		Function that stops timer0 in any mode, by setting it's pre-scaler to zero.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_stop(void)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	OVERWRITE_REG(TCCR0, 0xF8, 0x00); /* Clear pre-scaler */
    292a:	a3 e5       	ldi	r26, 0x53	; 83
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e3 e5       	ldi	r30, 0x53	; 83
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	88 7f       	andi	r24, 0xF8	; 248
    2936:	8c 93       	st	X, r24
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <Timer0_deInit>:
 * 		Function that clears all timer0 settings.
 * [Args]		: Void.
 * [Return]		: Void.
 */
void Timer0_deInit(void)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <Timer0_deInit+0x6>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	/* Clear timer0 registers */
	CLEAR_REG(TCCR0);
    294a:	e3 e5       	ldi	r30, 0x53	; 83
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	e3 e5       	ldi	r30, 0x53	; 83
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	10 82       	st	Z, r1
	CLEAR_REG(TCNT0);
    2956:	e2 e5       	ldi	r30, 0x52	; 82
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	e2 e5       	ldi	r30, 0x52	; 82
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	10 82       	st	Z, r1
	CLEAR_REG(OCR0);
    2962:	ec e5       	ldi	r30, 0x5C	; 92
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	ec e5       	ldi	r30, 0x5C	; 92
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	10 82       	st	Z, r1
	/* Disable timer0 interrupts */
	CLEAR_BIT(TIMSK, OCIE0);
    296e:	a9 e5       	ldi	r26, 0x59	; 89
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e9 e5       	ldi	r30, 0x59	; 89
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8d 7f       	andi	r24, 0xFD	; 253
    297a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE0);
    297c:	a9 e5       	ldi	r26, 0x59	; 89
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e9 e5       	ldi	r30, 0x59	; 89
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	8e 7f       	andi	r24, 0xFE	; 254
    2988:	8c 93       	st	X, r24
	/* Clear timer0 flags */
	SET_BIT(TIFR, OCF0);
    298a:	a8 e5       	ldi	r26, 0x58	; 88
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e8 e5       	ldi	r30, 0x58	; 88
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	82 60       	ori	r24, 0x02	; 2
    2996:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV0);
    2998:	a8 e5       	ldi	r26, 0x58	; 88
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e8 e5       	ldi	r30, 0x58	; 88
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	81 60       	ori	r24, 0x01	; 1
    29a4:	8c 93       	st	X, r24
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	08 95       	ret

000029b2 <__mulsi3>:
    29b2:	62 9f       	mul	r22, r18
    29b4:	d0 01       	movw	r26, r0
    29b6:	73 9f       	mul	r23, r19
    29b8:	f0 01       	movw	r30, r0
    29ba:	82 9f       	mul	r24, r18
    29bc:	e0 0d       	add	r30, r0
    29be:	f1 1d       	adc	r31, r1
    29c0:	64 9f       	mul	r22, r20
    29c2:	e0 0d       	add	r30, r0
    29c4:	f1 1d       	adc	r31, r1
    29c6:	92 9f       	mul	r25, r18
    29c8:	f0 0d       	add	r31, r0
    29ca:	83 9f       	mul	r24, r19
    29cc:	f0 0d       	add	r31, r0
    29ce:	74 9f       	mul	r23, r20
    29d0:	f0 0d       	add	r31, r0
    29d2:	65 9f       	mul	r22, r21
    29d4:	f0 0d       	add	r31, r0
    29d6:	99 27       	eor	r25, r25
    29d8:	72 9f       	mul	r23, r18
    29da:	b0 0d       	add	r27, r0
    29dc:	e1 1d       	adc	r30, r1
    29de:	f9 1f       	adc	r31, r25
    29e0:	63 9f       	mul	r22, r19
    29e2:	b0 0d       	add	r27, r0
    29e4:	e1 1d       	adc	r30, r1
    29e6:	f9 1f       	adc	r31, r25
    29e8:	bd 01       	movw	r22, r26
    29ea:	cf 01       	movw	r24, r30
    29ec:	11 24       	eor	r1, r1
    29ee:	08 95       	ret

000029f0 <__udivmodhi4>:
    29f0:	aa 1b       	sub	r26, r26
    29f2:	bb 1b       	sub	r27, r27
    29f4:	51 e1       	ldi	r21, 0x11	; 17
    29f6:	07 c0       	rjmp	.+14     	; 0x2a06 <__udivmodhi4_ep>

000029f8 <__udivmodhi4_loop>:
    29f8:	aa 1f       	adc	r26, r26
    29fa:	bb 1f       	adc	r27, r27
    29fc:	a6 17       	cp	r26, r22
    29fe:	b7 07       	cpc	r27, r23
    2a00:	10 f0       	brcs	.+4      	; 0x2a06 <__udivmodhi4_ep>
    2a02:	a6 1b       	sub	r26, r22
    2a04:	b7 0b       	sbc	r27, r23

00002a06 <__udivmodhi4_ep>:
    2a06:	88 1f       	adc	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	5a 95       	dec	r21
    2a0c:	a9 f7       	brne	.-22     	; 0x29f8 <__udivmodhi4_loop>
    2a0e:	80 95       	com	r24
    2a10:	90 95       	com	r25
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	08 95       	ret

00002a18 <__prologue_saves__>:
    2a18:	2f 92       	push	r2
    2a1a:	3f 92       	push	r3
    2a1c:	4f 92       	push	r4
    2a1e:	5f 92       	push	r5
    2a20:	6f 92       	push	r6
    2a22:	7f 92       	push	r7
    2a24:	8f 92       	push	r8
    2a26:	9f 92       	push	r9
    2a28:	af 92       	push	r10
    2a2a:	bf 92       	push	r11
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	ca 1b       	sub	r28, r26
    2a42:	db 0b       	sbc	r29, r27
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	09 94       	ijmp

00002a50 <__epilogue_restores__>:
    2a50:	2a 88       	ldd	r2, Y+18	; 0x12
    2a52:	39 88       	ldd	r3, Y+17	; 0x11
    2a54:	48 88       	ldd	r4, Y+16	; 0x10
    2a56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a62:	b9 84       	ldd	r11, Y+9	; 0x09
    2a64:	c8 84       	ldd	r12, Y+8	; 0x08
    2a66:	df 80       	ldd	r13, Y+7	; 0x07
    2a68:	ee 80       	ldd	r14, Y+6	; 0x06
    2a6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a70:	aa 81       	ldd	r26, Y+2	; 0x02
    2a72:	b9 81       	ldd	r27, Y+1	; 0x01
    2a74:	ce 0f       	add	r28, r30
    2a76:	d1 1d       	adc	r29, r1
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	ed 01       	movw	r28, r26
    2a84:	08 95       	ret

00002a86 <itoa>:
    2a86:	fb 01       	movw	r30, r22
    2a88:	9f 01       	movw	r18, r30
    2a8a:	e8 94       	clt
    2a8c:	42 30       	cpi	r20, 0x02	; 2
    2a8e:	c4 f0       	brlt	.+48     	; 0x2ac0 <itoa+0x3a>
    2a90:	45 32       	cpi	r20, 0x25	; 37
    2a92:	b4 f4       	brge	.+44     	; 0x2ac0 <itoa+0x3a>
    2a94:	4a 30       	cpi	r20, 0x0A	; 10
    2a96:	29 f4       	brne	.+10     	; 0x2aa2 <itoa+0x1c>
    2a98:	97 fb       	bst	r25, 7
    2a9a:	1e f4       	brtc	.+6      	; 0x2aa2 <itoa+0x1c>
    2a9c:	90 95       	com	r25
    2a9e:	81 95       	neg	r24
    2aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa2:	64 2f       	mov	r22, r20
    2aa4:	77 27       	eor	r23, r23
    2aa6:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__udivmodhi4>
    2aaa:	80 5d       	subi	r24, 0xD0	; 208
    2aac:	8a 33       	cpi	r24, 0x3A	; 58
    2aae:	0c f0       	brlt	.+2      	; 0x2ab2 <itoa+0x2c>
    2ab0:	89 5d       	subi	r24, 0xD9	; 217
    2ab2:	81 93       	st	Z+, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	a1 f7       	brne	.-24     	; 0x2aa2 <itoa+0x1c>
    2aba:	16 f4       	brtc	.+4      	; 0x2ac0 <itoa+0x3a>
    2abc:	5d e2       	ldi	r21, 0x2D	; 45
    2abe:	51 93       	st	Z+, r21
    2ac0:	10 82       	st	Z, r1
    2ac2:	c9 01       	movw	r24, r18
    2ac4:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <strrev>

00002ac8 <strrev>:
    2ac8:	dc 01       	movw	r26, r24
    2aca:	fc 01       	movw	r30, r24
    2acc:	67 2f       	mov	r22, r23
    2ace:	71 91       	ld	r23, Z+
    2ad0:	77 23       	and	r23, r23
    2ad2:	e1 f7       	brne	.-8      	; 0x2acc <strrev+0x4>
    2ad4:	32 97       	sbiw	r30, 0x02	; 2
    2ad6:	04 c0       	rjmp	.+8      	; 0x2ae0 <strrev+0x18>
    2ad8:	7c 91       	ld	r23, X
    2ada:	6d 93       	st	X+, r22
    2adc:	70 83       	st	Z, r23
    2ade:	62 91       	ld	r22, -Z
    2ae0:	ae 17       	cp	r26, r30
    2ae2:	bf 07       	cpc	r27, r31
    2ae4:	c8 f3       	brcs	.-14     	; 0x2ad8 <strrev+0x10>
    2ae6:	08 95       	ret

00002ae8 <_exit>:
    2ae8:	f8 94       	cli

00002aea <__stop_program>:
    2aea:	ff cf       	rjmp	.-2      	; 0x2aea <__stop_program>
